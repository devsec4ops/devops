{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Course Contents","text":"<p>In this course, you will learn the fundamentals of DevOps. You will learn how to use DevOps tools and practices to improve your software development and delivery process.</p> <p>Below are the topics that will be covered in this course:</p>"},{"location":"#introduction","title":"Introduction","text":"<ul> <li>SDLC Basics</li> <li>What is DevOps?</li> <li>Why DevOps?</li> </ul>"},{"location":"#os-networking","title":"OS &amp; Networking","text":"<ul> <li>OS (Linux)</li> <li>Networking</li> <li>Bash</li> </ul>"},{"location":"#scripting","title":"Scripting","text":"<ul> <li>Python</li> </ul>"},{"location":"#version-control","title":"Version Control","text":"<ul> <li>GIT</li> <li>Github</li> </ul>"},{"location":"#cloud-basics","title":"Cloud Basics","text":"<ul> <li> <p>AWS Well-Architected Framework</p> </li> <li> <p>Identity &amp; Access Management</p> <ul> <li>AWS IAM</li> </ul> </li> <li> <p>Data Storage</p> <ul> <li>AWS S3</li> <li>AWS RDS</li> <li>AWS Dynamo DB</li> </ul> </li> <li> <p>Networking</p> <ul> <li>AWS VPC</li> <li>AWS Direct Connect</li> <li>AWS CloudFront</li> <li>AWS Route 53</li> <li>AWS ELB</li> </ul> </li> <li> <p>Compute</p> <ul> <li>AWS EC2</li> <li>AWS Lambda</li> </ul> </li> </ul>"},{"location":"#continuous-integration-deployment","title":"Continuous Integration &amp; Deployment","text":"<ul> <li>Github Workflow</li> <li>Github Actions</li> <li>CI CD Pipeline</li> <li>Git Best Practices</li> <li>Pipeline Security</li> </ul>"},{"location":"#containerisation-and-orchestration","title":"Containerisation and Orchestration","text":""},{"location":"#docker","title":"Docker","text":"<ul> <li>Architecture</li> <li>Networking</li> <li>Storage</li> <li>Security</li> <li>CI/CD Integration</li> </ul>"},{"location":"#kubernetes","title":"Kubernetes","text":"<ul> <li>Architecture</li> <li>Networking</li> <li>Storage</li> <li>Security</li> <li>Ci/CD Integration</li> </ul>"},{"location":"#infrastructure-as-a-code","title":"Infrastructure as a Code","text":"<ul> <li>Terraform</li> <li>Ansible</li> </ul>"},{"location":"#monitoring","title":"Monitoring","text":"<ul> <li>CloudWatch (Primary)</li> <li>Prometheus</li> <li>Grafana</li> </ul>"},{"location":"0-introduction/SDLC-basics/","title":"SDLC Basics","text":""},{"location":"1-os-networking/0-index/","title":"Index","text":""},{"location":"1-os-networking/0-index/#introduction-to-networking","title":"Introduction to Networking","text":"<ul> <li>What is Networking?</li> <li>Importance of Networking</li> <li>Basic Networking Concepts</li> </ul>"},{"location":"1-os-networking/0-index/#osi-model","title":"OSI Model","text":"<ul> <li>Overview of OSI Model</li> <li>Functions of Each Layer</li> </ul>"},{"location":"1-os-networking/0-index/#protocols","title":"Protocols","text":"<ul> <li>Introduction to Protocols</li> <li>TCP/IP Model</li> <li>TCP</li> <li>UDP</li> <li>IP</li> </ul>"},{"location":"1-os-networking/0-index/#ports-and-ip-addressing","title":"Ports and IP Addressing","text":"<ul> <li>Understanding Ports</li> <li>IP Addressing Basics</li> <li>IPv4 vs IPv6</li> </ul>"},{"location":"1-os-networking/0-index/#subnetting","title":"Subnetting","text":"<ul> <li>Basics of Subnetting</li> <li>Subnetting Techniques</li> <li>CIDR Notation</li> </ul>"},{"location":"1-os-networking/0-index/#routing-and-switching","title":"Routing and Switching","text":"<ul> <li>Routing Fundamentals</li> <li>Static vs Dynamic Routing</li> <li>Switching Basics</li> <li>VLANs</li> </ul>"},{"location":"1-os-networking/0-index/#dns","title":"DNS","text":"<ul> <li>How DNS Works</li> <li>Configuring DNS Servers</li> <li>DNS Query Process</li> </ul>"},{"location":"1-os-networking/0-index/#vpn-virtual-private-network","title":"VPN (Virtual Private Network)","text":"<ul> <li>What is VPN?</li> <li>Types of VPNs</li> <li>How VPN Works</li> </ul>"},{"location":"1-os-networking/0-index/#firewalls","title":"Firewalls","text":"<ul> <li>Introduction to Firewalls</li> <li>Types of Firewalls</li> <li>Configuring Firewalls</li> </ul>"},{"location":"1-os-networking/0-index/#networking-tools","title":"Networking Tools","text":"<ul> <li>Essential Networking Tools</li> <li>Network Monitoring and Management</li> </ul>"},{"location":"1-os-networking/0-index/#network-security","title":"Network Security","text":"<ul> <li>Basics of Network Security</li> <li>Threats and Vulnerabilities</li> <li>Security Best Practices</li> </ul>"},{"location":"1-os-networking/0-index/#wireless-networking","title":"Wireless Networking","text":"<ul> <li>Wireless Networking Fundamentals</li> <li>Configuring Wireless Networks</li> <li>Security in Wireless Networks</li> </ul>"},{"location":"1-os-networking/0-index/#network-topologies","title":"Network Topologies","text":"<ul> <li>Common Network Topologies</li> <li>Pros and Cons of Each Topology</li> </ul>"},{"location":"1-os-networking/0-index/#dhcp-dynamic-host-configuration-protocol","title":"DHCP (Dynamic Host Configuration Protocol)","text":"<ul> <li>How DHCP Works</li> <li>Configuring DHCP Servers and Clients</li> </ul>"},{"location":"1-os-networking/0-index/#nat-network-address-translation","title":"NAT (Network Address Translation)","text":"<ul> <li>NAT Basics</li> <li>Types of NAT</li> <li>Configuring NAT</li> </ul>"},{"location":"1-os-networking/0-index/#vlans-virtual-local-area-networks","title":"VLANs (Virtual Local Area Networks)","text":"<ul> <li>Introduction to VLANs</li> <li>Configuring VLANs</li> <li>VLAN Best Practices</li> </ul>"},{"location":"1-os-networking/0-index/#conclusion","title":"Conclusion","text":"<ul> <li>Recap of Key Networking Concepts</li> <li>Future Trends in Networking</li> </ul>"},{"location":"1-os-networking/1-introduction/","title":"Introduction","text":""},{"location":"1-os-networking/1-introduction/#what-is-networking","title":"What is Networking ?","text":"<p>Networking involves connecting computers, servers, and other devices to share data and resources, enabling communication and collaboration across different locations.  Networking is foundational to the internet, enterprise environments, and various forms of digital communication.</p> <p>The data packets travel to a local ISP, then to the network where the website is hosted.  Upon reaching the company's network, the packets pass through a link-layer switch and arrive at the designated server.</p> <p></p>"},{"location":"1-os-networking/non-functional-requirements/","title":"Non functional requirements","text":"<p>This outlines the key non-functional requirements (NFRs) crucial for designing and operating a robust, secure, and efficient networking infrastructure.  These requirements are particularly relevant when dealing with Docker, Kubernetes, AWS, and other cloud or container orchestration technologies.</p>"},{"location":"1-os-networking/non-functional-requirements/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Scalability</li> <li>Performance</li> <li>Reliability</li> <li>Security</li> <li>Maintainability</li> <li>Compliance</li> </ul>"},{"location":"1-os-networking/non-functional-requirements/#scalability","title":"Scalability","text":"<ul> <li>Horizontal and Vertical Scaling: Support for adding more machines (horizontal) and adding more resources to existing machines (vertical).</li> <li>Auto-scaling: Capabilities for automatically adjusting resources based on demand, especially in cloud services like AWS.</li> </ul>"},{"location":"1-os-networking/non-functional-requirements/#performance","title":"Performance","text":"<ul> <li>Low Latency: Minimize delay in network communication, crucial for real-time applications.</li> <li>High Throughput: Ability to handle significant data transfer volumes efficiently.</li> <li>Efficient Resource Utilization: Optimization of computing, storage, and network resources.</li> </ul>"},{"location":"1-os-networking/non-functional-requirements/#reliability","title":"Reliability","text":"<ul> <li>High Availability: Designing the network to ensure services are consistently available with minimal downtime, utilizing redundancy and failover systems.</li> <li>Fault Tolerance: Maintaining operational continuity in the event of component failures, through service or data replication.</li> </ul>"},{"location":"1-os-networking/non-functional-requirements/#security","title":"Security","text":"<ul> <li>Data Encryption: Ensuring data is encrypted both in transit and at rest to protect sensitive information.</li> <li>Access Control: Implementing strict measures for authentication and authorization to secure network resources.</li> <li>Network Segmentation: Utilizing techniques like VPCs and subnets for isolating network segments, reducing breach impacts.</li> </ul>"},{"location":"1-os-networking/non-functional-requirements/#maintainability","title":"Maintainability","text":"<ul> <li>Automated Deployments and Rollbacks: Facilitating quick updates and issue resolutions with minimal downtime.</li> <li>Monitoring and Logging: Comprehensive monitoring of network traffic, resource utilization, and application performance for effective troubleshooting.</li> <li>Documentation: Keeping detailed documentation on network architecture, configurations, and operational procedures.</li> </ul>"},{"location":"1-os-networking/non-functional-requirements/#compliance","title":"Compliance","text":"<ul> <li>Regulatory Compliance: Adhering to laws and standards relevant to data protection (GDPR), healthcare information (HIPAA), payment data (PCI DSS), etc.</li> <li>Data Sovereignty: Ensuring data storage and processing comply with local laws and regulations.</li> </ul>"},{"location":"2-scripting/python/1-introduction/","title":"Introduction to Python","text":""},{"location":"2-scripting/python/1-introduction/#what-is-python","title":"What is Python","text":"<p>Python is a powerful, versatile, and beginner-friendly programming language created by Guido van Rossum and first released in 1991. It's often described as a high-level, general-purpose language, meaning it's:</p> <p>High-level: You code using human-readable constructs instead of low-level machine instructions, making it more intuitive and natural to learn and use.</p> <p>General-purpose: It can be applied to various tasks and domains, from web development and data science to automation and system administration.</p> <p>Python's popularity has surged in recent years, thanks to its simplicity, readability, and extensive ecosystem of libraries and frameworks. It's widely used in fields like web development, data analysis, machine learning, scientific computing, and more.</p> <p>Here are some key characteristics of Python:</p> <ol> <li> <p>Open-Source: Python is an open-source language, meaning its source code is freely available for anyone to inspect, modify, and distribute. This fosters collaboration, transparency, and continuous improvement.</p> </li> <li> <p>Readable Syntax: Python prioritizes code readability with its simple and clear syntax. It heavily relies on indentation to define code blocks, improving its visual structure and making it easier to understand.</p> </li> <li> <p>Interpreted Language: Unlike compiled languages like C++ or Java, Python code doesn't need to be translated into machine code before execution. Instead, an interpreter directly reads and executes your code line by line, allowing for faster development and testing cycles.</p> </li> <li> <p>Dynamically Typed: You don't explicitly declare the data type of variables in Python. The interpreter infers the type based on the value assigned, providing more flexibility but requiring less upfront effort.</p> </li> <li> <p>Object-Oriented: Python supports object-oriented programming (OOP) concepts like classes, objects, inheritance, and polymorphism, enabling you to organize your code effectively for complex projects.</p> </li> <li> <p>Extensive Standard Library: Python comes with a rich standard library containing useful modules for various tasks, including file I/O, networking, regular expressions, web scraping, and more. This saves you time and effort by readily providing solutions for common programming needs.</p> </li> <li> <p>Large and Active Community: Python boasts a vast and supportive community of developers, offering numerous resources, libraries, frameworks, and tutorials. This makes it easier to find help and learn from others' experiences.</p> </li> </ol>"},{"location":"2-scripting/python/1-introduction/#why-learn-python","title":"Why learn Python?","text":"<p>Here are some of the reasons why Python is such a popular choice for both beginners and experienced programmers:</p> <ul> <li>Easy to Learn: Its simple syntax and clear structure make it an excellent starting point for those new to programming.</li> <li>Versatile: You can use it for various tasks, from simple scripts to complex applications.</li> <li>Powerful: Despite its ease of use, Python can handle demanding tasks thanks to its robust libraries and frameworks.</li> <li>Large Community: You'll have access to extensive resources, tutorials, and support from the active Python community.</li> <li>Growing Demand: Python is one of the most in-demand programming languages in various industries, making it a valuable skill for career advancement.</li> </ul>"},{"location":"2-scripting/python/1-introduction/#installing-and-setting-up-python","title":"Installing and setting up Python","text":"<p>Before you start learning Python, you need to install it on your system. Python is available for all major operating systems, including Windows, macOS, and Linux.</p> <p>Refer to the official Python website for detailed installation instructions: Python Downloads</p>"},{"location":"2-scripting/python/1-introduction/#introduction-to-the-interpreter","title":"Introduction to the interpreter","text":"<p>Python comes with an interactive interpreter that allows you to execute code and see the results immediately. This is a great way to experiment with the language and test small code snippets.</p> <p>To start the Python interpreter, open your terminal or command prompt and type <code>python</code> (or <code>python3</code> on some systems). You should see a prompt like <code>&gt;&gt;&gt;</code>, indicating that the interpreter is ready to accept your commands.</p> <p>Here's an example of using the Python interpreter:</p> <pre><code>&gt;&gt;&gt; print(\"Hello, Python!\")\nHello, Python!\n</code></pre> <p>You can also run Python scripts saved in files using the interpreter. For example, if you have a file called <code>hello.py</code> containing the line <code>print(\"Hello, Python!\")</code>, you can run it using <code>python hello.py</code>.</p> <p>Alternatively, you can use an Integrated Development Environment (IDE) like PyCharm, VSCode, or Jupyter Notebook for a more feature-rich coding experience.</p>"},{"location":"2-scripting/python/1-introduction/#basic-syntax-and-keywords","title":"Basic syntax and keywords","text":"<p>Python has a simple and consistent syntax that's easy to read and understand. Here are some basic concepts to get you started:</p> <ul> <li> <p>Comments: You can add comments to your code using the <code>#</code> symbol. Comments are ignored by the interpreter and are used to document your code.</p> </li> <li> <p>Indentation: Python uses indentation to define code blocks, such as loops, functions, and classes. This makes the code visually clear and reduces the need for explicit block delimiters.</p> </li> <li> <p>Variables: You can declare variables and assign values to them using the <code>=</code> operator. Python is dynamically typed, so you don't need to specify the data type of a variable.</p> </li> <li> <p>Data Types: Python supports various data types, including integers, floats, strings, booleans, lists, tuples, dictionaries, and more.</p> </li> <li> <p>Operators: Python provides a wide range of operators for arithmetic, comparison, logical operations, and more.</p> </li> <li> <p>Input and Output: You can take input from the user and display output using the <code>input()</code> and <code>print()</code> functions.</p> </li> </ul> <p>In the next section, we'll explore these concepts in more detail and learn how to use them in practice.</p>"},{"location":"2-scripting/python/2-datatypes-and-variables/","title":"Data types and Variables","text":""},{"location":"2-scripting/python/2-datatypes-and-variables/#variables","title":"Variables","text":"<p>Variables are used to store data in a program. They are like containers that hold values. You can think of them as labels that you can assign to values. In Python, you can create a variable by giving it a name and assigning a value to it using the <code>=</code> operator.</p> <pre><code># Assigning a value to a variable\nx = 10\ny = 3.14\nname = \"Alice\"\nis_student = True\n</code></pre>"},{"location":"2-scripting/python/2-datatypes-and-variables/#data-types","title":"Data Types","text":""},{"location":"2-scripting/python/2-datatypes-and-variables/#numbers","title":"Numbers","text":"<ul> <li> <p>Integers (int): represent whole numbers (positive, negative, or zero) with unlimited size. Examples: 10, -23, 0.</p> </li> <li> <p>Floats (float): represent decimal numbers with limited precision (approximately 15 decimal places). Examples: 3.14, -5.2e10 (scientific notation).</p> </li> </ul>"},{"location":"2-scripting/python/2-datatypes-and-variables/#strings","title":"Strings","text":"<ul> <li>A string is a sequence of characters enclosed within single or double quotes. Examples: \"hello\", 'world', \"123\".</li> </ul>"},{"location":"2-scripting/python/2-datatypes-and-variables/#boolean","title":"Boolean","text":"<ul> <li>A boolean value is either <code>True</code> or <code>False</code>. It is used to represent truth values. Examples: True, False.</li> </ul>"},{"location":"2-scripting/python/2-datatypes-and-variables/#none","title":"None","text":"<ul> <li>The <code>None</code> keyword is used to represent the absence of a value. It is similar to <code>null</code> in other programming languages.</li> </ul>"},{"location":"2-scripting/python/2-datatypes-and-variables/#operators","title":"Operators","text":""},{"location":"2-scripting/python/2-datatypes-and-variables/#arithmetic-operators","title":"Arithmetic Operators","text":"<ul> <li><code>+</code> (addition)</li> <li><code>-</code> (subtraction)</li> <li><code>*</code> (multiplication)</li> <li><code>/</code> (division)</li> <li><code>%</code> (modulus)</li> <li><code>**</code> (exponentiation)</li> <li><code>//</code> (floor division)</li> </ul> <pre><code># Arithmetic operators\nx = 10\ny = 3\nprint(x + y)  # 13\nprint(x - y)  # 7\nprint(x * y)  # 30\nprint(x / y)  # 3.3333333333333335\nprint(x % y)  # 1\nprint(x ** y) # 1000\nprint(x // y) # 3\n</code></pre>"},{"location":"2-scripting/python/2-datatypes-and-variables/#comparison-operators","title":"Comparison Operators","text":"<ul> <li><code>==</code> (equal to)</li> <li><code>!=</code> (not equal to)</li> <li><code>&lt;</code> (less than)</li> <li><code>&gt;</code> (greater than)</li> <li><code>&lt;=</code> (less than or equal to)</li> <li><code>&gt;=</code> (greater than or equal to)</li> </ul> <pre><code># Comparison operators\nx = 10\ny = 5\nprint(x == y)  # False\nprint(x != y)  # True\nprint(x &lt; y)   # False\nprint(x &gt; y)   # True\nprint(x &lt;= y)  # False\nprint(x &gt;= y)  # True\n</code></pre>"},{"location":"2-scripting/python/2-datatypes-and-variables/#logical-operators","title":"Logical Operators","text":"<ul> <li><code>and</code> (logical and)</li> <li><code>or</code> (logical or)</li> <li><code>not</code> (logical not)</li> </ul> <pre><code># Logical operators\nx = True\ny = False\nprint(x and y)  # False\nprint(x or y)   # True\nprint(not x)    # False\n</code></pre>"},{"location":"2-scripting/python/2-datatypes-and-variables/#assignment-operators","title":"Assignment Operators","text":"<ul> <li><code>=</code> (assign value)</li> <li><code>+=</code> (add and assign)</li> <li><code>-=</code> (subtract and assign)</li> <li><code>*=</code> (multiply and assign)</li> <li><code>/=</code> (divide and assign)</li> <li><code>%=</code> (modulus and assign)</li> <li><code>**=</code> (exponentiate and assign)</li> <li><code>//=</code> (floor divide and assign)</li> </ul> <pre><code># Assignment operators\nx = 10\nx += 5  # equivalent to x = x + 5\nx -= 3  # equivalent to x = x - 3\nx *= 2  # equivalent to x = x * 2\nx /= 4  # equivalent to x = x / 4\nx %= 3  # equivalent to x = x % 3\nx **= 2 # equivalent to x = x ** 2\nx //= 5 # equivalent to x = x // 5\n</code></pre>"},{"location":"2-scripting/python/2-datatypes-and-variables/#identity-operators","title":"Identity Operators","text":"<ul> <li><code>is</code> (object identity)</li> <li><code>is not</code> (negated object identity)</li> </ul> <pre><code># Identity operators\nx = [1, 2, 3]\ny = [1, 2, 3]\nz = x\nprint(x is y)    # False\nprint(x is not y) # True\nprint(x is z)    # True\n</code></pre>"},{"location":"2-scripting/python/2-datatypes-and-variables/#membership-operators","title":"Membership Operators","text":"<ul> <li><code>in</code> (sequence membership)</li> <li><code>not in</code> (negated sequence membership)</li> </ul> <pre><code># Membership operators\nx = [1, 2, 3, 4, 5]\nprint(3 in x)    # True\nprint(6 not in x) # True\n</code></pre>"},{"location":"2-scripting/python/2-datatypes-and-variables/#type-conversion","title":"Type Conversion","text":"<p>You can convert between different data types using built-in functions like <code>int()</code>, <code>float()</code>, <code>str()</code>, <code>bool()</code>, etc.</p> <pre><code># Type conversion\nx = 10\ny = 3.14\nz = \"20\"\nprint(float(x))  # 10.0\nprint(int(y))    # 3\nprint(int(z))    # 20\nprint(str(x))    # '10'\nprint(bool(x))   # True\nprint(bool(0))   # False\n</code></pre>"},{"location":"2-scripting/python/2-datatypes-and-variables/#input-and-output","title":"Input and Output","text":""},{"location":"2-scripting/python/2-datatypes-and-variables/#input","title":"Input","text":"<p>You can use the <code>input()</code> function to take user input from the keyboard. The input is always returned as a string.</p> <pre><code># Input\nname = input(\"Enter your name: \")\nprint(\"Hello, \" + name)\n</code></pre>"},{"location":"2-scripting/python/2-datatypes-and-variables/#output","title":"Output","text":"<p>You can use the <code>print()</code> function to display output on the screen. You can pass multiple arguments to <code>print()</code> separated by commas.</p> <pre><code># Output\nx = 10\ny = 3.14\nname = \"Alice\"\nprint(\"The value of x is\", x)\nprint(\"The value of y is\", y)\nprint(\"Hello,\", name)\n</code></pre>"},{"location":"2-scripting/python/2-datatypes-and-variables/#comments","title":"Comments","text":"<p>Comments are used to explain the code and make it more readable. In Python, you can use the <code>#</code> symbol to write a single-line comment.</p> <pre><code># This is a single-line comment\n</code></pre> <p>For multi-line comments, you can enclose the text within triple quotes.</p> <pre><code>\"\"\"\nThis is a\nmulti-line comment\n\"\"\"\n</code></pre>"},{"location":"2-scripting/python/3-control-flow/","title":"Indentation in Python","text":"<p>In Python, indentation is used to define a block of code. The standard indentation is 4 spaces. </p> <pre><code># Example\nx = 10\nif x &gt; 5:\n    print('x is greater than 5')\n</code></pre> <p>If you use a different number of spaces or tabs, Python will raise an <code>IndentationError</code>.</p> <pre><code># Example\nx = 10\nif x &gt; 5:\n    print('x is greater than 5') # IndentationError\n</code></pre>"},{"location":"2-scripting/python/3-control-flow/#control-flow","title":"Control Flow","text":""},{"location":"2-scripting/python/3-control-flow/#conditional-statements","title":"Conditional Statements","text":"<p>Conditional statements are used to execute a block of code based on a condition. </p>"},{"location":"2-scripting/python/3-control-flow/#if-statements","title":"<code>if</code> Statements","text":"<p>The <code>if</code> statement is the most basic form of a conditional statement. It is used to execute a block of code if a condition is true.</p> <pre><code># Syntax\nif condition:\n    # code block\n</code></pre> <p>The <code>if</code> statement is followed by a condition. If the condition is true, the code block is executed. If the condition is false, the code block is skipped.</p> <pre><code># Example\nx = 10\nif x &gt; 5:\n    print('x is greater than 5')\n</code></pre>"},{"location":"2-scripting/python/3-control-flow/#if-else-statements","title":"<code>if</code>-<code>else</code> Statements","text":"<p>The <code>if</code> statement can be followed by an <code>else</code> statement. The <code>else</code> statement is used to execute a block of code if the condition is false.</p> <pre><code># Syntax\nif condition:\n    # code block\nelse:\n    # code block\n</code></pre> <pre><code># Example\nx = 3\nif x &gt; 5:\n    print('x is greater than 5')\nelse:\n    print('x is less than or equal to 5')\n</code></pre>"},{"location":"2-scripting/python/3-control-flow/#if-elif-else-statements","title":"<code>if</code>-<code>elif</code>-<code>else</code> Statements","text":"<p>The <code>if</code> statement can be followed by one or more <code>elif</code> (else if) statements. The <code>elif</code> statement is used to check additional conditions if the previous conditions are false.</p> <pre><code># Syntax\nif condition:\n    # code block\nelif condition:\n    # code block\nelse:\n    # code block\n</code></pre> <pre><code># Example\nx = 3\nif x &gt; 5:\n    print('x is greater than 5')\nelif x == 5:\n    print('x is equal to 5')\nelse:\n    print('x is less than 5')\n</code></pre>"},{"location":"2-scripting/python/3-control-flow/#nested-if-statements","title":"Nested <code>if</code> Statements","text":"<p><code>if</code> statements can be nested inside other <code>if</code> statements. This is useful when you want to check for additional conditions.</p> <pre><code># Example\nx = 10\ny = 5\nif x &gt; 5:\n    if y &gt; 5:\n        print('x and y are greater than 5')\n    else:\n        print('x is greater than 5, but y is less than or equal to 5')\nelse:\n    print('x is less than or equal to 5')\n</code></pre>"},{"location":"2-scripting/python/3-control-flow/#loops","title":"Loops","text":"<p>Loops are used to execute a block of code multiple times.</p>"},{"location":"2-scripting/python/3-control-flow/#for-loops","title":"<code>for</code> Loops","text":"<p>The <code>for</code> loop is used to iterate over a sequence (e.g., a list, tuple, string).</p> <pre><code># Syntax\nfor item in sequence:\n    # code block\n</code></pre> <pre><code># Example\nfruits = ['apple', 'banana', 'cherry']\nfor fruit in fruits:\n    print(fruit)\n</code></pre>"},{"location":"2-scripting/python/3-control-flow/#while-loops","title":"<code>while</code> Loops","text":"<p>The <code>while</code> loop is used to execute a block of code as long as a condition is true.</p> <pre><code># Syntax\nwhile condition:\n    # code block\n</code></pre> <pre><code># Example\nx = 0\nwhile x &lt; 5:\n    print(x)\n    x += 1\n</code></pre>"},{"location":"2-scripting/python/3-control-flow/#nested-loops","title":"Nested Loops","text":"<p>Loops can be nested inside other loops. This is useful when you want to iterate over multiple sequences.</p> <pre><code># Example\nadj = ['red', 'big', 'tasty']\nfruits = ['apple', 'banana', 'cherry']\nfor a in adj:\n    for f in fruits:\n        print(a, f)\n</code></pre>"},{"location":"2-scripting/python/3-control-flow/#exercises","title":"Exercises","text":"<ol> <li>Write a program to check if a number is positive, negative, or zero.</li> <li>Write a program to find the sum of all numbers in a list.</li> <li>Write a program to find the factorial of a number.</li> <li>Write a program to print the Fibonacci series up to <code>n</code> terms.</li> <li>Write a program to check if a number is prime or not.</li> <li>Write a program to check if a string is a palindrome.</li> </ol>"},{"location":"2-scripting/python/4-functions/","title":"Functions","text":""},{"location":"2-scripting/python/4-functions/#defining-functions","title":"Defining Functions","text":"<p>A function is a block of code that performs a specific task. It can take input, perform operations, and return a result. Functions are used to organize code into reusable blocks, which can be called from different parts of a program.</p> <p>In Python, you can define a function using the <code>def</code> keyword followed by the function name and a pair of parentheses. The function body is indented and contains the code to be executed.</p> <pre><code># Syntax\ndef function_name(parameters):\n    # function body\n    # code block\n</code></pre> <pre><code># Example\ndef greet(name):\n    print(\"Hello, \" + name)\n</code></pre> <p>In the example above, we define a function called <code>greet</code> that takes a single parameter <code>name</code>. The function body contains a single statement that prints a greeting message to the console.</p>"},{"location":"2-scripting/python/4-functions/#arguments-and-parameters","title":"Arguments and Parameters","text":"<p>A function can take zero or more parameters as input. These parameters are specified in the function definition and are used to pass values to the function. When a function is called, the values passed to it are called arguments.</p> <pre><code># Syntax\ndef function_name(param1, param2, ...):\n    # function body\n    # code block\n</code></pre> <pre><code># Example\ndef add(x, y):\n    return x + y\n</code></pre> <p>In the example above, we define a function called <code>add</code> that takes two parameters <code>x</code> and <code>y</code>. The function body contains a single statement that returns the sum of the two parameters.</p>"},{"location":"2-scripting/python/4-functions/#returning-values","title":"Returning Values","text":"<p>A function can return a value using the <code>return</code> statement. The returned value can be used in the calling code.</p> <pre><code># Syntax\ndef function_name(parameters):\n    # function body\n    # code block\n    return value\n</code></pre> <pre><code># Example\ndef add(x, y):\n    return x + y\n</code></pre> <p>In the example above, the <code>add</code> function returns the sum of the two parameters <code>x</code> and <code>y</code>. The calling code can use the returned value as needed.</p>"},{"location":"2-scripting/python/4-functions/#scope-and-lifetime-of-variables","title":"Scope and Lifetime of Variables","text":"<p>Variables defined inside a function are local to that function and cannot be accessed from outside. They have a limited scope and lifetime, which is determined by the function's execution.</p> <pre><code># Example\ndef greet(name):\n    message = \"Hello, \" + name\n    print(message)\n\ngreet(\"Alice\")\nprint(message)  # NameError: name 'message' is not defined\n</code></pre> <p>In the example above, the <code>message</code> variable is defined inside the <code>greet</code> function and cannot be accessed from outside. Attempting to access it from the calling code results in a <code>NameError</code>.</p> <p>Variables defined outside any function are global and can be accessed from any part of the program. However, it is good practice to avoid using global variables as much as possible, as they can lead to unexpected behavior and make the code harder to understand and maintain.</p>"},{"location":"2-scripting/python/5-data-structures/","title":"Data Structures","text":""},{"location":"2-scripting/python/5-data-structures/#lists","title":"Lists","text":"<p>A list is a collection of items, which can be of different types. Lists are mutable, meaning that you can change the elements of a list after it has been created. Lists are created using square brackets <code>[]</code> and elements are separated by commas.</p> <pre><code># Syntax\nlist_name = [item1, item2, ...]\n</code></pre> <pre><code># Example\nfruits = [\"apple\", \"banana\", \"cherry\"]\n</code></pre> <p>In the example above, we define a list called <code>fruits</code> that contains three string elements.</p>"},{"location":"2-scripting/python/5-data-structures/#accessing-elements","title":"Accessing Elements","text":"<p>You can access individual elements of a list using their index. The index of the first element is 0, the index of the second element is 1, and so on. You can also use negative indices to access elements from the end of the list.</p> <pre><code># Syntax\nelement = list_name[index]\n</code></pre> <pre><code># Example\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(fruits[0])  # Output: apple\nprint(fruits[-1])  # Output: cherry\n</code></pre> <p>In the example above, we access the first and last elements of the <code>fruits</code> list using their indices.</p>"},{"location":"2-scripting/python/5-data-structures/#modifying-elements","title":"Modifying Elements","text":"<p>You can modify the elements of a list by assigning new values to them using their indices.</p> <pre><code># Syntax\nlist_name[index] = new_value\n</code></pre> <pre><code># Example\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfruits[1] = \"orange\"\nprint(fruits)  # Output: ['apple', 'orange', 'cherry']\n</code></pre> <p>In the example above, we change the second element of the <code>fruits</code> list from \"banana\" to \"orange\".</p>"},{"location":"2-scripting/python/5-data-structures/#adding-and-removing-elements","title":"Adding and Removing Elements","text":"<p>You can add new elements to a list using the <code>append</code> method, and remove elements using the <code>remove</code> method.</p> <pre><code># Syntax\nlist_name.append(new_item)\nlist_name.remove(item)\n</code></pre> <pre><code># Example\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfruits.append(\"orange\")\nprint(fruits)  # Output: ['apple', 'banana', 'cherry', 'orange']\nfruits.remove(\"banana\")\nprint(fruits)  # Output: ['apple', 'cherry', 'orange']\n</code></pre> <p>In the example above, we add \"orange\" to the <code>fruits</code> list using the <code>append</code> method, and remove \"banana\" from the list using the <code>remove</code> method.</p>"},{"location":"2-scripting/python/5-data-structures/#tuples","title":"Tuples","text":"<p>A tuple is a collection of items, similar to a list. However, tuples are immutable, meaning that you cannot change the elements of a tuple after it has been created. Tuples are created using parentheses <code>()</code> and elements are separated by commas.</p> <pre><code># Syntax\ntuple_name = (item1, item2, ...)\n</code></pre> <pre><code># Example\ncolors = (\"red\", \"green\", \"blue\")\n</code></pre> <p>In the example above, we define a tuple called <code>colors</code> that contains three string elements.</p>"},{"location":"2-scripting/python/5-data-structures/#accessing-elements_1","title":"Accessing Elements","text":"<p>You can access individual elements of a tuple using their index, similar to lists.</p> <pre><code># Syntax\nelement = tuple_name[index]\n</code></pre> <pre><code># Example\ncolors = (\"red\", \"green\", \"blue\")\nprint(colors[0])  # Output: red\nprint(colors[-1])  # Output: blue\n</code></pre> <p>In the example above, we access the first and last elements of the <code>colors</code> tuple using their indices.</p>"},{"location":"2-scripting/python/5-data-structures/#modifying-elements_1","title":"Modifying Elements","text":"<p>Since tuples are immutable, you cannot modify the elements of a tuple after it has been created.</p> <pre><code># Example\ncolors = (\"red\", \"green\", \"blue\")\ncolors[1] = \"yellow\"  # TypeError: 'tuple' object does not support item assignment\n</code></pre> <p>In the example above, attempting to change the second element of the <code>colors</code> tuple results in a <code>TypeError</code>.</p>"},{"location":"2-scripting/python/5-data-structures/#dictionaries","title":"Dictionaries","text":"<p>A dictionary is a collection of key-value pairs. Each key is associated with a value, and you can use the key to access the corresponding value. Dictionaries are mutable and can contain elements of different types. Dictionaries are created using curly braces <code>{}</code> and key-value pairs are separated by commas.</p> <pre><code># Syntax\ndict_name = {key1: value1, key2: value2, ...}\n</code></pre> <pre><code># Example\nperson = {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}\n</code></pre> <p>In the example above, we define a dictionary called <code>person</code> that contains three key-value pairs.</p>"},{"location":"2-scripting/python/5-data-structures/#accessing-elements_2","title":"Accessing Elements","text":"<p>You can access the value associated with a key in a dictionary using the key.</p> <pre><code># Syntax\nvalue = dict_name[key]\n</code></pre> <pre><code># Example\nperson = {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}\nprint(person[\"name\"])  # Output: Alice\nprint(person[\"age\"])  # Output: 25\n</code></pre> <p>In the example above, we access the values associated with the \"name\" and \"age\" keys in the <code>person</code> dictionary.</p>"},{"location":"2-scripting/python/5-data-structures/#modifying-elements_2","title":"Modifying Elements","text":"<p>You can modify the value associated with a key in a dictionary by assigning a new value to it.</p> <pre><code># Syntax\ndict_name[key] = new_value\n</code></pre> <pre><code># Example\nperson = {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}\nperson[\"age\"] = 26\nprint(person)  # Output: {'name': 'Alice', 'age': 26, 'city': 'New York'}\n</code></pre> <p>In the example above, we change the value associated with the \"age\" key in the <code>person</code> dictionary from 25 to 26.</p>"},{"location":"2-scripting/python/5-data-structures/#adding-and-removing-elements_1","title":"Adding and Removing Elements","text":"<p>You can add new key-value pairs to a dictionary by assigning a value to a new key, and remove key-value pairs using the <code>pop</code> method.</p> <pre><code># Syntax\ndict_name[new_key] = new_value\ndict_name.pop(key)\n</code></pre> <pre><code># Example\nperson = {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}\n\n# Add a new key-value pair\nperson[\"email\"] = \"alice@example.com\"\nprint(person)  # Output: {'name': 'Alice', 'age': 25, 'city': 'New York', 'email': 'alice@example.com'}\n\n# Remove a key-value pair\nperson.pop(\"age\")\nprint(person)  # Output: {'name': 'Alice', 'city': 'New York', 'email': 'alice@example.com'}\n</code></pre> <p>In the example above, we add an \"email\" key-value pair to the <code>person</code> dictionary, and then remove the \"age\" key-value pair using the <code>pop</code> method.</p>"},{"location":"2-scripting/python/5-data-structures/#sets","title":"Sets","text":"<p>A set is an unordered collection of unique elements. Sets are mutable and can contain elements of different types. Sets are created using curly braces <code>{}</code> and elements are separated by commas.</p> <pre><code># Syntax\nset_name = {item1, item2, ...}\n</code></pre> <pre><code># Example\nfruits = {\"apple\", \"banana\", \"cherry\"}\n</code></pre> <p>In the example above, we define a set called <code>fruits</code> that contains three string elements.</p>"},{"location":"2-scripting/python/5-data-structures/#adding-and-removing-elements_2","title":"Adding and Removing Elements","text":"<p>You can add new elements to a set using the <code>add</code> method, and remove elements using the <code>remove</code> method.</p> <pre><code># Syntax\nset_name.add(new_item)\nset_name.remove(item)\n</code></pre> <pre><code># Example\nfruits = {\"apple\", \"banana\", \"cherry\"}\nfruits.add(\"orange\")\nprint(fruits)  # Output: {'apple', 'banana', 'cherry', 'orange'}\n\nfruits.remove(\"banana\")\nprint(fruits)  # Output: {'apple', 'cherry', 'orange'}\n</code></pre> <p>In the example above, we add \"orange\" to the <code>fruits</code> set using the <code>add</code> method, and remove \"banana\" from the set using the <code>remove</code> method.</p>"},{"location":"2-scripting/python/5-data-structures/#set-operations","title":"Set Operations","text":"<p>You can perform various set operations such as union, intersection, and difference using built-in methods.</p> <pre><code># Example\nset1 = {1, 2, 3}\nset2 = {3, 4, 5}\n\n# Union\nprint(set1 | set2)  # Output: {1, 2, 3, 4, 5}\n\n# Intersection\nprint(set1 &amp; set2)  # Output: {3}\n\n# Difference\nprint(set1 - set2)  # Output: {1, 2}\n</code></pre> <p>In the example above, we perform the union, intersection, and difference operations on two sets <code>set1</code> and <code>set2</code>.</p>"},{"location":"2-scripting/python/5-data-structures/#exercises","title":"Exercises","text":"<ol> <li>Write a program to count the frequency of elements in a list.</li> <li>Write a program to remove duplicates from a list.</li> <li>Write a program to find the intersection of two lists.</li> <li>Write a program to check if a set is a subset of another set.</li> <li>Write a program to perform the symmetric difference of two sets.</li> </ol>"},{"location":"2-scripting/python/6-modules/","title":"Modules and Packages","text":""},{"location":"2-scripting/python/6-modules/#modules","title":"Modules","text":"<p>In Python, a module is a file containing Python definitions and statements. The file name is the module name with the suffix <code>.py</code> appended. For example, a module named <code>example</code> would be in a file named <code>example.py</code>.</p> <p>You can use the <code>import</code> statement to import a module into your code. Once a module is imported, you can use its functions, classes, and variables in your program.</p> <pre><code># Syntax\nimport module_name\n</code></pre> <pre><code># Example\nimport math\nprint(math.pi)  # Output: 3.141592653589793\n</code></pre> <p>In the example above, we import the <code>math</code> module and use its <code>pi</code> variable to print the value of \u03c0.</p> <p>You can also import specific functions, classes, or variables from a module using the <code>from</code> keyword.</p> <pre><code># Syntax\nfrom module_name import name1, name2, ...\n</code></pre> <pre><code># Example\nfrom math import pi, sqrt\nprint(pi)   # Output: 3.141592653589793\nprint(sqrt(16))  # Output: 4.0\n</code></pre> <p>In the example above, we import the <code>pi</code> and <code>sqrt</code> functions from the <code>math</code> module and use them in our code.</p>"},{"location":"2-scripting/python/6-modules/#using-built-in-and-third-party-modules","title":"Using Built-in and Third-Party Modules","text":"<p>Python comes with a wide range of built-in modules that provide useful functions and classes for various tasks. Some of the most commonly used built-in modules include <code>math</code>, <code>random</code>, <code>datetime</code>, <code>os</code>, <code>sys</code>, and <code>json</code>.</p> <p>In addition to built-in modules, you can also use third-party modules created by other developers. These modules can be installed using the Python Package Index (PyPI) and the <code>pip</code> package manager.</p> <p>To install a third-party module, you can use the following command in your terminal or command prompt:</p> <pre><code>pip install module_name\n</code></pre> <p>Once installed, you can import and use the module in your code just like any other module.</p>"},{"location":"2-scripting/python/6-modules/#creating-your-own-modules-and-packages","title":"Creating Your Own Modules and Packages","text":"<p>You can create your own modules by writing Python code in a file and importing it into other programs. To create a module, simply save your code in a file with a <code>.py</code> extension and import it using the <code>import</code> statement.</p> <p>For example, if you have a file named <code>my_module.py</code> containing the following code:</p> <pre><code># my_module.py\ndef greet(name):\n    print(\"Hello, \" + name)\n</code></pre> <p>You can import the <code>greet</code> function from the <code>my_module</code> module and use it in your program.</p> <pre><code># main.py\nimport my_module\n\nmy_module.greet(\"Alice\")  # Output: Hello, Alice\n</code></pre> <p>You can also organize related modules into packages by creating a directory with an <code>__init__.py</code> file. This file can be empty, but it signals to Python that the directory should be treated as a package.</p> <p>For example, if you have a directory structure like this:</p> <pre><code>my_package/\n    __init__.py\n    module1.py\n    module2.py\n</code></pre> <p>You can import the modules from the package using dot notation.</p> <pre><code># main.py\nimport my_package.module1\nimport my_package.module2\n</code></pre> <p>In the example above, we import the <code>module1</code> and <code>module2</code> modules from the <code>my_package</code> package and use them in our program.</p>"},{"location":"2-scripting/python/7-file-io/","title":"File IO","text":""},{"location":"2-scripting/python/7-file-io/#reading-files","title":"Reading Files","text":"<p>Python has a built-in function called <code>open()</code> that allows you to open and read files. The <code>open()</code> function takes two arguments: the name of the file and the mode in which you want to open the file. The mode can be <code>r</code> for reading, <code>w</code> for writing, or <code>a</code> for appending.</p> <pre><code># Syntax\nfile = open(\"filename\", \"mode\")\n</code></pre> <pre><code># Example\nfile = open(\"example.txt\", \"r\")\n</code></pre> <p>In the example above, we open a file called <code>example.txt</code> in read mode.</p>"},{"location":"2-scripting/python/7-file-io/#reading-the-entire-file","title":"Reading the Entire File","text":"<p>You can read the entire contents of a file using the <code>read()</code> method.</p> <pre><code># Syntax\nfile.read()\n</code></pre> <pre><code># Example\nfile = open(\"example.txt\", \"r\")\ncontent = file.read()\nprint(content)\n</code></pre> <p>In the example above, we read the entire contents of the file <code>example.txt</code> and store it in a variable called <code>content</code>. We then print the contents of the file to the console.</p>"},{"location":"2-scripting/python/7-file-io/#reading-line-by-line","title":"Reading Line by Line","text":"<p>You can also read the contents of a file line by line using the <code>readline()</code> method.</p> <pre><code># Syntax\nfile.readline()\n</code></pre> <pre><code># Example\nfile = open(\"example.txt\", \"r\")\nline1 = file.readline()\nline2 = file.readline()\nprint(line1)\nprint(line2)\n</code></pre> <p>In the example above, we read the first two lines of the file <code>example.txt</code> and store them in variables called <code>line1</code> and <code>line2</code>. We then print the contents of the variables to the console.</p>"},{"location":"2-scripting/python/7-file-io/#closing-files","title":"Closing Files","text":"<p>After you have finished working with a file, you should close it using the <code>close()</code> method.</p> <pre><code># Syntax\nfile.close()\n</code></pre> <pre><code># Example\nfile = open(\"example.txt\", \"r\")\ncontent = file.read()\nfile.close()\n</code></pre> <p>In the example above, we open the file <code>example.txt</code>, read its contents, and then close the file.</p> <p>Alternatively, you can use the <code>with</code> statement to open and close files automatically.</p> <pre><code># Example\nwith open(\"example.txt\", \"r\") as file:\n    content = file.read()\n</code></pre> <p>In the example above, the file is automatically closed when the <code>with</code> block is exited.</p>"},{"location":"2-scripting/python/7-file-io/#writing-to-files","title":"Writing to Files","text":"<p>You can write to files using the <code>write()</code> method.</p> <pre><code># Syntax\nfile.write(\"text\")\n</code></pre> <pre><code># Example\nwith open(\"example.txt\", \"w\") as file:\n    file.write(\"Hello, world!\")\n</code></pre> <p>In the example above, we open the file <code>example.txt</code> in write mode and write the text \"Hello, world!\" to the file.</p>"},{"location":"2-scripting/python/7-file-io/#appending-to-files","title":"Appending to Files","text":"<p>You can append to files using the <code>write()</code> method with the <code>a</code> mode.</p> <pre><code># Example\nwith open(\"example.txt\", \"a\") as file:\n    file.write(\"Hello, again!\")\n</code></pre> <p>In the example above, we open the file <code>example.txt</code> in append mode and write the text \"Hello, again!\" to the file.</p>"},{"location":"2-scripting/python/7-file-io/#working-with-csv-files","title":"Working with CSV Files","text":"<p>Python has a built-in module called <code>csv</code> that allows you to read and write CSV files.</p> <pre><code># Example\nimport csv\n\nwith open(\"example.csv\", \"r\") as file:\n    reader = csv.reader(file)\n    for row in reader:\n        print(row)\n</code></pre> <p>In the example above, we use the <code>csv</code> module to read the contents of a CSV file called <code>example.csv</code> and print each row to the console.</p> <p>You can also write to CSV files using the <code>csv.writer</code> class.</p> <pre><code># Example\nimport csv\n\nwith open(\"example.csv\", \"w\") as file:\n    writer = csv.writer(file)\n    writer.writerow\n    writer.writerow([\"Name\", \"Age\"])\n    writer.writerow([\"Alice\", 25])\n    writer.writerow([\"Bob\", 30])\n</code></pre> <p>In the example above, we use the <code>csv.writer</code> class to write data to a CSV file called <code>example.csv</code>. We first write the column headers, and then write the data for each row.</p>"},{"location":"2-scripting/python/7-file-io/#other-file-formats","title":"Other File Formats","text":"<p>Python has built-in support for working with other file formats such as JSON, XML, and more. You can use third-party libraries to work with these file formats as well.</p> <pre><code># Example\nimport json\n\ndata = {\n    \"name\": \"Alice\",\n    \"age\": 25\n}\n\nwith open(\"example.json\", \"w\") as file:\n    json.dump(data, file)\n</code></pre> <p>In the example above, we use the <code>json</code> module to write a Python dictionary to a JSON file called <code>example.json</code>.</p>"},{"location":"2-scripting/python/8-exception-handling/","title":"Exception Handling","text":"<p>In Python, exceptions are used to handle errors and other exceptional events. When an error occurs, Python raises an exception, which can be caught and handled by the programmer. This allows you to write code that gracefully handles errors and prevents the program from crashing.</p>"},{"location":"2-scripting/python/8-exception-handling/#try-except-blocks","title":"Try-Except Blocks","text":"<p>You can use the <code>try</code> and <code>except</code> keywords to catch and handle exceptions in Python. The <code>try</code> block contains the code that may raise an exception, and the <code>except</code> block contains the code to handle the exception.</p> <pre><code># Syntax\ntry:\n    # code that may raise an exception\nexcept ExceptionType:\n    # code to handle the exception\n</code></pre> <pre><code># Example\ntry:\n    x = 10 / 0\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero\")\n</code></pre> <p>In the example above, we attempt to divide 10 by 0, which raises a <code>ZeroDivisionError</code> exception. We catch the exception using the <code>except</code> block and print an error message to the console.</p> <p>You can also catch multiple exceptions using a single <code>except</code> block.</p> <pre><code># Example\ntry:\n    x = 10 / 0\nexcept (ZeroDivisionError, ValueError):\n    print(\"Error: Division by zero or invalid value\")\n</code></pre> <p>In the example above, we catch both <code>ZeroDivisionError</code> and <code>ValueError</code> exceptions using a single <code>except</code> block.</p>"},{"location":"2-scripting/python/8-exception-handling/#finally-block","title":"Finally Block","text":"<p>You can use the <code>finally</code> block to execute code that should always run, regardless of whether an exception is raised or not. This is useful for releasing resources or cleaning up after an operation.</p> <pre><code># Syntax\ntry:\n    # code that may raise an exception\nexcept ExceptionType:\n    # code to handle the exception\nfinally:\n    # code that always runs\n</code></pre> <pre><code># Example\ntry:\n    file = open(\"example.txt\", \"r\")\n    content = file.read()\nexcept FileNotFoundError:\n    print(\"Error: File not found\")\nfinally:\n    file.close()\n</code></pre> <p>In the example above, we attempt to open and read the contents of a file. If the file is not found, a <code>FileNotFoundError</code> exception is raised, and we print an error message to the console. The <code>finally</code> block ensures that the file is closed, regardless of whether an exception is raised or not.</p>"},{"location":"2-scripting/python/8-exception-handling/#raising-exceptions","title":"Raising Exceptions","text":"<p>You can raise exceptions using the <code>raise</code> keyword. This allows you to signal that an error has occurred and provide information about the error.</p> <pre><code># Syntax\nraise ExceptionType(\"error message\")\n</code></pre> <pre><code># Example\ndef divide(x, y):\n    if y == 0:\n        raise ZeroDivisionError(\"Division by zero\")\n    return x / y\n\ntry:\n    result = divide(10, 0)\nexcept ZeroDivisionError as e:\n    print(\"Error:\", e)\n</code></pre> <p>In the example above, we define a function called <code>divide</code> that raises a <code>ZeroDivisionError</code> exception if the second argument is 0. We then call the function and catch the exception using the <code>except</code> block.</p>"},{"location":"2-scripting/python/8-exception-handling/#custom-exceptions","title":"Custom Exceptions","text":"<p>You can create your own custom exceptions by defining a new class that inherits from the <code>Exception</code> class.</p> <pre><code># Example\nclass CustomError(Exception):\n    pass\n\ntry:\n    raise CustomError(\"An error occurred\")\nexcept CustomError as e:\n    print(\"Error:\", e)\n</code></pre> <p>In the example above, we define a new class called <code>CustomError</code> that inherits from the <code>Exception</code> class. We then raise an instance of the <code>CustomError</code> class and catch it using the <code>except</code> block.</p>"},{"location":"2-scripting/python/8-exception-handling/#common-exceptions-in-python","title":"Common Exceptions in Python","text":"<p>Python has a wide range of built-in exceptions that are raised for various error conditions. Some of the most commonly used exceptions include:</p> <ul> <li><code>ZeroDivisionError</code>: Raised when division or modulo by zero is encountered.</li> <li><code>ValueError</code>: Raised when a function receives an argument of the correct type but an inappropriate value.</li> <li><code>TypeError</code>: Raised when an operation or function is applied to an object of inappropriate type.</li> <li><code>FileNotFoundError</code>: Raised when a file or directory is requested but cannot be found.</li> <li><code>KeyError</code>: Raised when a dictionary key is not found.</li> <li><code>IndexError</code>: Raised when a sequence subscript is out of range.</li> <li><code>NameError</code>: Raised when a local or global name is not found.</li> <li><code>ImportError</code>: Raised when an import statement fails to find the module definition.</li> <li><code>SyntaxError</code>: Raised when the parser encounters a syntax error.</li> <li><code>IndentationError</code>: Raised when the indentation is incorrect.</li> <li><code>RuntimeError</code>: Raised when an error is detected that doesn't fall into any of the other categories.</li> </ul>"},{"location":"2-scripting/python/9-oops/","title":"Object Oriented Programming (OOP)","text":"<p>Object-oriented programming (OOP) is a programming paradigm that uses objects and classes to design and build applications. It is based on the concept of objects, which can contain data in the form of fields (attributes or properties), and code in the form of procedures (methods or functions).</p>"},{"location":"2-scripting/python/9-oops/#classes-and-objects","title":"Classes and Objects","text":"<p>A class is a blueprint for creating objects. It defines the properties and behaviors of the objects that will be created from it. An object is an instance of a class, and it can be used to access the properties and behaviors defined by the class.</p> <pre><code># Syntax\nclass ClassName:\n    # class body\n    # code block\n</code></pre> <pre><code># Example\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def greet(self):\n        print(f\"Hello, my name is {self.name} and I am {self.age} years old\")\n</code></pre> <p>In the example above, we define a class called <code>Person</code> with two attributes <code>name</code> and <code>age</code>, and a method <code>greet</code> that prints a greeting message using the values of the attributes.</p>"},{"location":"2-scripting/python/9-oops/#creating-objects","title":"Creating Objects","text":"<p>You can create objects from a class using the class name followed by parentheses. You can then access the attributes and methods of the object using the dot operator.</p> <pre><code># Syntax\nobject_name = ClassName(arguments)\n</code></pre> <pre><code># Example\nperson1 = Person(\"Alice\", 25)\nperson1.greet()  # Output: Hello, my name is Alice and I am 25 years old\n</code></pre> <p>In the example above, we create an object called <code>person1</code> from the <code>Person</code> class and call the <code>greet</code> method to print a greeting message.</p>"},{"location":"2-scripting/python/9-oops/#constructors-and-destructors","title":"Constructors and Destructors","text":"<p>A constructor is a special method that is called when an object is created. It is used to initialize the attributes of the object. In Python, the constructor method is called <code>__init__</code>.</p> <pre><code># Syntax\ndef __init__(self, parameters):\n    # constructor body\n    # code block\n</code></pre> <pre><code># Example\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n</code></pre> <p>In the example above, we define a constructor method that takes two parameters <code>name</code> and <code>age</code> and initializes the attributes of the object.</p> <p>A destructor is a special method that is called when an object is destroyed. It is used to perform cleanup operations before the object is removed from memory. In Python, the destructor method is called <code>__del__</code>.</p> <pre><code># Syntax\ndef __del__(self):\n    # destructor body\n    # code block\n</code></pre> <pre><code># Example\nclass Person:\n    def __del__(self):\n        print(\"Object destroyed\")\n</code></pre> <p>In the example above, we define a destructor method that prints a message when the object is destroyed.</p>"},{"location":"2-scripting/python/9-oops/#inheritance","title":"Inheritance","text":"<p>Inheritance is a mechanism that allows a class to inherit properties and behaviors from another class. The class that inherits from another class is called a subclass, and the class that is inherited from is called a superclass.</p> <pre><code># Syntax\nclass SubclassName(SuperclassName):\n    # class body\n    # code block\n</code></pre> <pre><code># Example\nclass Student(Person):\n    def __init__(self, name, age, grade):\n        super().__init__(name, age)\n        self.grade = grade\n\n    def study(self):\n        print(f\"{self.name} is studying\")\n</code></pre> <p>In the example above, we define a subclass called <code>Student</code> that inherits from the <code>Person</code> class. The <code>Student</code> class has an additional attribute <code>grade</code> and a method <code>study</code>.</p>"},{"location":"2-scripting/python/9-oops/#method-overriding","title":"Method Overriding","text":"<p>Method overriding is a mechanism that allows a subclass to provide a specific implementation of a method that is already defined in its superclass. This allows you to customize the behavior of the method for the subclass.</p> <pre><code># Example\nclass Student(Person):\n    def greet(self):\n        print(f\"Hello, my name is {self.name} and I am a student\")\n</code></pre> <p>In the example above, we define a subclass called <code>Student</code> that overrides the <code>greet</code> method of the <code>Person</code> class to provide a different greeting message.</p>"},{"location":"2-scripting/python/9-oops/#encapsulation","title":"Encapsulation","text":"<p>Encapsulation is a mechanism that restricts direct access to some of the object's components. It prevents the accidental modification of data and allows the object to control its state and maintain its integrity.</p> <p>In Python, encapsulation is achieved by using private attributes and methods, which are denoted by a leading double underscore <code>__</code>.</p> <pre><code># Example\nclass Person:\n    def __init__(self, name, age):\n        self.__name = name\n        self.__age = age\n\n    def get_name(self):\n        return self.__name\n\n    def set_name(self, name):\n        self.__name = name\n</code></pre> <p>In the example above, we define a class called <code>Person</code> with private attributes <code>__name</code> and <code>__age</code>, and methods <code>get_name</code> and <code>set_name</code> to access and modify the attributes.</p>"},{"location":"2-scripting/python/9-oops/#polymorphism","title":"Polymorphism","text":"<p>Polymorphism is a mechanism that allows objects of different classes to be treated as objects of a common superclass. This allows you to write code that can work with objects of different types and classes.</p> <pre><code># Example\nclass Dog:\n    def speak(self):\n        print(\"Woof!\")\n\nclass Cat:\n    def speak(self):\n        print(\"Meow!\")\n\ndef make_sound(animal):\n    animal.speak()\n\ndog = Dog()\ncat = Cat()\n\nmake_sound(dog)  # Output: Woof!\nmake_sound(cat)  # Output: Meow!\n</code></pre> <p>In the example above, we define two classes <code>Dog</code> and <code>Cat</code> with a method <code>speak</code>, and a function <code>make_sound</code> that takes an object of any class with a <code>speak</code> method and calls the method.</p>"},{"location":"2-scripting/python/9-oops/#abstract-classes-and-interfaces","title":"Abstract Classes and Interfaces","text":"<p>An abstract class is a class that cannot be instantiated and is used to define methods that must be implemented by its subclasses. An interface is a collection of abstract methods that define a contract for the behavior of a class.</p> <p>In Python, abstract classes and interfaces can be defined using the <code>abc</code> module.</p> <pre><code># Example\nfrom abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\n    @abstractmethod\n    def perimeter(self):\n        pass\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * self.radius ** 2\n\n    def perimeter(self):\n        return 2 * 3.14 * self.radius\n</code></pre> <p>In the example above, we define an abstract class <code>Shape</code> with abstract methods <code>area</code> and <code>perimeter</code>, and a subclass <code>Circle</code> that implements the methods.</p>"},{"location":"3-version-control/0-version-control/","title":"Version Control","text":""},{"location":"3-version-control/0-version-control/#what-is-version-control","title":"What is Version Control?","text":"<p>Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later. It allows you to revert files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more.</p>"},{"location":"3-version-control/0-version-control/#without-version-control","title":"Without Version Control","text":"<p>Imagine you're working on a project, and you've just made a significant change to the code. You're not sure if it's the right approach, but you want to experiment with it. You make a copy of the entire project folder and start making changes. After a few days, you realize that the new approach isn't working as expected. You want to revert to the previous version, but you've made so many changes that it's hard to keep track of everything. You're now stuck with a mess of files and folders, and you're not sure how to proceed.</p> <p>Similarly, if you're working with a team, you might run into conflicts when multiple people are working on the same file. You might accidentally overwrite someone else's changes, or someone else might overwrite yours. It's hard to keep track of who made what changes and when.</p> <p>This is where version control comes in. Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later. It allows you to revert files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more.</p>"},{"location":"3-version-control/0-version-control/#why-version-control","title":"Why Version Control?","text":"<p>Version control is important because it allows you to:</p> <ul> <li>Collaborate with others</li> <li>Keep track of changes</li> <li>Revert to previous versions</li> <li>Identify who, when, and why made the changes</li> <li>Experiment with new features without breaking the existing code</li> <li>Backup your code</li> <li>Share your code with others</li> <li>Work on multiple features at the same time</li> </ul>"},{"location":"3-version-control/0-version-control/#popular-version-control-systems","title":"Popular Version Control Systems","text":"<p>Some of the popular version control systems include:</p> <ul> <li>Git: A distributed version control system that is widely used for open-source and commercial software development. It is designed to handle everything from small to very large projects with speed and efficiency.</li> <li>Others: Other version control systems include Subversion, Mercurial, Bazaar, and Perforce.</li> </ul>"},{"location":"3-version-control/git/0-introduction/","title":"Introduction","text":"<p>Git is a distributed version control system that is widely used for tracking changes in source code during software development. It allows multiple developers to work on the same project simultaneously and provides features such as branching, merging, and remote repositories.</p> <p>Git thinks of its data more like a set of snapshots of a miniature filesystem. Every time you commit, or save the state of your project in Git, it basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot. To be efficient, if files have not changed, Git doesn\u2019t store the file again, just a link to the previous identical file it has already stored. Git thinks about its data more like a stream of snapshots.</p>"},{"location":"3-version-control/git/0-introduction/#why-git","title":"Why Git?","text":"<p>Here are some reasons why Git is widely used for version control:</p> <ul> <li> <p>Distributed: Git is a distributed version control system, meaning that every developer has a complete copy of the project history. This allows for faster operations and better collaboration.</p> </li> <li> <p>Version Control: Git tracks every change made to your project files, allowing you to revert to previous versions if needed. This is a lifesaver if you accidentally break something or want to compare different approaches.</p> </li> <li> <p>Collaboration:  Multiple developers can work on the same project simultaneously. Git efficiently merges changes from different people, preventing conflicts and ensuring a smooth development process.</p> </li> <li> <p>Branching:  Git's branching system lets you experiment with new features or bug fixes without affecting the main project code.  You can create isolated branches, work on them independently, and then merge them back into the main branch when ready.</p> </li> <li> <p>Offline Workflow:  Most Git operations work locally on your machine. This means you can make commits and track changes even without an internet connection. Once connected, you can push your local commits to a remote repository for sharing and collaboration.</p> </li> <li> <p>Security and Data Integrity: Git uses checksums to ensure data integrity. Every change is cryptographically recorded, making it nearly impossible to lose or corrupt information.</p> </li> <li> <p>Widely Adopted:  Git is the industry standard for version control, especially in software development.  Having Git skills is a valuable asset for programmers and anyone working on collaborative projects.</p> </li> </ul>"},{"location":"3-version-control/git/0-introduction/#stages-of-git","title":"Stages of Git","text":"<ul> <li>Working Directory: The working directory is the directory where you are currently working. It contains the actual files and folders of your project.</li> <li>Staging Area: The staging area is a file that stores information about what will go into your next commit. It's a simple file, maintained by Git, that stores the information about what you want to include in the next commit.</li> <li>Local Repository: The local repository is the .git directory that is created when you run <code>git init</code> on a new project. It contains all the changes and history of your project.</li> <li>Remote Repository: The remote repository is a repository that is hosted on a server. It can be accessed by multiple developers, allowing them to collaborate on a project. Remotes are typically used to share code, track changes, and synchronize work between team members.</li> </ul>"},{"location":"3-version-control/git/0-introduction/#flow","title":"Flow","text":"<ul> <li>To start with, you have a working directory that contains the actual files and folders of your project. This can be a new project or an existing one that you want to start tracking with Git. You can initialize a new Git repository in the current directory using the <code>git init</code> command or clone an existing repository using the <code>git clone</code> command.</li> <li>Additionally, you can checkout the code to a new or existing branch to work on a new feature or bug fix. This is done using the <code>git checkout</code> command.</li> <li>Once you make the changes you add the files and folders to the staging area. This is done using the <code>git add</code> command. The staging area is a file that stores information about what will go into your next commit.</li> <li>When you are ready to save the changes, you commit them to the local repository using the <code>git commit</code> command. This creates a snapshot of the changes and stores it in the local repository.</li> <li>To share your changes with others, you can push them to a remote repository using the <code>git push</code> command. This allows other developers to access your changes and collaborate on the project.</li> <li>Similarly, you can pull changes from a remote repository using the <code>git pull</code> command. This allows you to fetch and merge changes from the remote repository into your local repository.</li> </ul>"},{"location":"3-version-control/git/0-introduction/#popular-git-services","title":"Popular Git Services","text":"<p>Some of the popular Git services include:</p> <ul> <li> <p>GitHub: A web-based platform for version control and collaboration. It offers features such as bug tracking, task management, and wikis for every project.</p> </li> <li> <p>Bitbucket: A web-based version control repository hosting service owned by Atlassian, for source code and development projects that use either Mercurial or Git revision control systems.</p> </li> <li> <p>AWS CodeCommit: A fully-managed source control service that makes it easy for companies to host secure and highly scalable private Git repositories.</p> </li> <li> <p>Azure Repos: A set of version control tools that you can use to manage your code. It supports both centralized and distributed version control systems and is fully integrated with Azure DevOps.</p> </li> </ul>"},{"location":"3-version-control/git/1-getting-started/","title":"Getting Started","text":""},{"location":"3-version-control/git/1-getting-started/#installing-git","title":"Installing Git","text":"<p>Download and install Git on your system from Git.</p>"},{"location":"3-version-control/git/2-basics/","title":"Basics","text":""},{"location":"3-version-control/git/2-basics/#creating-a-repository","title":"Creating a Repository","text":"<p>To create a new Git repository, navigate to the project directory and run the following command:</p> <pre><code>git init\n</code></pre> <p>This command initializes a new Git repository in the current directory.</p>"},{"location":"3-version-control/git/2-basics/#cloning-a-repository","title":"Cloning a Repository","text":"<p>To clone an existing Git repository, use the following command:</p> <pre><code>git clone &lt;repository-url&gt;\n</code></pre> <p>Replace <code>&lt;repository-url&gt;</code> with the URL of the repository you want to clone.</p>"},{"location":"3-version-control/git/2-basics/#checking-the-status","title":"Checking the Status","text":"<p>To check the status of your repository, use the following command:</p> <pre><code>git status\n</code></pre> <p>This command shows you the current status of your repository, including any changes that need to be committed or staged.</p>"},{"location":"3-version-control/git/2-basics/#staging-changes","title":"Staging Changes","text":"<p>To stage changes for a commit, use the following command:</p> <pre><code>git add &lt;file-name&gt;\n</code></pre> <p>To stage all changes, use the following command:</p> <pre><code>git add .\n</code></pre>"},{"location":"3-version-control/git/2-basics/#unstaging-changes","title":"Unstaging Changes","text":"<p>To unstage changes, use the following command:</p> <pre><code>git restore --staged &lt;file&gt;\n</code></pre> <p>To unstage all changes, use the following command:</p> <pre><code>git reset HEAD .\n</code></pre>"},{"location":"3-version-control/git/2-basics/#discarding-changes","title":"Discarding Changes","text":"<p>To discard changes in your working directory, use the following command:</p> <pre><code>git restore &lt;file&gt;\n</code></pre>"},{"location":"3-version-control/git/2-basics/#viewing-changes","title":"Viewing Changes","text":"<p>To view the changes that have been staged, use the following command:</p> <pre><code>git diff --staged\n</code></pre> <p>To view the changes that have not been staged, use the following command:</p> <pre><code>git diff\n</code></pre>"},{"location":"3-version-control/git/2-basics/#committing-changes","title":"Committing Changes","text":"<p>To commit staged changes, use the following command:</p> <pre><code>git commit -m \"commit message\"\n</code></pre> <p>Replace <code>\"commit message\"</code> with a brief description of the changes you are committing.</p>"},{"location":"3-version-control/git/2-basics/#viewing-commit-history","title":"Viewing Commit History","text":"<p>To view the commit history, use the following command:</p> <pre><code>git log\n</code></pre> <p>To view a summarized version of the commit history, use the following command:</p> <pre><code>git log --oneline\n</code></pre>"},{"location":"3-version-control/git/2-basics/#ignoring-files","title":"Ignoring Files","text":"<p>To ignore files in your repository, create a file named <code>.gitignore</code> in the root directory of your project and add the names of the files or directories you want to ignore. For example:</p> <pre><code># Ignore .DS_Store files\n.DS_Store\n\n# Ignore log files\n*.log\n\n# Ignore node_modules directory\nnode_modules/\n</code></pre> <p>This file tells Git which files or directories to ignore when tracking changes.</p>"},{"location":"3-version-control/git/3-remotes/","title":"Working with Remotes","text":""},{"location":"3-version-control/git/3-remotes/#what-are-remotes","title":"What are Remotes?","text":"<p>In Git, a remote is a common repository that is hosted on a server. It can be accessed by multiple developers, allowing them to collaborate on a project. Remotes are typically used to share code, track changes, and synchronize work between team members.</p> <p>When you clone a repository, Git automatically creates a remote called <code>origin</code> that points to the original repository. This allows you to fetch, pull, and push changes to and from the remote repository.</p>"},{"location":"3-version-control/git/3-remotes/#adding-a-remote","title":"Adding a Remote","text":"<p>To add a remote to your local repository, use the following command:</p> <pre><code>git remote add &lt;name&gt; &lt;url&gt;\n</code></pre> <p>Replace <code>&lt;name&gt;</code> with a name for the remote (e.g., <code>origin</code>, <code>upstream</code>, <code>myfork</code>) and <code>&lt;url&gt;</code> with the URL of the remote repository.</p> <p>For example, to add a remote named <code>upstream</code> that points to a repository on GitHub, you would use the following command:</p> <pre><code>git remote add upstream\n</code></pre>"},{"location":"3-version-control/git/3-remotes/#pulling-from-remotes","title":"Pulling from Remotes","text":"<p>To pull changes from a remote repository, use the following command:</p> <pre><code>git pull &lt;remote&gt; &lt;branch&gt;\n</code></pre> <p>Replace <code>&lt;remote&gt;</code> with the name of the remote repository (e.g., <code>origin</code>, <code>upstream</code>) and <code>&lt;branch&gt;</code> with the name of the branch you want to pull from.</p> <p>For example, to pull changes from the <code>master</code> branch of the <code>origin</code> remote, you would use the following command:</p> <pre><code>git pull origin master\n</code></pre> <p>You can just use <code>git pull</code> to pull changes from the remote repository that your current branch is tracking.</p>"},{"location":"3-version-control/git/3-remotes/#pushing-to-remotes","title":"Pushing to Remotes","text":"<p>To push changes to a remote repository, use the following command:</p> <pre><code>git push &lt;remote&gt; &lt;branch&gt;\n</code></pre> <p>Replace <code>&lt;remote&gt;</code> with the name of the remote repository (e.g., <code>origin</code>, <code>upstream</code>) and <code>&lt;branch&gt;</code> with the name of the branch you want to push to.</p> <p>For example, to push changes to the <code>master</code> branch of the <code>origin</code> remote, you would use the following command:</p> <pre><code>git push origin master\n</code></pre> <p>You can just use <code>git push</code> to push changes to the remote repository that your current branch is tracking.</p>"},{"location":"3-version-control/git/4-branching/","title":"Branching","text":"<p>Branching is a powerful feature of Git that allows you to work on new features or bug fixes without affecting the main project code. It enables you to create isolated branches, work on them independently, and then merge them back into the main branch when ready.</p>"},{"location":"3-version-control/git/4-branching/#mainmaster-branch","title":"Main/Master Branch","text":"<p>The <code>main</code> or <code>master</code> branch is the default branch in Git. It typically represents the main project code and is the branch that is deployed to production.</p> <p>When working on new features or bug fixes, it's common practice to create separate branches from the <code>main</code> or <code>master</code> branch, work on them, and then merge them back into the <code>main</code> or <code>master</code> branch when ready.</p>"},{"location":"3-version-control/git/4-branching/#branching-commands","title":"Branching Commands","text":""},{"location":"3-version-control/git/4-branching/#listing-branches","title":"Listing Branches","text":"<p>To list all the branches in a repository, use the following command:</p> <pre><code>git branch\n</code></pre>"},{"location":"3-version-control/git/4-branching/#creating-a-branch","title":"Creating a Branch","text":"<p>To create a new branch, use the following command:</p> <pre><code>git branch &lt;branch-name&gt;\n</code></pre> <p>Replace <code>&lt;branch-name&gt;</code> with the name of the new branch.</p> <p>For example, to create a branch named <code>feature-1</code>, you would use the following command:</p> <pre><code>git branch feature-1\n</code></pre>"},{"location":"3-version-control/git/4-branching/#switching-branches","title":"Switching Branches","text":"<p>To switch to a different branch, use the following command:</p> <pre><code>git checkout &lt;branch-name&gt;\n</code></pre> <p>Replace <code>&lt;branch-name&gt;</code> with the name of the branch you want to switch to.</p> <p>For example, to switch to the <code>feature-1</code> branch, you would use the following command:</p> <pre><code>git checkout feature-1\n</code></pre>"},{"location":"3-version-control/git/4-branching/#creating-and-switching-branches","title":"Creating and Switching Branches","text":"<p>To create and switch to a new branch in one step, use the following command:</p> <pre><code>git checkout -b &lt;branch-name&gt;\n</code></pre> <p>Replace <code>&lt;branch-name&gt;</code> with the name of the new branch.</p> <p>For example, to create and switch to a branch named <code>feature-2</code>, you would use the following command:</p> <pre><code>git checkout -b feature-2\n</code></pre>"},{"location":"3-version-control/git/4-branching/#merging-branches","title":"Merging Branches","text":"<p>To merge changes from one branch into another, use the following command:</p> <pre><code>git merge &lt;branch-name&gt;\n</code></pre> <p>Replace <code>&lt;branch-name&gt;</code> with the name of the branch you want to merge into the current branch.</p> <p>For example, to merge changes from the <code>feature-1</code> branch into the <code>master</code> branch, you would use the following command:</p> <pre><code>git checkout master\ngit merge feature-1\n</code></pre>"},{"location":"3-version-control/git/4-branching/#branching-workflow","title":"Branching Workflow","text":"<p><code>HEAD</code> is a reference to the currently checked out commit or branch in Git. It is a pointer that points to the current branch or commit.</p> <p>To See the visualization of the git branching workflow, click here and follow below sequence of events.</p> <ul> <li> <p>Consider a repository with a <code>master</code> branch and one commit as the starting point of the project. <code>HEAD</code> points to the <code>master</code> branch.</p> </li> <li> <p>To work on a new feature, create a new branch <code>feature</code> from the <code>master</code> branch using the command <code>git branch feature</code>.</p> </li> <li> <p>Commits are made to the <code>feature</code> branch to implement the new feature as you progress with the development using the command <code>git commit -m \"message\"</code>.</p> </li> <li> <p>You found out that there is a bug in the <code>master</code> branch that needs to be fixed. In order not to mix the bug fix with the new feature, create a new branch <code>bug-fix</code> from the <code>master</code> branch.</p> </li> <li>Checkout the <code>master</code> branch using the command <code>git checkout master</code>.</li> <li> <p>Create a new branch <code>bug-fix</code> from the <code>master</code> branch and checkout using the command <code>git checkout -b bug-fix</code>.</p> </li> <li> <p>Commits are made to the <code>bug-fix</code> branch to fix the bug using the command <code>git commit -m \"message\"</code>.</p> </li> <li> <p>Once the bug is fixed, merge the <code>bug-fix</code> branch into the <code>master</code> branch.</p> </li> <li>Checkout the <code>master</code> branch using the command <code>git checkout master</code>.</li> <li> <p>Merge the <code>bug-fix</code> branch into the <code>master</code> branch using the command <code>git merge bug-fix</code>.</p> </li> <li> <p>At this stage if your feature changes are complete, to include the new feature in the <code>master</code> branch, merge the <code>feature</code> branch into the <code>master</code> branch</p> </li> <li>Checkout the <code>master</code> branch using the command <code>git checkout master</code>.</li> <li> <p>Merge the <code>feature</code> branch into the <code>master</code> branch using the command <code>git merge feature</code>.</p> </li> <li> <p>However, lets consider a case where you need to make more changes and also require bugfix changes in your feature branch to test the changes. In this case, merge the <code>master</code> branch into the <code>feature</code> branch.</p> </li> <li>Checkout the <code>feature</code> branch using the command <code>git checkout feature</code>.</li> <li> <p>Merge the <code>master</code> branch into the <code>feature</code> branch using the command <code>git merge master</code>. This will include the bug fix changes in the <code>feature</code> branch.</p> </li> <li> <p>Make further changes to the <code>feature</code> branch and commit the changes using the command <code>git commit -m \"message\"</code>.</p> </li> <li> <p>Once the feature is complete, merge the <code>feature</code> branch into the <code>master</code> branch.</p> </li> <li>Checkout the <code>master</code> branch using the command <code>git checkout master</code>.</li> <li> <p>Merge the <code>feature</code> branch into the <code>master</code> branch using the command <code>git merge feature</code>.</p> </li> <li> <p>Finally, delete the <code>feature</code> branch using the command <code>git branch -d feature</code>.</p> </li> <li> <p>The <code>master</code> branch now contains the new feature and the bug fix changes.</p> </li> </ul> <p>This is a basic branching workflow in Git. It allows you to work on new features and bug fixes independently, and then merge them back into the main branch when ready.</p>"},{"location":"3-version-control/git/9-appendix/","title":"GIT Commands","text":""},{"location":"3-version-control/git/9-appendix/#basic-commands","title":"Basic Commands","text":"Command Description <code>git init</code> Initializes a new Git repository in the current directory <code>git clone &lt;repository-url&gt;</code> Clones an existing Git repository. <code>git status</code> Shows the current status of the repository. <code>git add &lt;file-name&gt;</code> Stages changes for a commit. <code>git add .</code> Stages all changes for a commit. <code>git restore --staged &lt;file&gt;</code> Unstages changes. <code>git reset HEAD .</code> Unstages all changes. <code>git restore &lt;file&gt;</code> Discards changes in the working directory. <code>git diff --staged</code> Shows the changes that have been staged. <code>git diff</code> Shows the changes that have not been staged. <code>git commit -m \"message\"</code> Commits staged changes with a message. <code>git log</code> Shows the commit history. <code>git log --oneline</code> Shows a summarized version of the commit history."},{"location":"3-version-control/git/9-appendix/#remote-commands","title":"Remote Commands","text":"Command Description <code>git remote</code> Lists the remotes for the current repository. <code>git remote add &lt;name&gt; &lt;url&gt;</code> Adds a new remote to the current repository. <code>git pull &lt;remote&gt; &lt;branch&gt;</code> Pulls changes from a remote repository. <code>git push &lt;remote&gt; &lt;branch&gt;</code> Pushes changes to a remote repository."},{"location":"3-version-control/git/9-appendix/#branching-commands","title":"Branching Commands","text":"Command Description <code>git branch</code> Lists all the branches in the repository. <code>git branch &lt;branch-name&gt;</code> Creates a new branch. <code>git checkout &lt;branch-name&gt;</code> Switches to a different branch. <code>git checkout -b &lt;branch-name&gt;</code> Creates and switches to a new branch. <code>git merge &lt;branch-name&gt;</code> Merges changes from one branch into another."},{"location":"4-cloud-basics/AWS/1-introduction/","title":"Introcution to AWS","text":""},{"location":"7-iaas/ansible/0-index/","title":"0 index","text":"<pre><code># Index\n\n## Introduction to Ansible\n- What is Ansible?\n- Why use Ansible?\n- Ansible architecture\n\n## Ansible Installation\n- Installing Ansible on Linux\n- Installing Ansible on Windows\n- Verifying Ansible installation\n\n## Ansible Inventory\n- Understanding Ansible inventory\n- Creating inventory files\n- Specifying hosts and groups\n- Variables in inventory\n\n## Ansible Playbooks\n- Introduction to Ansible playbooks\n- Writing your first playbook\n- Tasks and modules\n- Variables and facts\n- Conditionals and loops\n\n## Ansible Roles\n- What are Ansible roles?\n- Creating and organizing roles\n- Role structure and main tasks\n- Role variables and defaults\n\n## Ansible Modules\n- Common Ansible modules\n- Using modules in playbooks\n- Custom modules\n\n## Ansible Vault\n- Introduction to Ansible Vault\n- Encrypting sensitive data\n- Decrypting and using vaulted data\n\n## Ansible Best Practices\n- Structuring Ansible projects\n- Using roles and playbooks effectively\n- Error handling and debugging\n- Security considerations\n\n## Ansible Tips and Tricks\n- Useful Ansible commands\n- Working with Ansible collections\n- Integrating Ansible with other tools\n- Troubleshooting common issues\n\n## Conclusion\n- Recap of key concepts\n- Next steps in learning Ansible\n</code></pre>"},{"location":"7-iaas/ansible/1-introduction/","title":"Introduction","text":""},{"location":"7-iaas/ansible/1-introduction/#what-is-ansible","title":"What is Ansible?","text":"<p>Open-source automation tool for IT tasks: configuration management, application deployment, and orchestration. Simplifies complex tasks and streamlines IT operations.</p>"},{"location":"7-iaas/ansible/1-introduction/#why-use-ansible","title":"Why Use Ansible?","text":"<ul> <li>Simplicity: Uses YAML for playbook definitions, making it readable and easy to learn.</li> <li>Agentless: Operates over SSH or PowerShell, no agents to install on target systems.</li> <li>Flexibility: Manages both Unix-like and Windows systems.</li> <li>Idempotency: Ensures repeatable deployments and configurations without side effects.</li> </ul>"},{"location":"7-iaas/ansible/1-introduction/#ansible-architecture","title":"Ansible Architecture:","text":"<ul> <li>Control Node : The machine where Ansible is installed and runs playbooks.</li> <li>Managed Nodes : Targets of Ansible automation (servers, devices).</li> <li>Inventory: : Defines groups of managed nodes.</li> <li>Modules: Units of code Ansible executes. Playbooks call modules.</li> <li>Playbooks: YAML files that define automation jobs. Dictate how to perform tasks.</li> <li>Roles: Organize playbooks for reusable content.</li> <li>Tasks: Individual actions performed by playbooks.</li> <li>Facts: Information retrieved from managed nodes for use in playbooks.</li> <li>Handlers: Special tasks executed at the end of playbooks if notified by another task.</li> </ul>"},{"location":"7-iaas/ansible/1-introduction/#documentation-for-full-clarity","title":"Documentation for Full Clarity:","text":"<p>For comprehensive details, refer to the official Ansible Documentation</p>"},{"location":"7-iaas/ansible/10-cheatsheet/","title":"10 cheatsheet","text":"<p>Certainly! Here's the Ansible cheat sheet in Markdown format:</p> <pre><code>\n# Ansible Cheat Sheet\n\n## Basic Concepts\n\n- **Playbook**: YAML files for defining what Ansible does. A playbook maps a group of hosts to some roles.\n\n- **Role**: A predefined way for organizing playbooks and other files in order to facilitate sharing and reusing portions of provisioning.\n\n- **Inventory**: A file that lists all your hosts, typically organized into groups. Ansible uses this to determine which servers to affect with given commands.\n\n- **Module**: A piece of software that Ansible pushes out to manage nodes.\n\n## Key Commands\n\n- **ansible**: Runs a single task on a set of hosts\n\n\u00a0 ```shell\n\n\u00a0 ansible [pattern] -m [module] -a \"[module options]\"\n\n\u00a0 ```\n\n- **ansible-playbook**: Runs Ansible playbooks\n\n\u00a0 ```shell\n\n\u00a0 ansible-playbook [playbook file]\n\n\u00a0 ```\n\n- **ansible-galaxy**: Downloads roles from an Ansible Galaxy and manages them\n\n\u00a0 ```shell\n\n\u00a0 ansible-galaxy install [role]\n\n\u00a0 ```\n\n- **ansible-vault**: Encrypts Ansible data files\n\n\u00a0 ```shell\n\n\u00a0 ansible-vault [create|edit|view|decrypt] [file]\n\n\u00a0 ```\n\n## Basic Playbook Structure\n\n```yaml\n\n---\n\n- name: Example Ansible Playbook\n\n\u00a0 hosts: webservers\n\n\u00a0 vars:\n\n\u00a0 \u00a0 http_port: 80\n\n\u00a0 \u00a0 max_clients: 200\n\n\u00a0 tasks:\n\n\u00a0 \u00a0 - name: ensure apache is at the latest version\n\n\u00a0 \u00a0 \u00a0 ansible.builtin.yum:\n\n\u00a0 \u00a0 \u00a0 \u00a0 name: httpd\n\n\u00a0 \u00a0 \u00a0 \u00a0 state: latest\n\n\u00a0 \u00a0 - name: write the apache config file\n\n\u00a0 \u00a0 \u00a0 template:\n\n\u00a0 \u00a0 \u00a0 \u00a0 src: /srv/httpd.j2\n\n\u00a0 \u00a0 \u00a0 \u00a0 dest: /etc/httpd.conf\n\n\u00a0 handlers:\n\n\u00a0 \u00a0 - name: restart apache\n\n\u00a0 \u00a0 \u00a0 ansible.builtin.service:\n\n\u00a0 \u00a0 \u00a0 \u00a0 name: httpd\n\n\u00a0 \u00a0 \u00a0 \u00a0 state: restarted\n\n</code></pre>"},{"location":"7-iaas/ansible/10-cheatsheet/#important-directives","title":"Important Directives","text":"<ul> <li> <p><code>hosts</code>: Specifies which hosts to run the given tasks on.</p> </li> <li> <p><code>vars</code>: Defines variables for use in the playbook.</p> </li> <li> <p><code>tasks</code>: Lists the tasks to be executed.</p> </li> <li> <p><code>handlers</code>: Special tasks that run at the end of a playbook if notified by another task.</p> </li> </ul>"},{"location":"7-iaas/ansible/10-cheatsheet/#inventory-example","title":"Inventory Example","text":"<pre><code>\n[webservers]\n\nweb1.example.com\n\nweb2.example.com\n\n[dbservers]\n\ndb1.example.com\n\ndb2.example.com\n\n</code></pre>"},{"location":"7-iaas/ansible/10-cheatsheet/#tips","title":"Tips","text":"<ul> <li> <p>Use roles for organizing complex playbooks.</p> </li> <li> <p>Encrypt sensitive data using <code>ansible-vault</code>.</p> </li> <li> <p>Keep your inventory file updated and well-organized.</p> </li> <li> <p>Test your playbooks with <code>--check</code> before running them.</p> </li> </ul> <p>```</p> <p>Feel free to save this cheat sheet for quick reference as you work with Ansible!</p>"},{"location":"7-iaas/ansible/2-installation/","title":"Installation","text":""},{"location":"7-iaas/ansible/2-installation/#macos","title":"macOS","text":"<ol> <li>Using Homebrew<ul> <li>Open a terminal.</li> <li>Install Homebrew by running <code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"</code></li> <li>Update Homebrew with <code>brew update</code></li> <li>Install Ansible with <code>brew install ansible</code></li> </ul> </li> </ol>"},{"location":"7-iaas/ansible/2-installation/#windows","title":"Windows","text":"<ol> <li>Using Windows Subsystem for Linux (WSL)<ul> <li>Ensure WSL is enabled on your Windows system. You might need to install it through the Windows Features panel or with PowerShell.</li> <li>Install your preferred Linux distribution via the Microsoft Store (e.g., Ubuntu).</li> <li>Launch your Linux distribution from the Start Menu.</li> <li>Update the package manager with <code>sudo apt update</code> (for Debian/Ubuntu distributions).</li> <li>Install Ansible with <code>sudo apt install ansible</code> (for Debian/Ubuntu distributions).`</li> </ul> </li> </ol>"},{"location":"7-iaas/ansible/2-installation/#linux","title":"Linux","text":"<ol> <li>Debian/Ubuntu<ul> <li>Open a terminal.</li> <li>Update the package manager with <code>sudo apt update</code></li> <li>Install Ansible with <code>sudo apt install ansible</code></li> </ul> </li> <li>Red Hat/CentOS     `- Open a terminal.<ul> <li>Install EPEL repository with <code>sudo yum install epel-release</code></li> <li>Update the package manager with <code>sudo yum update</code></li> <li>Install Ansible with <code>sudo yum install ansible</code></li> </ul> </li> <li>Fedora<ul> <li>Open a terminal.</li> <li>Install Ansible directly with <code>sudo dnf install ansible</code></li> </ul> </li> </ol>"},{"location":"7-iaas/ansible/3-inventory/","title":"Inventory","text":""},{"location":"7-iaas/ansible/3-inventory/#what-is-inventory","title":"What is Inventory ?","text":"<p>Ansible Inventory: Ansible's inventory is like a phone book for your network, where you sort servers into groups for easy management, similar to how you might organize contacts by family or work. You can also give specific settings to groups or servers, just like assigning ringtones to contacts.</p> <p>There are two types of inventories in Ansible:</p> <ol> <li>Static Inventory: A manually created and maintained list of servers.</li> <li>Dynamic Inventory: Automatically updates and fetches server lists from external sources like cloud providers.</li> </ol> <p>The main difference is that static inventory is fixed until you change it, while dynamic inventory updates automatically based on the current state of your servers in the cloud or other environments.</p>"},{"location":"7-iaas/ansible/3-inventory/#how-to-create-an-inventory","title":"How to create an Inventory ?","text":"<p>Static Inventory File:</p> <p>Create an inventory file named <code>hosts.ini</code>:</p> <pre>hosts.ini<code>\n[webservers]\nweb1.example.com\nweb2.example.com\n\n[dbservers]\ndb1.example.com\n</code></pre> <p>Dynamic Inventory File: Please refer projects folder for this example.</p>"},{"location":"7-iaas/ansible/3-inventory/#why-to-create-an-inventory","title":"Why to create an Inventory ?","text":"<p>For instance, to verify the uptime of all your web servers grouped in your Ansible inventory, you can utilize the following ad-hoc command:</p> <pre><code>\nansible webservers -i hosts.ini -m command -a \"uptime\"\n</code></pre> <p>In this command:</p> <ul> <li><code>webservers</code> is the group name specified in your <code>hosts.ini</code> inventory file, representing all your web server nodes.</li> <li><code>uptime</code> is the command executed on each server within the <code>webservers</code> group to check how long the servers have been running.</li> </ul>"},{"location":"7-iaas/ansible/3-inventory/#assignments","title":"Assignments","text":"<p>Assignment 1: Create an Inventory File</p> <ul> <li>Create an inventory file that includes at least two groups: <code>app_servers</code> and <code>db_servers</code>.</li> <li>Add at least two hosts to each group.</li> <li>Assign a variable <code>ansible_user</code> to each group, with <code>app_servers</code> using <code>appadmin</code> and <code>db_servers</code> using <code>dbadmin</code>.</li> </ul> <p>Assignment 2: Execute a Ping Module</p> <ul> <li>Using the inventory file created, write an Ansible ad-hoc command to ping all hosts in the <code>app_servers</code> group.</li> </ul>"},{"location":"7-iaas/ansible/3-inventory/#interview-questions","title":"Interview Questions","text":"<ol> <li>What is an Ansible inventory, and why is it important?<ul> <li>An inventory file defines the hosts and groups of hosts upon which commands, modules, and tasks in a playbook operate. It is crucial for organizing managed nodes and defining where Ansible should perform its automation tasks.</li> </ul> </li> <li>How can you group hosts in an Ansible inventory file, and what are the advantages of grouping?<ul> <li>Hosts can be grouped under a named group in an inventory file for easier management, parallel execution across the group, and the ability to assign group-specific variables. This organization enhances readability and efficiency in playbook execution.</li> </ul> </li> <li>Explain the difference between static and dynamic inventory in Ansible.<ul> <li>A static inventory is defined in a file (like INI or YAML format) and does not change unless manually updated. A dynamic inventory pulls host information dynamically from external sources, such as cloud providers, making it suitable for environments where host configurations frequently change.</li> </ul> </li> <li>How can you specify a different SSH port for a host in the inventory file?<ul> <li>You can specify a different SSH port for a host by defining it in the inventory file next to the host's address, using the syntax <code>hostname ansible_port=your_port_number</code>.</li> </ul> </li> </ol>"},{"location":"7-iaas/ansible/4-playbooks/","title":"Playbooks","text":""},{"location":"7-iaas/ansible/4-playbooks/#what-is-playbook","title":"What is Playbook ?","text":"<p>Ansible Playbooks are like recipe books for setting up computer systems. They list servers (like ingredients) and tasks (like cooking steps) to set up certain IT settings, kind of like making a dish. They're written in YAML, which is simple and easy to read, almost like plain English.</p>"},{"location":"7-iaas/ansible/4-playbooks/#why-playbook","title":"Why Playbook ?","text":"<p>Ansible playbooks are like your computer's to-do list, automating multiple tasks in one go. Rather than doing tasks one by one, you list them in a playbook, and Ansible handles them all, saving time and reducing errors by ensuring consistency.</p>"},{"location":"7-iaas/ansible/4-playbooks/#how-to-use-it","title":"How to use it ?","text":"<p>This playbook is a set of instructions to install an Apache web server on a group of computers called web_servers. It does three main things: - Installs Apache using something called the yum module. - Makes sure Apache starts now and whenever the computer restarts. - Copies an index.html file to the place on the server where web pages are stored.</p> <pre>playbooks/setup_web_server.yml<code>\n# This is the beginning of an Ansible playbook. Playbooks are files where we tell Ansible what to do.\n\n- name: Setup Apache Web Server  # This is the name of our task list. It helps us remember what this playbook does.\n  hosts: web_servers             # This tells Ansible to run the tasks on machines that are labeled as \"web_servers\".\n  become: yes                    # This means that Ansible will use superuser (admin) permissions to run tasks.\n\n  tasks:                         # Here we start listing the tasks we want to do on the web_servers.\n\n  - name: Install Apache         # This is the first task. Its name helps us remember it's for installing Apache.\n    yum:                         # This tells Ansible to use the yum package manager, common in certain Linux distributions.\n      name: httpd                # This is the name of the package we want to install: httpd (Apache).\n      state: present             # This tells Ansible we want the httpd package to be installed (present on the system).\n\n  - name: Start Apache           # This is the second task. We're starting Apache and making sure it runs automatically.\n    service:                     # This tells Ansible to use the service management system.\n      name: httpd                # This specifies which service we're talking about: httpd (Apache).\n      state: started             # This makes sure the Apache service is running.\n      enabled: yes               # This makes sure Apache will start automatically whenever the server restarts.\n\n  - name: Deploy Homepage        # This is the third task. We're putting a custom homepage onto the web server.\n    copy:                        # This tells Ansible to copy a file from one place to another.\n      src: /src/index.html       # This is the source file we want to copy. It's the custom homepage.\n      dest: /var/www/html/index.html # This is where we want to copy the file to, the default directory for Apache web pages.\n\n</code></pre>"},{"location":"7-iaas/ansible/4-playbooks/#commands","title":"Commands","text":"<ul> <li>Run: <code>ansible-playbook playbook.yml</code><ul> <li>Inventory: <code>-i inventory_file</code> (Choose which computers to run the tasks on)</li> <li>Limit hosts: <code>--limit \"host1\"</code> (Pick a specific computer from your list)</li> <li>Tags: <code>--tags \"tag1\"</code> (Run only parts of your tasks marked with this tag)</li> <li>Skip tags: <code>--skip-tags \"tagname\"</code> (Ignore tasks marked with this tag)</li> <li>Syntax check: <code>--syntax-check</code> (Check if your list of tasks has any mistakes)</li> <li>Dry run: <code>--check</code> (Test your tasks without making real changes)</li> <li>Extra vars: <code>-e \"var=value\"</code> (Add extra details or changes just for this run)</li> <li>Verbose: <code>-vvv</code> (Get more detailed information while tasks are running)</li> <li>Parallel: <code>-f 10</code> (Run tasks on up to 10 computers at the same time)</li> </ul> </li> </ul>"},{"location":"7-iaas/ansible/4-playbooks/#assignments","title":"Assignments","text":"<ol> <li> <p>Create a Playbook to Install and Configure a MySQL Database:</p> <ul> <li>Ensure MySQL is installed.</li> <li>Configure MySQL to start on boot.</li> <li>Set a root password (use Ansible Vault for securing the password).</li> <li>Create a database and a user with privileges to that database.</li> </ul> </li> <li> <p>Write a Playbook for User Management:</p> <ul> <li>Create a user with sudo privileges.</li> <li>Set a password for the user (again, use Ansible Vault).</li> <li>Copy an SSH key to the user's <code>.ssh/authorized_keys</code> from a file.</li> </ul> </li> <li> <p>Develop a Playbook to Configure a Firewall:</p> <ul> <li>Install <code>firewalld</code>.</li> <li>Ensure it starts on boot.</li> <li>Open port 80 (HTTP) and 443 (HTTPS).</li> <li>Ensure all other incoming connections are denied by default.</li> </ul> </li> </ol>"},{"location":"7-iaas/ansible/4-playbooks/#interview-questions","title":"Interview Questions","text":"<ol> <li> <p>What is an Ansible playbook and how is it used?</p> <ul> <li>A playbook is an Ansible file where you write automation tasks in YAML format. Playbooks can perform a variety of tasks such as configuring server software, deploying applications, and more.</li> </ul> </li> <li> <p>How do you secure sensitive data like passwords in Ansible playbooks?</p> <ul> <li>Ansible Vault is used to encrypt sensitive data within Ansible playbooks. It allows you to keep sensitive data such as passwords or keys in encrypted files, rather than as plaintext in playbooks or roles.</li> </ul> </li> <li> <p>Explain the difference between the <code>ansible</code> command and the <code>ansible-playbook</code> command.</p> <ul> <li>The <code>ansible</code> command is used for running single tasks, while <code>ansible-playbook</code> is used for running Ansible playbooks that can contain multiple tasks and provide more complex automation sequences.</li> </ul> </li> <li> <p>What is idempotence in the context of Ansible, and why is it important?</p> <ul> <li>Idempotence refers to the property of certain operations in Ansible to produce the same outcome regardless of how many times they're executed. This is important for reliability and efficiency, ensuring that scripts can be run multiple times without causing unexpected side effects.</li> </ul> </li> </ol>"},{"location":"7-iaas/ansible/5-roles/","title":"Roles","text":""},{"location":"7-iaas/ansible/5-roles/#what-is-roles","title":"What is Roles ?","text":"<p>Imagine you're a cook in a big restaurant. When you make a dish, you follow many steps like picking ingredients, preparing them, cooking, and serving. If you had to figure out these steps anew each time, it would be slow and easy to mess up.</p> <p>That's where \"recipes\" come in. A recipe tells you what ingredients you need and what steps to follow to make a dish right every time. In Ansible, \"roles\" are like recipes. They gather everything you need (like variables, files, templates) and what you have to do (like tasks, handlers) to set up a server or start an app. You can share and use these roles again, just like recipes, to make sure your computer tasks are done well and without mistakes, saving time and effort.</p>"},{"location":"7-iaas/ansible/5-roles/#why-roles","title":"Why Roles ?","text":"<ul> <li>Efficiency: Reuse roles to save time setting up environments.</li> <li>Consistency: Roles ensure tasks are done the same way, reducing mistakes.</li> <li>Simplicity: Break complex playbooks into easier, smaller parts.</li> <li>Shareability: Share roles with others for better collaboration.</li> <li>Scalability: Apply standardized configurations to many servers easily.</li> </ul>"},{"location":"7-iaas/ansible/5-roles/#how-to-create-roles","title":"How to create Roles ?","text":""},{"location":"7-iaas/ansible/5-roles/#1-create-the-role-structure","title":"1) Create the Role Structure","text":"<p>First, generate the structure for your role with the <code>ansible-galaxy</code> <code>ansible-galaxy init nginx_server</code> This creates a directory structure under <code>nginx_server</code> with folders like <code>tasks</code>, <code>handlers</code>, <code>templates</code>, <code>files</code>, <code>vars</code>, <code>defaults</code>, <code>meta</code>, and <code>tests</code>.</p>"},{"location":"7-iaas/ansible/5-roles/#2-define-the-role-structure","title":"2) Define the Role Structure","text":"<p>In the <code>nginx_server/tasks/main.yml</code> file, you define the tasks that the role will perform:</p> <pre><code>- name: Install nginx\n# This task is named \"Install nginx\" for clarity in playbook output and logs.\n\n  apt:                 # Utilizes the apt module, which is used for managing packages with APT (used by Debian-based systems).\n\u00a0 \u00a0 name: nginx        # Specifies the package to be installed, in this case, nginx.\n\u00a0 \u00a0 state: present     # Ensures the package is installed; 'present' means it will install nginx if it's not already installed.\n\u00a0 \u00a0 update_cache: yes  # Updates the package cache on the target machine before installing, similar to running 'apt-get update'.\n\u00a0 \u00a0 become: yes        # Elevates privileges to become the root user, necessary for installing packages.\n\n- name: Start nginx\n# This task is named \"Start nginx\" and ensures the nginx service is running.\n\n\u00a0 service:             # Utilizes the service module to manage the service state.\n\u00a0 \u00a0 name: nginx        # Specifies the service to manage, here it is nginx.\n\u00a0 \u00a0 state: started     # Ensures the service is running; 'started' means the service will be started if it isn't already.\n\u00a0 \u00a0 enabled: yes       # Ensures the service is enabled to start at boot.\n\u00a0 \u00a0 become: yes        # Elevates privileges to become the root user, necessary for managing services..\n\n</code></pre>"},{"location":"7-iaas/ansible/5-roles/#3-using-your-role-in-a-playbook","title":"3) Using Your Role in a Playbook","text":"<p>Create a playbook named deploy_nginx.yml that uses your role:</p> <pre><code># This section targets a group of hosts named \"web_servers\"\n\n- hosts: web_servers\n  become: true          # Elevates privileges to become the root user for all tasks in this playbook.\n  roles:\n    - nginx_server       # Applies the role named \"nginx_server\" to all hosts in the \"web_servers\" group.\n\n</code></pre> <p>This setup quickly establishes a reusable, modular approach to deploying nginx across your servers.</p>"},{"location":"7-iaas/ansible/5-roles/#commands","title":"Commands","text":"<ol> <li> <p>Creating a New Role: (Initializes a new role with a standard directory structure)</p> <ul> <li><code>ansible-galaxy init role_name</code></li> </ul> </li> <li> <p>Listing Installed Roles:</p> <ul> <li><code>ansible-galaxy list</code></li> </ul> </li> <li>Installing Roles from Ansible Galaxy:<ul> <li><code>ansible-galaxy install username.role_name</code></li> </ul> </li> <li>Removing Installed Roles:<ul> <li><code>ansible-galaxy remove username.role_name</code></li> </ul> </li> <li> <p>Specifying Role Dependencies:</p> <ul> <li>Inside your role, in <code>meta/main.yml</code>, list dependencies: <code><pre> \n    dependencies:\n        - { role: another_role }\n</pre> This ensures <code>another_role</code> is executed before the current role. <li> <p>Overriding Role Defaults:</p> <ul> <li>In your playbook or <code>vars/main.yml</code> of your role, specify variables to override defaults: <code><pre> \nvars:\n    variable_name: value\n</pre> <li>Running a Playbook with Roles:<ul> <li><code>ansible-playbook playbook.yml</code></li> </ul> </li>"},{"location":"7-iaas/ansible/5-roles/#interview-questions","title":"Interview Questions","text":"<ol> <li> <p>What is an Ansible role and how does it differ from a playbook?</p> <p>An Ansible role is a reusable, standalone block that can be included in Ansible playbooks to automate complex tasks. It differs from a playbook in that a playbook is a list of instructions to execute on remote machines, while a role is a structured way to organize these instructions (including tasks, files, templates, and variables) into a reusable format.</p> </li> <li> <p>How do you include a role in an Ansible playbook?</p> <p>You include a role in an Ansible playbook using the <code>roles:</code> directive. You can specify the role directly under this directive, and Ansible will execute the tasks defined in the role's <code>tasks/main.yml</code> file.</p> </li> <li> <p>Can you explain variable precedence in Ansible roles?</p> <p>Variable precedence in Ansible determines which variable value will be used when duplicate variable names are defined in multiple places. In the context of roles, variables defined in playbooks have a higher precedence than those defined in roles. Within roles, variables in <code>vars/main.yml</code> have a higher precedence than those in <code>defaults/main.yml</code>, allowing default values to be overridden easily.</p> </li> <li> <p>How do you manage dependencies between roles in Ansible?</p> <p>You manage dependencies between roles in Ansible by defining them in the <code>meta/main.yml</code> file of your role. Inside this file, you list the roles that must be applied before the current role using the <code>dependencies:</code> section. Ansible resolves these dependencies and applies the roles in the specified order.</p> </li> </ol>"},{"location":"7-iaas/ansible/8-best-practices/","title":"Best Practices","text":""},{"location":"7-iaas/ansible/8-best-practices/#project-structure","title":"Project Structure","text":"<pre><code>\nansible-project/\n\n\u251c\u2500\u2500 inventories/\n\n\u2502\u00a0 \u00a0\u251c\u2500\u2500 production/\n\n\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u251c\u2500\u2500 hosts\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Production servers inventory\n\n\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u2514\u2500\u2500 group_vars/\n\n\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0 \u00a0 \u00a0\u2514\u2500\u2500 all.yml\u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Variables for all prod servers\n\n\u2502\u00a0 \u00a0\u2514\u2500\u2500 staging/\n\n\u2502\u00a0 \u00a0 \u00a0 \u00a0\u251c\u2500\u2500 hosts\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Staging servers inventory\n\n\u2502\u00a0 \u00a0 \u00a0 \u00a0\u2514\u2500\u2500 group_vars/\n\n\u2502\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u2514\u2500\u2500 all.yml\u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Variables for all staging servers\n\n\u251c\u2500\u2500 roles/\n\n\u2502\u00a0 \u00a0\u251c\u2500\u2500 webserver/\n\n\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u251c\u2500\u2500 tasks/\n\n\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u2514\u2500\u2500 main.yml\u00a0 \u00a0 \u00a0 \u00a0 # Tasks for setting up the web server\n\n\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u251c\u2500\u2500 handlers/\n\n\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u2514\u2500\u2500 main.yml\u00a0 \u00a0 \u00a0 \u00a0 # Handlers for restarting services\n\n\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u251c\u2500\u2500 templates/\n\n\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u2514\u2500\u2500 httpd.conf.j2\u00a0 \u00a0# Apache config templates\n\n\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u2514\u2500\u2500 vars/\n\n\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0 \u00a0 \u00a0\u2514\u2500\u2500 main.yml\u00a0 \u00a0 \u00a0 \u00a0 # Variables specific to the webserver role\n\n\u2502\u00a0 \u00a0\u2514\u2500\u2500 firewall/\n\n\u2502\u00a0 \u00a0 \u00a0 \u00a0\u2514\u2500\u2500 ...\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Similar structure for firewall setup\n\n\u2514\u2500\u2500 playbooks/\n\n\u00a0 \u00a0 \u2514\u2500\u2500 setup_web_server.yml\u00a0 \u00a0 # Main playbook that applies roles"}]}