{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Course Contents","text":"<p>In this course, you will learn the fundamentals of DevOps. You will learn how to use DevOps tools and practices to improve your software development and delivery process.</p> <p>Below are the topics that will be covered in this course:</p> Introduction <ul> <li> SDLC Basics</li> <li> What is DevOps?</li> <li> Why DevOps?</li> </ul> OS &amp; Networking <ul> <li> OS (Linux)</li> <li> Networking</li> <li> Bash</li> </ul> Scripting <ul> <li> Python</li> </ul> Version Control <ul> <li> GIT</li> <li> Github</li> </ul> Cloud <ul> <li> AWS Well-Architected Framework</li> <li> Identity &amp; Access Management<ul> <li> AWS IAM</li> </ul> </li> <li> Data Storage<ul> <li> AWS S3</li> <li> AWS RDS</li> <li> AWS Dynamo DB</li> </ul> </li> <li> Networking<ul> <li> AWS VPC</li> <li> AWS Direct Connect</li> <li> AWS CloudFront</li> <li> AWS Route 53</li> <li> AWS ELB</li> </ul> </li> <li> Compute<ul> <li> AWS EC2</li> <li> AWS Lambda </li> </ul> </li> </ul> Continuous Integration &amp; Deployment <ul> <li> Github Workflow</li> <li> Github Actions</li> <li> CI CD Pipeline</li> <li> Git Best Practices</li> <li> Pipeline Security</li> </ul> Containerisation and Orchestration <ul> <li> <p> Docker</p> <ul> <li> Architecture</li> <li> Networking</li> <li> Storage</li> <li> Security</li> <li> CI/CD Integration</li> </ul> </li> <li> <p> Kubernetes</p> <ul> <li> Architecture</li> <li> Networking</li> <li> Storage</li> <li> Security</li> <li> CI/CD Integration</li> </ul> </li> </ul> Infrastructure as a Code <ul> <li> Terraform</li> <li> Ansible</li> </ul> Monitoring <ul> <li> CloudWatch (Primary)</li> <li> Prometheus</li> <li> Grafana</li> </ul>"},{"location":"0-introduction/SDLC-basics/","title":"SDLC Basics","text":""},{"location":"1-networking/0-net-index/","title":"Index","text":""},{"location":"1-networking/0-net-index/#introduction-to-networking","title":"Introduction to Networking","text":"<ul> <li>What is Networking?</li> <li>Importance of Networking</li> <li>Basic Networking Concepts</li> </ul>"},{"location":"1-networking/0-net-index/#osi-model","title":"OSI Model","text":"<ul> <li>Overview of OSI Model</li> <li>Functions of Each Layer</li> </ul>"},{"location":"1-networking/0-net-index/#protocols","title":"Protocols","text":"<ul> <li>Introduction to Protocols</li> <li>TCP/IP Model</li> <li>TCP</li> <li>UDP</li> <li>IP</li> </ul>"},{"location":"1-networking/0-net-index/#ports-and-ip-addressing","title":"Ports and IP Addressing","text":"<ul> <li>Understanding Ports</li> <li>IP Addressing Basics</li> <li>IPv4 vs IPv6</li> </ul>"},{"location":"1-networking/0-net-index/#subnetting","title":"Subnetting","text":"<ul> <li>Basics of Subnetting</li> <li>Subnetting Techniques</li> <li>CIDR Notation</li> </ul>"},{"location":"1-networking/0-net-index/#dns","title":"DNS","text":"<ul> <li>How DNS Works</li> <li>Configuring DNS Servers</li> <li>DNS Query Process</li> </ul>"},{"location":"1-networking/0-net-index/#network-topologies","title":"Network Topologies","text":"<ul> <li>Common Network Topologies</li> <li>Pros and Cons of Each Topology</li> </ul>"},{"location":"1-networking/0-net-index/#dhcp-dynamic-host-configuration-protocol","title":"DHCP (Dynamic Host Configuration Protocol)","text":"<ul> <li>How DHCP Works</li> <li>Configuring DHCP Servers and Clients</li> </ul>"},{"location":"1-networking/0-net-index/#nat-network-address-translation","title":"NAT (Network Address Translation)","text":"<ul> <li>NAT Basics</li> <li>Types of NAT</li> <li>Configuring NAT</li> </ul>"},{"location":"1-networking/1-net-introduction/","title":"Introduction","text":""},{"location":"1-networking/1-net-introduction/#what","title":"What?","text":"<ul> <li>Networking is like the postal system for computers, allowing them to send and receive data (letters) across a network (country/world).</li> </ul>"},{"location":"1-networking/1-net-introduction/#why","title":"Why?","text":"<ul> <li>Allows computers to talk to each other.</li> </ul>"},{"location":"1-networking/1-net-introduction/#real-world-example-simplified-web-app","title":"Real World Example (Simplified Web App)","text":"<p>Imagine you've created a simple web application, like a blog site where users can read and post articles. Here's how networking plays a crucial role in making this app accessible to users:</p> <ul> <li>Server Hosting: Your web application lives on a server, which is just a computer optimized to respond to web requests. This server has an IP address, making it identifiable on the internet.</li> <li>Domain Name: Instead of remembering the server's IP address, users type in a friendly domain name (e.g., \"myawesomeblog.com\") to access your site. DNS (Domain Name System) translates this domain into the server's IP address.</li> <li>Data Exchange: When a user wants to post a comment on your blog, their computer sends data across the internet to your server. The server processes this data (e.g., saves the comment to a database) and sends back a confirmation.</li> <li>Content Delivery: When someone visits your blog, their browser requests the webpage from your server. The server sends the necessary files (HTML, CSS, JavaScript) back across the internet to the user's browser, which then renders the page for them to read and interact with.</li> <li>Security: To protect user data, your web application uses HTTPS, a protocol that encrypts data sent between the user's browser and your server. This is like sending a letter in a locked, tamper-evident envelope instead of a postcard.</li> </ul> <p>This example illustrates how networking enables the basic functionality of a web application, allowing users to access content and interact with it from anywhere in the world.</p>"},{"location":"1-networking/10-net-nat/","title":"NAT","text":""},{"location":"1-networking/10-net-nat/#what","title":"What ?","text":"<ul> <li>NAT is like a receptionist in a building who translates incoming calls (packets) from the outside world to the correct internal extension (private IP address) and vice versa.</li> <li>It allows multiple devices in a private network to share a single public IP address, hiding internal IP addresses from external networks.</li> </ul>"},{"location":"1-networking/10-net-nat/#why","title":"WHY ?","text":"<ul> <li>NAT conserves IPv4 addresses by allowing multiple devices in a private network to share a single public IP. </li> <li>It enhances security by masking internal IP addresses from external networks. </li> <li>NAT enables devices in private networks to access the internet while maintaining network privacy.</li> </ul>"},{"location":"1-networking/10-net-nat/#types-of-nat","title":"Types of NAT:","text":"<ol> <li>Static NAT:</li> <li>Maps a private IP address to a fixed public IP address.</li> <li>Provides one-to-one mapping between private and public IP addresses.</li> <li>Dynamic NAT:</li> <li>Maps multiple private IP addresses to a pool of public IP addresses.</li> <li>Assigns public IP addresses dynamically as needed, allowing devices to share public IP addresses.</li> <li>PAT (Port Address Translation):</li> <li>Also known as NAT Overload or NAT with Port Address Translation.</li> <li>Maps multiple private IP addresses to a single public IP address using different port numbers.</li> <li>Enables many devices to share a single public IP address by using unique port numbers for each connection.</li> </ol>"},{"location":"1-networking/10-net-nat/#how","title":"How ?:","text":"<ul> <li>Configure NAT on a router or firewall device that connects the private network to the public network.</li> <li>Define NAT translation rules specifying how private IP addresses should be mapped to public IP addresses.</li> <li>Choose the appropriate NAT type (static, dynamic, or PAT) based on network requirements and available IP address resources.</li> <li>Test and verify NAT functionality to ensure proper translation of IP addresses and connectivity between internal and external networks.</li> </ul>"},{"location":"1-networking/10-net-nat/#interview-questions","title":"Interview Questions:","text":"<ol> <li>What is NAT, and why is it used in networking?</li> <li>Explain the difference between static NAT, dynamic NAT, and PAT.</li> <li>How does NAT help conserve IPv4 address space?</li> <li>What are the benefits and drawbacks of using NAT in network design?</li> <li>Describe the process of configuring NAT on a router or firewall device.</li> <li>How are NAT gateways used in cloud environments like AWS for outbound internet access?</li> <li>What are the security implications of using NAT in network architectures?</li> </ol>"},{"location":"1-networking/2-net-osi-layer/","title":"OSI Layer","text":""},{"location":"1-networking/2-net-osi-layer/#what","title":"What?","text":"<ul> <li>The OSI Model is like a factory assembly line for data communication, divided into 7 stages (layers). Each layer has a specific role, ensuring the product (data) is built correctly from start (creation) to finish (delivery).</li> </ul>"},{"location":"1-networking/2-net-osi-layer/#why","title":"Why?","text":"<ul> <li>Standardizes network communication for different technologies.</li> <li>Simplifies troubleshooting by segmenting the network into manageable layers.</li> <li>Promotes interoperability and compatibility among various network products.</li> <li>Facilitates modular engineering, allowing changes in one layer without affecting others.</li> </ul>"},{"location":"1-networking/2-net-osi-layer/#architecture","title":"Architecture","text":"<p>Source : BybyteGo</p>"},{"location":"1-networking/2-net-osi-layer/#real-world-example-simple-web-application","title":"Real-World Example: Simple Web Application","text":"<p>Imagine you've built a simple blog where users can create accounts, post articles, and comment. The web application is accessible from any web browser.</p>"},{"location":"1-networking/2-net-osi-layer/#osi-model-layers-in-action","title":"OSI Model Layers in Action:","text":"<p>A protocol is a set of rules that govern how data is transmitted and received over a network.</p> <ol> <li> <p>What It Does: Handles the physical connection between devices, like cables and Wi-Fi signals.</p> </li> <li>Protocols: Ethernet (for wired connections), Wi-Fi (for wireless connections).</li> </ol>"},{"location":"1-networking/2-net-osi-layer/#physical-layer-layer-1","title":"Physical Layer (Layer 1)","text":""},{"location":"1-networking/2-net-osi-layer/#data-link-layer-layer-2","title":"Data Link Layer (Layer 2)","text":"<ul> <li>What It Does: Makes sure data packets go to the right device within a local network using hardware addresses.</li> <li>Protocols: Ethernet (for addressing with MAC addresses),                 PPP (Point-to-Point Protocol).</li> </ul>"},{"location":"1-networking/2-net-osi-layer/#network-layer-layer-3","title":"Network Layer (Layer 3)","text":"<ul> <li>What It Does: Routes data across the internet, finding the best path for it to travel from source to destination.</li> <li>Protocols: IP (Internet Protocol, for routing),                 ICMP (Internet Control Message Protocol, for error reporting).</li> </ul>"},{"location":"1-networking/2-net-osi-layer/#transport-layer-layer-4","title":"Transport Layer (Layer 4)","text":"<ul> <li>What It Does: Breaks down data into packets for sending and then puts them back together at the destination. It checks if all data arrives correctly.</li> <li>Protocols: TCP (Transmission Control Protocol, ensures data is received in order and intact),                 UDP (User Datagram Protocol, for faster transmission without error checking).</li> </ul>"},{"location":"1-networking/2-net-osi-layer/#session-layer-layer-5","title":"Session Layer (Layer 5)","text":"<ul> <li>What It Does: Manages the start, keep-alive, and end of data exchanges or 'sessions' between two points.</li> <li>Protocols: NetBIOS (Network Basic Input/Output System),                 RPC (Remote Procedure Call).</li> </ul>"},{"location":"1-networking/2-net-osi-layer/#presentation-layer-layer-6","title":"Presentation Layer (Layer 6)","text":"<ul> <li>What It Does: Translates data between the application and the network. Converts data formats and encrypts/decrypts data.</li> <li>Protocols: SSL/TLS (Secure Sockets Layer/Transport Layer Security, for encryption),                JPEG, GIF (for image formats).</li> </ul>"},{"location":"1-networking/2-net-osi-layer/#application-layer-layer-7","title":"Application Layer (Layer 7)","text":"<ul> <li>What It Does: The layer you interact with directly. It's what you see and use, like websites or email.</li> <li>Protocols: HTTP/HTTPS (HyperText Transfer Protocol/Secure, for web browsing),                 FTP (File Transfer Protocol, for file downloads and uploads),                 SMTP (Simple Mail Transfer Protocol, for sending emails).</li> </ul>"},{"location":"1-networking/2-net-osi-layer/#user-interaction-flow","title":"User Interaction Flow:","text":"<ul> <li>A user wants to read an article on your blog, so they type your blog's URL into their web browser.</li> <li>Their computer sends a request across the internet to find your server where the blog is hosted.</li> <li>The request travels down through the layers on the user's side, out into the network, and then up through the layers on the server side.</li> <li>Your server processes the request (application layer), prepares the data (presentation layer), maintains the session (session layer), ensures correct delivery (transport layer), finds the route (network layer), sends it over the physical network (data link layer), and finally, through the cables or Wi-Fi to the user's device (physical layer).</li> <li>The user's browser receives the data, interprets it, and displays the blog article for them to read.</li> </ul>"},{"location":"1-networking/3-net-protocols/","title":"Network Protocols (Set of Rules)","text":""},{"location":"1-networking/3-net-protocols/#what","title":"What?","text":"<ul> <li>Networking protocols are like the rules of a game that ensure all participants play correctly and understand each other, crucial for the smooth operation of internet communications and web applications.</li> </ul>"},{"location":"1-networking/3-net-protocols/#why","title":"Why?","text":"<ul> <li>Standardization: Makes sure different devices and software can communicate.</li> <li>Efficiency: Optimizes the use of network resources.</li> <li>Security: Protects data from unauthorized access and tampering.</li> <li>Reliability: Ensures data is accurately and consistently delivered.</li> <li>Scalability: Facilitates network growth and management.</li> </ul>"},{"location":"1-networking/3-net-protocols/#how","title":"How?","text":""},{"location":"1-networking/3-net-protocols/#osi-layer-7-application-layer","title":"OSI Layer 7: Application Layer","text":"<ul> <li> <p>HTTP/HTTPS (HyperText Transfer Protocol/Secure)</p> <ul> <li>What? : HTTP is for web data transfer, HTTPS adds encryption.</li> <li>Why? : Browsing websites, accessing web services securely.</li> <li>How? : <code>curl https://www.google.com</code> for HTTPS interaction.</li> </ul> </li> <li> <p>DNS (Domain Name System)</p> <ul> <li>What?: Translates domain names to IP addresses.</li> <li>Usage: Resolving domain names to access websites.</li> <li>How to check? : <code>nslookup www.google.com</code> for DNS resolution.</li> </ul> </li> <li> <p>FTP (File Transfer Protocol)</p> <ul> <li>How?: Transfers files between client and server.</li> <li>Why?: Uploading/downloading files to/from servers.</li> <li>How to check? : <code>ftp www.google.com</code> for FTP access.</li> </ul> </li> </ul>"},{"location":"1-networking/3-net-protocols/#osi-layer-6-presentation-layer","title":"OSI Layer 6: Presentation Layer","text":"<ul> <li>SSL/TLS (Secure Sockets Layer/Transport Layer Security)<ul> <li>How?: Provides encryption, data integrity, and authentication for secure communication.</li> <li>Why?: Ensures secure transmission of sensitive data over the internet.</li> <li>How to check?: Use <code>openssl s_client -connect www.google.com:443</code> to inspect SSL/TLS connection.</li> </ul> </li> </ul>"},{"location":"1-networking/3-net-protocols/#osi-layer-5-session-layer","title":"OSI Layer 5: Session Layer","text":"<ul> <li>There is no Obvious Protcol here , Operating System maintains this layer.</li> <li>Session Establishment:<ul> <li>How?: Handled by application layer protocols or the operating system's networking stack.</li> <li>Why?: Initiates communication sessions between applications.</li> </ul> </li> <li>Data Synchronization:<ul> <li>How?: Managed within application layer protocols (e.g., TCP) or the OS networking stack through sequencing and flow control.</li> <li>Why?: Ensures orderly and reliable data transmission.</li> </ul> </li> <li>Session Management:<ul> <li>How?: Application logic or the OS manages session timeouts, reconnections, and state.</li> <li>Why?: Maintains session integrity and continuity.</li> </ul> </li> <li>Session Termination:<ul> <li>How?: Initiated by applications or the OS by closing connections and releasing resources.</li> <li>Why?: Ends communication sessions when no longer needed.</li> </ul> </li> </ul>"},{"location":"1-networking/3-net-protocols/#osi-layer-4-transport-layer","title":"OSI Layer 4: Transport Layer","text":"<ul> <li> <p>TCP (Transmission Control Protocol)</p> <ul> <li>How? : Ensures reliable, ordered delivery of data.</li> <li>Why? : Transmission of web data.</li> <li>How to check? : <code>netstat | grep tcp</code> (t in atn - for TCP connectivity check).</li> </ul> </li> <li> <p>UDP (User Datagram Protocol)</p> <ul> <li>How?: Provides faster but less reliable data transmission.</li> <li>Why? : Real-time applications like streaming.</li> <li>How to check? : <code>netstat | grep udp</code> (u in aun - for UDP connectivity check).</li> </ul> </li> </ul>"},{"location":"1-networking/3-net-protocols/#osi-layer-3-network-layer","title":"OSI Layer 3: Network Layer","text":"<ul> <li> <p>IP (Internet Protocol)</p> <ul> <li>How?: Routes packets across networks.</li> <li>Why?: Identifying and addressing devices.</li> <li>How to check? : <code>traceroute www.google.com</code> for packet path analysis.</li> </ul> </li> <li> <p>ICMP (Internet Control Message Protocol)</p> <ul> <li>How?: Handles network error messages.</li> <li>Why? : Network troubleshooting.</li> <li>How to check? : <code>ping www.google.com</code> for reachability check.</li> </ul> </li> </ul>"},{"location":"1-networking/3-net-protocols/#osi-layer-2-data-link-layer","title":"OSI Layer 2: Data Link Layer","text":"<ul> <li>DHCP (Dynamic Host Configuration Protocol)<ul> <li>How? : Dynamically assigns IP addresses to devices.</li> <li>Why? : Simplifies network setup and management.</li> <li>How to check? : No direct commands.</li> </ul> </li> </ul>"},{"location":"1-networking/3-net-protocols/#osi-layer-1-physical-layer","title":"OSI Layer 1: Physical Layer","text":"<ul> <li>Ethernet<ul> <li>What? : Physical connection standard.</li> <li>Why? : Wired network connections.</li> <li>How to check? : No direct commands.</li> </ul> </li> </ul>"},{"location":"1-networking/4-net-ports-ipaddress/","title":"Ports and IP Address","text":""},{"location":"1-networking/4-net-ports-ipaddress/#what","title":"What?","text":"<ul> <li>Ports: Ports are like different doors in a big building. Each door leads to a different room where different services or activities happen.</li> <li>IP Address: An IP address is like a home address for your computer or device on the internet. It helps data find its way to the right place, just like a home address helps mail reach the right house.</li> </ul> <pre><code>IP Address + PORT number = Socket Address\n</code></pre>"},{"location":"1-networking/4-net-ports-ipaddress/#why","title":"Why?","text":"<ul> <li>Ports: They allow multiple services to operate on the same device without getting mixed up.</li> <li>IP Address: It ensures that data reaches the correct device on the internet.</li> </ul>"},{"location":"1-networking/4-net-ports-ipaddress/#how","title":"How?","text":""},{"location":"1-networking/4-net-ports-ipaddress/#ports","title":"Ports:","text":"<p>Each service or program running on a device listens to a specific port number for incoming data. When data arrives at the device, it's directed to the appropriate port, just like a letter is directed to the right room through a specific door.</p> Port Number Service Protocol Description 21 FTP TCP File Transfer Protocol (FTP) 22 SSH TCP Secure Shell (SSH) for secure remote access 23 Telnet TCP Telnet protocol for remote login 25 SMTP TCP Simple Mail Transfer Protocol (SMTP) for email transfer 53 DNS TCP/UDP Domain Name System (DNS) for translating domain names 80 HTTP TCP Hypertext Transfer Protocol (HTTP) for web browsing 110 POP3 TCP Post Office Protocol version 3 (POP3) for email access 143 IMAP TCP Internet Message Access Protocol (IMAP) for email access 443 HTTPS TCP HTTP Secure (HTTPS) for secure web browsing 3306 MySQL TCP MySQL Database server 3389 RDP TCP Remote Desktop Protocol (RDP) for remote access"},{"location":"1-networking/4-net-ports-ipaddress/#ip-address","title":"IP Address:","text":"<ul> <li>Devices are assigned unique IP addresses, similar to how houses have unique addresses. When data is sent over the internet, it's labeled with the destination IP address so that routers know where to send it.</li> <li> <p>IP has mainly two versions </p> <ul> <li>IPv4:<ul> <li>Major Use: Legacy protocol.</li> <li>Address Format: 32-bit decimal (e.g., 192.168.1.1).</li> <li>Address Space: Limited (4.3 billion addresses).</li> <li>Challenges: Address exhaustion.</li> </ul> </li> <li>IPv6:<ul> <li>Major Use: Next-generation protocol.</li> <li>Address Format: 128-bit hexadecimal (e.g., 2001:0db8:85a3:0000:0000:8a2e:0370:7334).</li> <li>Address Space: Vast (practically limitless).</li> <li>Features: Improved security and support for more devices.</li> </ul> </li> </ul> </li> <li> <p>IP addresses are divided into five classes: A, B, C, D, and E (D &amp; E can be ignored tho)</p> <ul> <li> <p>Class A:</p> <ul> <li>In real networking terms, Class A addresses are like a large country with many states but only a few major cities. We divide it this way because we need a lot of addresses in each state, even though there aren't many states.</li> <li>Major Use: Public networks, mainly by large organizations or internet service providers (ISPs).</li> <li>Default Subnet Mask: 255.0.0.0</li> <li>Range: 1.0.0.0 to 126.0.0.0</li> <li>Example: ISPs assigning IP addresses to their customers.</li> </ul> </li> <li> <p>Class B:</p> <ul> <li>Class B addresses are comparable to a big state with several counties but fewer cities in each county. We divide it like this because we want each county to have its own set of addresses, even if there aren't many counties.</li> <li>Major Use: Both public and private networks, commonly by medium-sized organizations or educational institutions.</li> <li>Default Subnet Mask: 255.255.0.0</li> <li>Range: 128.0.0.0 to 191.255.0.0</li> <li>Example: Companies setting up their own internal networks.</li> </ul> </li> <li> <p>Class C:</p> <ul> <li>Class C addresses resemble a small town with only a few streets and houses on each street. We divide it this way because we want each street to have its own addresses, even if there aren't many streets.</li> <li>Major Use: Private networks, often by small businesses or home networks.</li> <li>Default Subnet Mask: 255.255.255.0</li> <li>Range: 192.0.0.0 to 223.255.255.0</li> <li>Example: Home Wi-Fi networks or small office networks.</li> </ul> </li> </ul> </li> <li> <p>Subnetting:</p> <ul> <li>When a network becomes overcrowded, we divide it into smaller neighborhoods (subnets) so that each group of devices (network) can have its own space without overcrowding. It helps us organize the network better and makes communication between devices smoother.</li> </ul> </li> </ul>"},{"location":"1-networking/4-net-ports-ipaddress/#real-world-example","title":"Real World Example","text":"<ul> <li>Consider a computer with a web server using port 80 and an email server using port 25. Without ports, data collisions would occur. Ports provide designated spaces for each application to communicate, avoiding confusion.</li> <li>If you have two computers with web servers using port 80, each computer's IP address ensures that data sent to port 80 reaches the intended web server on that specific computer</li> </ul>"},{"location":"1-networking/4-net-ports-ipaddress/#assignments","title":"Assignments","text":"<ul> <li>Identify the port numbers commonly used for web traffic, email, and secure web browsing.</li> <li>Configure a firewall to allow traffic on specific ports only.</li> </ul>"},{"location":"1-networking/4-net-ports-ipaddress/#interview-questions","title":"Interview Questions","text":"<ul> <li>What is the purpose of ports in networking?</li> <li>How does an IP address help in sending data over the internet?</li> <li>Can you give an example of a real-world scenario where ports and IP addresses are used?</li> </ul>"},{"location":"1-networking/5-net-subnetting/","title":"Subnet vs Supernet (CIDR)","text":""},{"location":"1-networking/5-net-subnetting/#what","title":"What?","text":"<ul> <li>Subnet:</li> <li>Subnetting is like dividing a big office building into smaller departments. Each department has its own space and resources, making it easier to manage and control.</li> <li>Supernet (CIDR):</li> <li>Supernetting, or CIDR, is like combining multiple office buildings into one big complex. It simplifies management by treating them as one entity, reducing administrative overhead.</li> </ul>"},{"location":"1-networking/5-net-subnetting/#why","title":"Why?","text":"<ul> <li>Subnet:</li> <li>It helps organize and secure the network, improves performance, and simplifies management by breaking it into manageable parts.</li> <li>Supernet (CIDR):</li> <li>It reduces routing table size, optimizes IP address usage, and streamlines network management for larger-scale networks.</li> </ul>"},{"location":"1-networking/5-net-subnetting/#how","title":"How?","text":"<ul> <li>Imagine you're managing a company network with three departments: Sales, Marketing &amp; IT. </li> <li>Each department requires its own subnet for better organization and security.</li> <li>Sales Department:<ul> <li>IP address range: 192.168.1.0/24</li> <li>Example IP addresses: 192.168.1.1, 192.168.1.2, etc.</li> </ul> </li> <li>Marketing Department:<ul> <li>IP address range: 192.168.2.0/24</li> <li>Example IP addresses: 192.168.2.1, 192.168.2.2, etc.</li> </ul> </li> <li>IT Department:<ul> <li>IP address range: 192.168.3.0/24</li> <li>Example IP addresses: 192.168.3.1, 192.168.3.2, etc.</li> </ul> </li> </ul> <p>With subnetting, each department has its own distinct IP address range, allowing for efficient management and isolation of network traffic.</p> <p>Supernetting (CIDR for Branch Offices): Now, consider the company's branch offices, each with its own IP address range: - Branch Office 1:     - IP address range: 10.0.0.0/24 - Branch Office 2:     - IP address range: 10.0.1.0/24 - Branch Office 3:     - IP address range: 10.0.2.0/24</p> <ul> <li>Instead of managing each branch office network separately, you can aggregate these networks into one larger network using CIDR notation:</li> <li>Branch Offices Supernet:</li> <li>Aggregate IP address ranges: 10.0.0.0/22</li> <li>Example IP addresses: 10.0.0.1, 10.0.1.2, 10.0.2.3, etc.</li> </ul> <p>With supernetting, you combine multiple smaller networks into one larger network, simplifying routing and management.</p> <p>In summary, subnetting is used to divide a network into smaller, more manageable segments (like departments in a company), while supernetting (CIDR) is used to combine multiple smaller networks into one larger network (like branch offices in a company). Both techniques optimize network management and routing but serve different purposes.</p>"},{"location":"1-networking/7-net-dns/","title":"DNS (Domain Name System)","text":""},{"location":"1-networking/7-net-dns/#what","title":"What?","text":"<p>DNS query process involves resolving domain names to IP addresses by querying DNS servers.</p> <p></p>"},{"location":"1-networking/7-net-dns/#why","title":"Why?","text":"<p>Mapping IP addresses to a human-readable domain names Understanding the DNS query process helps troubleshoot DNS-related issues and optimize DNS server performance.</p>"},{"location":"1-networking/7-net-dns/#how","title":"How?","text":"<ol> <li>User Request:<ul> <li>A user enters a domain name (e.g., www.example.com) into a web browser.</li> </ul> </li> <li>DNS Query:<ul> <li>The user's computer sends a DNS query to a DNS resolver (often provided by the ISP).</li> </ul> </li> <li>Resolver Cache Check:<ul> <li>The resolver first checks its cache to see if it has the IP address for the requested domain. If found, it returns the IP address to the user's computer.</li> </ul> </li> <li>Authoritative DNS Server Query:<ul> <li>If the resolver doesn't have the IP address cached, it queries the authoritative DNS servers for the domain.</li> </ul> </li> <li>Record Lookup:<ul> <li>The authoritative DNS server searches for the requested DNS record based on the query type (e.g., A, AAAA, MX, CNAME).</li> </ul> </li> <li>Response:<ul> <li>The authoritative DNS server responds with the requested DNS record (e.g., IP address for an A record, mail server hostname for an MX record).</li> </ul> </li> <li>Caching:<ul> <li>The resolver caches the DNS record for future use, reducing the need for repeated queries.</li> </ul> </li> <li>Response to User:<ul> <li>The resolver returns the IP address (or other relevant data) to the user's computer.</li> </ul> </li> <li>Connection Establishment:<ul> <li>The user's computer establishes a connection to the server associated with the IP address returned by DNS.</li> </ul> </li> <li>Content Retrieval:<ul> <li>The user's computer retrieves the content (web page, email, etc.) from the server using the established connection.</li> </ul> </li> </ol>"},{"location":"1-networking/7-net-dns/#dns-records","title":"DNS Records ?","text":"<p>DNS records are entries in DNS zone files containing domain and service information, . Different DNS record types, like A, AAAA, MX, CNAME, TXT, NS, PTR, and SOA, serve specific purposes.</p> <ol> <li>A Record:<ul> <li>Example: <code>example.com A 192.0.2.1</code></li> <li>Explanation: Maps the domain name <code>example.com</code> to the IPv4 address <code>192.0.2.1</code>.</li> </ul> </li> <li>AAAA Record:<ul> <li>Example: <code>example.com AAAA 2001:0db8:85a3:0000:0000:8a2e:0370:7334</code></li> <li>Explanation: Maps the domain name <code>example.com</code> to the IPv6 address <code>2001:0db8:85a3:0000:0000:8a2e:0370:7334</code>.</li> </ul> </li> <li>MX Record:<ul> <li>Example: <code>example.com MX mail.example.com</code></li> <li>Explanation: Specifies that the mail server responsible for receiving email for the domain <code>example.com</code> is <code>mail.example.com</code>.</li> </ul> </li> <li>CNAME Record:<ul> <li>Example: <code>www.example.com CNAME example.com</code></li> <li>Explanation: Creates an alias <code>www.example.com</code> for the domain <code>example.com</code>, directing traffic to the same location.</li> </ul> </li> <li>TXT Record:<ul> <li>Example: <code>example.com TXT \"v=spf1 include:_spf.example.com ~all\"</code></li> <li>Explanation: Stores SPF (Sender Policy Framework) information for the domain <code>example.com</code>, specifying which servers are authorized to send emails on behalf of the domain.</li> </ul> </li> <li>NS Record:<ul> <li>Example: <code>example.com NS ns1.example.com</code></li> <li>Explanation: Specifies that the authoritative name server for the domain <code>example.com</code> is <code>ns1.example.com</code>.</li> </ul> </li> <li>PTR Record:<ul> <li>Example: <code>1.2.3.4 PTR example.com</code></li> <li>Explanation: Maps the IP address <code>1.2.3.4</code> to the domain name <code>example.com</code> for reverse DNS lookups.</li> </ul> </li> <li>SOA Record:<ul> <li>Example: <code>example.com SOA ns1.example.com hostmaster.example.com 2022031401 3600 1800 604800 86400</code></li> <li>Explanation: Provides essential information about the DNS zone for <code>example.com</code>, including the primary authoritative name server (<code>ns1.example.com</code>), contact email address (<code>hostmaster.example.com</code>), serial number, refresh interval, retry interval, expiration time, and TTL (Time to Live) values.</li> </ul> </li> </ol>"},{"location":"1-networking/7-net-dns/#assignments","title":"Assignments","text":"<ul> <li>Configure DNS records for a domain, including A, AAAA, MX, CNAME, and TXT records.</li> <li>Perform a forward and reverse DNS lookup for a given domain and IP address.</li> </ul>"},{"location":"1-networking/7-net-dns/#interview-questions","title":"Interview Questions","text":"<ol> <li>Explain the difference between forward and reverse DNS lookup.<ul> <li>Forward DNS lookup translates domain names to IP addresses, while reverse DNS lookup translates IP addresses to domain names.</li> </ul> </li> <li>Describe the function of the A, AAAA, MX, CNAME, and TXT DNS record types.<ul> <li>A: Maps a domain name to an IPv4 address.</li> <li>AAAA: Maps a domain name to an IPv6 address.</li> <li>MX: Specifies the mail server responsible for receiving email for the domain.</li> <li>CNAME: Creates an alias for a domain name, pointing it to another domain's canonical name.</li> <li>TXT: Stores arbitrary text data associated with a domain, often used for SPF, DKIM, or other purposes.</li> </ul> </li> <li>What is a DNS zone, and how is it different from a DNS record?<ul> <li>A DNS zone is a portion of the DNS namespace managed by a specific DNS server. It contains DNS records related to a specific domain or subdomain. A DNS record is an individual entry within a DNS zone file that provides information about a domain or its associated services.</li> </ul> </li> <li>How does DNS caching improve DNS resolution performance?<ul> <li>DNS caching stores recently resolved DNS queries locally, reducing the need to query authoritative DNS servers repeatedly. This improves DNS resolution performance by reducing latency and network traffic.</li> </ul> </li> <li>What are the common DNS record types used for email configuration?<ul> <li>MX (Mail Exchange) records specify the mail servers responsible for receiving email for a domain.</li> <li>SPF (Sender Policy Framework) records specify authorized email senders for a domain.</li> <li>DKIM (DomainKeys Identified Mail) records authenticate email messages sent from a domain.</li> </ul> </li> <li>What is DNSSEC, and why is it important for DNS security?<ul> <li>DNSSEC (Domain Name System Security Extensions) is a set of extensions to DNS that add cryptographic authentication to DNS responses, helping to prevent DNS spoofing and cache poisoning attacks. It ensures the integrity and authenticity of DNS data.</li> </ul> </li> <li>Explain the purpose of the SOA (Start of Authority) record in DNS.<ul> <li>The SOA record identifies the primary authoritative name server for a DNS zone and contains essential information about the zone, such as the zone's serial number, refresh interval, retry interval, expiration time, and TTL values.</li> </ul> </li> <li>How does DNS load balancing work, and what are its benefits?<ul> <li>DNS load balancing distributes incoming network traffic across multiple servers to improve reliability, scalability, and performance. It works by configuring multiple A records with the same domain name but different IP addresses, allowing DNS servers to rotate through the IP addresses in response to DNS queries.</li> </ul> </li> <li>Describe the steps involved in troubleshooting DNS resolution issues.<ul> <li>Verify network connectivity.</li> <li>Check DNS server configuration and availability.</li> <li>Verify DNS records for correctness.</li> <li>Test DNS resolution using tools like nslookup or dig.</li> <li>Clear DNS cache if necessary.</li> <li>Investigate DNS server logs for errors or anomalies.</li> <li>Check for firewall or network device misconfigurations affecting DNS traffic.</li> </ul> </li> </ol>"},{"location":"1-networking/8-net-topologies/","title":"Network Topolgies","text":"<p>The Star Topology is widely favored in real-time networks for its centralized management, fault isolation, and scalability. Its use of a central hub or switch simplifies network operations and ensures reliability across diverse environments.</p> <p></p> <ol> <li>Bus Topology:<ul> <li>Pros:<ul> <li>Simple and inexpensive to implement.</li> <li>Requires less cabling than other topologies.</li> </ul> </li> <li>Cons:<ul> <li>Susceptible to cable failures, which can disrupt the entire network.</li> <li>Limited scalability and performance as the number of devices increases.</li> </ul> </li> </ul> </li> <li>Star Topology:<ul> <li>Pros:<ul> <li>Centralized management and easy troubleshooting.</li> <li>Fault isolation, as a failure in one device does not affect others.</li> </ul> </li> <li>Cons:<ul> <li>Dependent on the central hub/switch, which can become a single point of failure.</li> <li>Requires more cabling than bus topology.</li> </ul> </li> </ul> </li> <li>Ring Topology:<ul> <li>Pros:<ul> <li>Provides equal access to all devices and uniform data transmission.</li> <li>Offers fault tolerance, as data can travel in both directions around the ring.</li> </ul> </li> <li>Cons:<ul> <li>A failure in one device or cable segment can disrupt the entire network.</li> <li>Limited scalability and difficult troubleshooting due to the closed-loop configuration.</li> </ul> </li> </ul> </li> <li>Mesh Topology:<ul> <li>Pros:<ul> <li>High reliability and fault tolerance due to redundant paths.</li> <li>Offers excellent scalability and performance in large networks.</li> </ul> </li> <li>Cons:<ul> <li>Requires significant cabling and configuration effort, making it expensive to implement.</li> <li>Complex to manage and troubleshoot, especially as the network size increases.</li> </ul> </li> </ul> </li> <li>Hybrid Topology:<ul> <li>Pros:<ul> <li>Combines the advantages of multiple topologies to meet diverse network requirements.</li> <li>Offers flexibility and scalability to accommodate changing network needs.</li> </ul> </li> <li>Cons:<ul> <li>Can be complex to design, implement, and manage.</li> <li>Requires careful planning to ensure compatibility and interoperability between different topology components.</li> </ul> </li> </ul> </li> </ol>"},{"location":"1-networking/9-net-dhcp/","title":"DHCP","text":""},{"location":"1-networking/9-net-dhcp/#what","title":"What?","text":"<ul> <li>DHCP is like a waiter in a restaurant who assigns tables (IP addresses) to customers (devices) as they come in, ensuring everyone gets seated and served without having to wait too long.</li> </ul>"},{"location":"1-networking/9-net-dhcp/#why","title":"Why?","text":"<ul> <li>Simplifies network administration by automating IP address allocation.</li> <li>Eliminates the need for manual IP configuration, reducing human errors.</li> <li>Supports dynamic IP address assignment, optimizing IP address usage.</li> <li>Facilitates easy addition and removal of devices from the network.</li> </ul>"},{"location":"1-networking/9-net-dhcp/#how","title":"How?","text":"<ul> <li>When a device connects to the network, it sends a DHCP discover message.</li> <li>A DHCP server responds with an offer, providing an available IP address.</li> <li>The device sends a request for the offered IP address.</li> <li>The DHCP server acknowledges the request and assigns the IP address to the device.</li> <li>The device configures its network settings using the assigned IP address, subnet mask, default gateway, and DNS servers.</li> </ul>"},{"location":"1-networking/9-net-dhcp/#interview-questions","title":"Interview Questions:","text":"<ul> <li>What is DHCP, and why is it used in networking?</li> <li>Explain the DHCP lease process.</li> <li>How do DHCP relay agents work, and when are they used?</li> <li>What are the benefits of using DHCP in a large-scale network environment?</li> <li>How does DHCP help in AWS DevOps environments, and what are DHCP option sets used for?</li> </ul>"},{"location":"2-scripting/python/1-introduction/","title":"Introduction to Python","text":""},{"location":"2-scripting/python/1-introduction/#what-is-python","title":"What is Python","text":"<p>Python is a powerful, versatile, and beginner-friendly programming language created by Guido van Rossum and first released in 1991. It's often described as a high-level, general-purpose language, meaning it's:</p> <p>High-level: You code using human-readable constructs instead of low-level machine instructions, making it more intuitive and natural to learn and use.</p> <p>General-purpose: It can be applied to various tasks and domains, from web development and data science to automation and system administration.</p> <p>Python's popularity has surged in recent years, thanks to its simplicity, readability, and extensive ecosystem of libraries and frameworks. It's widely used in fields like web development, data analysis, machine learning, scientific computing, and more.</p> <p>Here are some key characteristics of Python:</p> <ol> <li> <p>Open-Source: Python is an open-source language, meaning its source code is freely available for anyone to inspect, modify, and distribute. This fosters collaboration, transparency, and continuous improvement.</p> </li> <li> <p>Readable Syntax: Python prioritizes code readability with its simple and clear syntax. It heavily relies on indentation to define code blocks, improving its visual structure and making it easier to understand.</p> </li> <li> <p>Interpreted Language: Unlike compiled languages like C++ or Java, Python code doesn't need to be translated into machine code before execution. Instead, an interpreter directly reads and executes your code line by line, allowing for faster development and testing cycles.</p> </li> <li> <p>Dynamically Typed: You don't explicitly declare the data type of variables in Python. The interpreter infers the type based on the value assigned, providing more flexibility but requiring less upfront effort.</p> </li> <li> <p>Object-Oriented: Python supports object-oriented programming (OOP) concepts like classes, objects, inheritance, and polymorphism, enabling you to organize your code effectively for complex projects.</p> </li> <li> <p>Extensive Standard Library: Python comes with a rich standard library containing useful modules for various tasks, including file I/O, networking, regular expressions, web scraping, and more. This saves you time and effort by readily providing solutions for common programming needs.</p> </li> <li> <p>Large and Active Community: Python boasts a vast and supportive community of developers, offering numerous resources, libraries, frameworks, and tutorials. This makes it easier to find help and learn from others' experiences.</p> </li> </ol>"},{"location":"2-scripting/python/1-introduction/#why-learn-python","title":"Why learn Python?","text":"<p>Here are some of the reasons why Python is such a popular choice for both beginners and experienced programmers:</p> <ul> <li>Easy to Learn: Its simple syntax and clear structure make it an excellent starting point for those new to programming.</li> <li>Versatile: You can use it for various tasks, from simple scripts to complex applications.</li> <li>Powerful: Despite its ease of use, Python can handle demanding tasks thanks to its robust libraries and frameworks.</li> <li>Large Community: You'll have access to extensive resources, tutorials, and support from the active Python community.</li> <li>Growing Demand: Python is one of the most in-demand programming languages in various industries, making it a valuable skill for career advancement.</li> </ul>"},{"location":"2-scripting/python/1-introduction/#installing-and-setting-up-python","title":"Installing and setting up Python","text":"<p>Before you start learning Python, you need to install it on your system. Python is available for all major operating systems, including Windows, macOS, and Linux.</p> <p>Refer to the official Python website for detailed installation instructions: Python Downloads</p>"},{"location":"2-scripting/python/1-introduction/#introduction-to-the-interpreter","title":"Introduction to the interpreter","text":"<p>Python comes with an interactive interpreter that allows you to execute code and see the results immediately. This is a great way to experiment with the language and test small code snippets.</p> <p>To start the Python interpreter, open your terminal or command prompt and type <code>python</code> (or <code>python3</code> on some systems). You should see a prompt like <code>&gt;&gt;&gt;</code>, indicating that the interpreter is ready to accept your commands.</p> <p>Here's an example of using the Python interpreter:</p> <pre><code>&gt;&gt;&gt; print(\"Hello, Python!\")\nHello, Python!\n</code></pre> <p>You can also run Python scripts saved in files using the interpreter. For example, if you have a file called <code>hello.py</code> containing the line <code>print(\"Hello, Python!\")</code>, you can run it using <code>python hello.py</code>.</p> <p>Alternatively, you can use an Integrated Development Environment (IDE) like PyCharm, VSCode, or Jupyter Notebook for a more feature-rich coding experience.</p>"},{"location":"2-scripting/python/1-introduction/#basic-syntax-and-keywords","title":"Basic syntax and keywords","text":"<p>Python has a simple and consistent syntax that's easy to read and understand. Here are some basic concepts to get you started:</p> <ul> <li> <p>Comments: You can add comments to your code using the <code>#</code> symbol. Comments are ignored by the interpreter and are used to document your code.</p> </li> <li> <p>Indentation: Python uses indentation to define code blocks, such as loops, functions, and classes. This makes the code visually clear and reduces the need for explicit block delimiters.</p> </li> <li> <p>Variables: You can declare variables and assign values to them using the <code>=</code> operator. Python is dynamically typed, so you don't need to specify the data type of a variable.</p> </li> <li> <p>Data Types: Python supports various data types, including integers, floats, strings, booleans, lists, tuples, dictionaries, and more.</p> </li> <li> <p>Operators: Python provides a wide range of operators for arithmetic, comparison, logical operations, and more.</p> </li> <li> <p>Input and Output: You can take input from the user and display output using the <code>input()</code> and <code>print()</code> functions.</p> </li> </ul> <p>In the next section, we'll explore these concepts in more detail and learn how to use them in practice.</p>"},{"location":"2-scripting/python/2-datatypes-and-variables/","title":"Data types and Variables","text":""},{"location":"2-scripting/python/2-datatypes-and-variables/#variables","title":"Variables","text":"<p>Variables are used to store data in a program. They are like containers that hold values. You can think of them as labels that you can assign to values. In Python, you can create a variable by giving it a name and assigning a value to it using the <code>=</code> operator.</p> <pre><code># Assigning a value to a variable\nx = 10\ny = 3.14\nname = \"Alice\"\nis_student = True\n</code></pre>"},{"location":"2-scripting/python/2-datatypes-and-variables/#data-types","title":"Data Types","text":""},{"location":"2-scripting/python/2-datatypes-and-variables/#numbers","title":"Numbers","text":"<ul> <li> <p>Integers (int): represent whole numbers (positive, negative, or zero) with unlimited size. Examples: 10, -23, 0.</p> </li> <li> <p>Floats (float): represent decimal numbers with limited precision (approximately 15 decimal places). Examples: 3.14, -5.2e10 (scientific notation).</p> </li> </ul>"},{"location":"2-scripting/python/2-datatypes-and-variables/#strings","title":"Strings","text":"<ul> <li>A string is a sequence of characters enclosed within single or double quotes. Examples: \"hello\", 'world', \"123\".</li> </ul>"},{"location":"2-scripting/python/2-datatypes-and-variables/#boolean","title":"Boolean","text":"<ul> <li>A boolean value is either <code>True</code> or <code>False</code>. It is used to represent truth values. Examples: True, False.</li> </ul>"},{"location":"2-scripting/python/2-datatypes-and-variables/#none","title":"None","text":"<ul> <li>The <code>None</code> keyword is used to represent the absence of a value. It is similar to <code>null</code> in other programming languages.</li> </ul>"},{"location":"2-scripting/python/2-datatypes-and-variables/#operators","title":"Operators","text":""},{"location":"2-scripting/python/2-datatypes-and-variables/#arithmetic-operators","title":"Arithmetic Operators","text":"<ul> <li><code>+</code> (addition)</li> <li><code>-</code> (subtraction)</li> <li><code>*</code> (multiplication)</li> <li><code>/</code> (division)</li> <li><code>%</code> (modulus)</li> <li><code>**</code> (exponentiation)</li> <li><code>//</code> (floor division)</li> </ul> <pre><code># Arithmetic operators\nx = 10\ny = 3\nprint(x + y)  # 13\nprint(x - y)  # 7\nprint(x * y)  # 30\nprint(x / y)  # 3.3333333333333335\nprint(x % y)  # 1\nprint(x ** y) # 1000\nprint(x // y) # 3\n</code></pre>"},{"location":"2-scripting/python/2-datatypes-and-variables/#comparison-operators","title":"Comparison Operators","text":"<ul> <li><code>==</code> (equal to)</li> <li><code>!=</code> (not equal to)</li> <li><code>&lt;</code> (less than)</li> <li><code>&gt;</code> (greater than)</li> <li><code>&lt;=</code> (less than or equal to)</li> <li><code>&gt;=</code> (greater than or equal to)</li> </ul> <pre><code># Comparison operators\nx = 10\ny = 5\nprint(x == y)  # False\nprint(x != y)  # True\nprint(x &lt; y)   # False\nprint(x &gt; y)   # True\nprint(x &lt;= y)  # False\nprint(x &gt;= y)  # True\n</code></pre>"},{"location":"2-scripting/python/2-datatypes-and-variables/#logical-operators","title":"Logical Operators","text":"<ul> <li><code>and</code> (logical and)</li> <li><code>or</code> (logical or)</li> <li><code>not</code> (logical not)</li> </ul> <pre><code># Logical operators\nx = True\ny = False\nprint(x and y)  # False\nprint(x or y)   # True\nprint(not x)    # False\n</code></pre>"},{"location":"2-scripting/python/2-datatypes-and-variables/#assignment-operators","title":"Assignment Operators","text":"<ul> <li><code>=</code> (assign value)</li> <li><code>+=</code> (add and assign)</li> <li><code>-=</code> (subtract and assign)</li> <li><code>*=</code> (multiply and assign)</li> <li><code>/=</code> (divide and assign)</li> <li><code>%=</code> (modulus and assign)</li> <li><code>**=</code> (exponentiate and assign)</li> <li><code>//=</code> (floor divide and assign)</li> </ul> <pre><code># Assignment operators\nx = 10\nx += 5  # equivalent to x = x + 5\nx -= 3  # equivalent to x = x - 3\nx *= 2  # equivalent to x = x * 2\nx /= 4  # equivalent to x = x / 4\nx %= 3  # equivalent to x = x % 3\nx **= 2 # equivalent to x = x ** 2\nx //= 5 # equivalent to x = x // 5\n</code></pre>"},{"location":"2-scripting/python/2-datatypes-and-variables/#identity-operators","title":"Identity Operators","text":"<ul> <li><code>is</code> (object identity)</li> <li><code>is not</code> (negated object identity)</li> </ul> <pre><code># Identity operators\nx = [1, 2, 3]\ny = [1, 2, 3]\nz = x\nprint(x is y)    # False\nprint(x is not y) # True\nprint(x is z)    # True\n</code></pre>"},{"location":"2-scripting/python/2-datatypes-and-variables/#membership-operators","title":"Membership Operators","text":"<ul> <li><code>in</code> (sequence membership)</li> <li><code>not in</code> (negated sequence membership)</li> </ul> <pre><code># Membership operators\nx = [1, 2, 3, 4, 5]\nprint(3 in x)    # True\nprint(6 not in x) # True\n</code></pre>"},{"location":"2-scripting/python/2-datatypes-and-variables/#type-conversion","title":"Type Conversion","text":"<p>You can convert between different data types using built-in functions like <code>int()</code>, <code>float()</code>, <code>str()</code>, <code>bool()</code>, etc.</p> <pre><code># Type conversion\nx = 10\ny = 3.14\nz = \"20\"\nprint(float(x))  # 10.0\nprint(int(y))    # 3\nprint(int(z))    # 20\nprint(str(x))    # '10'\nprint(bool(x))   # True\nprint(bool(0))   # False\n</code></pre>"},{"location":"2-scripting/python/2-datatypes-and-variables/#input-and-output","title":"Input and Output","text":""},{"location":"2-scripting/python/2-datatypes-and-variables/#input","title":"Input","text":"<p>You can use the <code>input()</code> function to take user input from the keyboard. The input is always returned as a string.</p> <pre><code># Input\nname = input(\"Enter your name: \")\nprint(\"Hello, \" + name)\n</code></pre>"},{"location":"2-scripting/python/2-datatypes-and-variables/#output","title":"Output","text":"<p>You can use the <code>print()</code> function to display output on the screen. You can pass multiple arguments to <code>print()</code> separated by commas.</p> <pre><code># Output\nx = 10\ny = 3.14\nname = \"Alice\"\nprint(\"The value of x is\", x)\nprint(\"The value of y is\", y)\nprint(\"Hello,\", name)\n</code></pre>"},{"location":"2-scripting/python/2-datatypes-and-variables/#comments","title":"Comments","text":"<p>Comments are used to explain the code and make it more readable. In Python, you can use the <code>#</code> symbol to write a single-line comment.</p> <pre><code># This is a single-line comment\n</code></pre> <p>For multi-line comments, you can enclose the text within triple quotes.</p> <pre><code>\"\"\"\nThis is a\nmulti-line comment\n\"\"\"\n</code></pre>"},{"location":"2-scripting/python/3-control-flow/","title":"Indentation in Python","text":"<p>In Python, indentation is used to define a block of code. The standard indentation is 4 spaces. </p> <pre><code># Example\nx = 10\nif x &gt; 5:\n    print('x is greater than 5')\n</code></pre> <p>If you use a different number of spaces or tabs, Python will raise an <code>IndentationError</code>.</p> <pre><code># Example\nx = 10\nif x &gt; 5:\n    print('x is greater than 5') # IndentationError\n</code></pre>"},{"location":"2-scripting/python/3-control-flow/#control-flow","title":"Control Flow","text":""},{"location":"2-scripting/python/3-control-flow/#conditional-statements","title":"Conditional Statements","text":"<p>Conditional statements are used to execute a block of code based on a condition. </p>"},{"location":"2-scripting/python/3-control-flow/#if-statements","title":"<code>if</code> Statements","text":"<p>The <code>if</code> statement is the most basic form of a conditional statement. It is used to execute a block of code if a condition is true.</p> <pre><code># Syntax\nif condition:\n    # code block\n</code></pre> <p>The <code>if</code> statement is followed by a condition. If the condition is true, the code block is executed. If the condition is false, the code block is skipped.</p> <pre><code># Example\nx = 10\nif x &gt; 5:\n    print('x is greater than 5')\n</code></pre>"},{"location":"2-scripting/python/3-control-flow/#if-else-statements","title":"<code>if</code>-<code>else</code> Statements","text":"<p>The <code>if</code> statement can be followed by an <code>else</code> statement. The <code>else</code> statement is used to execute a block of code if the condition is false.</p> <pre><code># Syntax\nif condition:\n    # code block\nelse:\n    # code block\n</code></pre> <pre><code># Example\nx = 3\nif x &gt; 5:\n    print('x is greater than 5')\nelse:\n    print('x is less than or equal to 5')\n</code></pre>"},{"location":"2-scripting/python/3-control-flow/#if-elif-else-statements","title":"<code>if</code>-<code>elif</code>-<code>else</code> Statements","text":"<p>The <code>if</code> statement can be followed by one or more <code>elif</code> (else if) statements. The <code>elif</code> statement is used to check additional conditions if the previous conditions are false.</p> <pre><code># Syntax\nif condition:\n    # code block\nelif condition:\n    # code block\nelse:\n    # code block\n</code></pre> <pre><code># Example\nx = 3\nif x &gt; 5:\n    print('x is greater than 5')\nelif x == 5:\n    print('x is equal to 5')\nelse:\n    print('x is less than 5')\n</code></pre>"},{"location":"2-scripting/python/3-control-flow/#nested-if-statements","title":"Nested <code>if</code> Statements","text":"<p><code>if</code> statements can be nested inside other <code>if</code> statements. This is useful when you want to check for additional conditions.</p> <pre><code># Example\nx = 10\ny = 5\nif x &gt; 5:\n    if y &gt; 5:\n        print('x and y are greater than 5')\n    else:\n        print('x is greater than 5, but y is less than or equal to 5')\nelse:\n    print('x is less than or equal to 5')\n</code></pre>"},{"location":"2-scripting/python/3-control-flow/#loops","title":"Loops","text":"<p>Loops are used to execute a block of code multiple times.</p>"},{"location":"2-scripting/python/3-control-flow/#for-loops","title":"<code>for</code> Loops","text":"<p>The <code>for</code> loop is used to iterate over a sequence (e.g., a list, tuple, string).</p> <pre><code># Syntax\nfor item in sequence:\n    # code block\n</code></pre> <pre><code># Example\nfruits = ['apple', 'banana', 'cherry']\nfor fruit in fruits:\n    print(fruit)\n</code></pre>"},{"location":"2-scripting/python/3-control-flow/#while-loops","title":"<code>while</code> Loops","text":"<p>The <code>while</code> loop is used to execute a block of code as long as a condition is true.</p> <pre><code># Syntax\nwhile condition:\n    # code block\n</code></pre> <pre><code># Example\nx = 0\nwhile x &lt; 5:\n    print(x)\n    x += 1\n</code></pre>"},{"location":"2-scripting/python/3-control-flow/#nested-loops","title":"Nested Loops","text":"<p>Loops can be nested inside other loops. This is useful when you want to iterate over multiple sequences.</p> <pre><code># Example\nadj = ['red', 'big', 'tasty']\nfruits = ['apple', 'banana', 'cherry']\nfor a in adj:\n    for f in fruits:\n        print(a, f)\n</code></pre>"},{"location":"2-scripting/python/3-control-flow/#exercises","title":"Exercises","text":"<ol> <li>Write a program to check if a number is positive, negative, or zero.</li> <li>Write a program to find the sum of all numbers in a list.</li> <li>Write a program to find the factorial of a number.</li> <li>Write a program to print the Fibonacci series up to <code>n</code> terms.</li> <li>Write a program to check if a number is prime or not.</li> <li>Write a program to check if a string is a palindrome.</li> </ol>"},{"location":"2-scripting/python/4-functions/","title":"Functions","text":""},{"location":"2-scripting/python/4-functions/#defining-functions","title":"Defining Functions","text":"<p>A function is a block of code that performs a specific task. It can take input, perform operations, and return a result. Functions are used to organize code into reusable blocks, which can be called from different parts of a program.</p> <p>In Python, you can define a function using the <code>def</code> keyword followed by the function name and a pair of parentheses. The function body is indented and contains the code to be executed.</p> <pre><code># Syntax\ndef function_name(parameters):\n    # function body\n    # code block\n</code></pre> <pre><code># Example\ndef greet(name):\n    print(\"Hello, \" + name)\n</code></pre> <p>In the example above, we define a function called <code>greet</code> that takes a single parameter <code>name</code>. The function body contains a single statement that prints a greeting message to the console.</p>"},{"location":"2-scripting/python/4-functions/#arguments-and-parameters","title":"Arguments and Parameters","text":"<p>A function can take zero or more parameters as input. These parameters are specified in the function definition and are used to pass values to the function. When a function is called, the values passed to it are called arguments.</p> <pre><code># Syntax\ndef function_name(param1, param2, ...):\n    # function body\n    # code block\n</code></pre> <pre><code># Example\ndef add(x, y):\n    return x + y\n</code></pre> <p>In the example above, we define a function called <code>add</code> that takes two parameters <code>x</code> and <code>y</code>. The function body contains a single statement that returns the sum of the two parameters.</p>"},{"location":"2-scripting/python/4-functions/#returning-values","title":"Returning Values","text":"<p>A function can return a value using the <code>return</code> statement. The returned value can be used in the calling code.</p> <pre><code># Syntax\ndef function_name(parameters):\n    # function body\n    # code block\n    return value\n</code></pre> <pre><code># Example\ndef add(x, y):\n    return x + y\n</code></pre> <p>In the example above, the <code>add</code> function returns the sum of the two parameters <code>x</code> and <code>y</code>. The calling code can use the returned value as needed.</p>"},{"location":"2-scripting/python/4-functions/#scope-and-lifetime-of-variables","title":"Scope and Lifetime of Variables","text":"<p>Variables defined inside a function are local to that function and cannot be accessed from outside. They have a limited scope and lifetime, which is determined by the function's execution.</p> <pre><code># Example\ndef greet(name):\n    message = \"Hello, \" + name\n    print(message)\n\ngreet(\"Alice\")\nprint(message)  # NameError: name 'message' is not defined\n</code></pre> <p>In the example above, the <code>message</code> variable is defined inside the <code>greet</code> function and cannot be accessed from outside. Attempting to access it from the calling code results in a <code>NameError</code>.</p> <p>Variables defined outside any function are global and can be accessed from any part of the program. However, it is good practice to avoid using global variables as much as possible, as they can lead to unexpected behavior and make the code harder to understand and maintain.</p>"},{"location":"2-scripting/python/5-data-structures/","title":"Data Structures","text":""},{"location":"2-scripting/python/5-data-structures/#lists","title":"Lists","text":"<p>A list is a collection of items, which can be of different types. Lists are mutable, meaning that you can change the elements of a list after it has been created. Lists are created using square brackets <code>[]</code> and elements are separated by commas.</p> <pre><code># Syntax\nlist_name = [item1, item2, ...]\n</code></pre> <pre><code># Example\nfruits = [\"apple\", \"banana\", \"cherry\"]\n</code></pre> <p>In the example above, we define a list called <code>fruits</code> that contains three string elements.</p>"},{"location":"2-scripting/python/5-data-structures/#accessing-elements","title":"Accessing Elements","text":"<p>You can access individual elements of a list using their index. The index of the first element is 0, the index of the second element is 1, and so on. You can also use negative indices to access elements from the end of the list.</p> <pre><code># Syntax\nelement = list_name[index]\n</code></pre> <pre><code># Example\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(fruits[0])  # Output: apple\nprint(fruits[-1])  # Output: cherry\n</code></pre> <p>In the example above, we access the first and last elements of the <code>fruits</code> list using their indices.</p>"},{"location":"2-scripting/python/5-data-structures/#modifying-elements","title":"Modifying Elements","text":"<p>You can modify the elements of a list by assigning new values to them using their indices.</p> <pre><code># Syntax\nlist_name[index] = new_value\n</code></pre> <pre><code># Example\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfruits[1] = \"orange\"\nprint(fruits)  # Output: ['apple', 'orange', 'cherry']\n</code></pre> <p>In the example above, we change the second element of the <code>fruits</code> list from \"banana\" to \"orange\".</p>"},{"location":"2-scripting/python/5-data-structures/#adding-and-removing-elements","title":"Adding and Removing Elements","text":"<p>You can add new elements to a list using the <code>append</code> method, and remove elements using the <code>remove</code> method.</p> <pre><code># Syntax\nlist_name.append(new_item)\nlist_name.remove(item)\n</code></pre> <pre><code># Example\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfruits.append(\"orange\")\nprint(fruits)  # Output: ['apple', 'banana', 'cherry', 'orange']\nfruits.remove(\"banana\")\nprint(fruits)  # Output: ['apple', 'cherry', 'orange']\n</code></pre> <p>In the example above, we add \"orange\" to the <code>fruits</code> list using the <code>append</code> method, and remove \"banana\" from the list using the <code>remove</code> method.</p>"},{"location":"2-scripting/python/5-data-structures/#tuples","title":"Tuples","text":"<p>A tuple is a collection of items, similar to a list. However, tuples are immutable, meaning that you cannot change the elements of a tuple after it has been created. Tuples are created using parentheses <code>()</code> and elements are separated by commas.</p> <pre><code># Syntax\ntuple_name = (item1, item2, ...)\n</code></pre> <pre><code># Example\ncolors = (\"red\", \"green\", \"blue\")\n</code></pre> <p>In the example above, we define a tuple called <code>colors</code> that contains three string elements.</p>"},{"location":"2-scripting/python/5-data-structures/#accessing-elements_1","title":"Accessing Elements","text":"<p>You can access individual elements of a tuple using their index, similar to lists.</p> <pre><code># Syntax\nelement = tuple_name[index]\n</code></pre> <pre><code># Example\ncolors = (\"red\", \"green\", \"blue\")\nprint(colors[0])  # Output: red\nprint(colors[-1])  # Output: blue\n</code></pre> <p>In the example above, we access the first and last elements of the <code>colors</code> tuple using their indices.</p>"},{"location":"2-scripting/python/5-data-structures/#modifying-elements_1","title":"Modifying Elements","text":"<p>Since tuples are immutable, you cannot modify the elements of a tuple after it has been created.</p> <pre><code># Example\ncolors = (\"red\", \"green\", \"blue\")\ncolors[1] = \"yellow\"  # TypeError: 'tuple' object does not support item assignment\n</code></pre> <p>In the example above, attempting to change the second element of the <code>colors</code> tuple results in a <code>TypeError</code>.</p>"},{"location":"2-scripting/python/5-data-structures/#dictionaries","title":"Dictionaries","text":"<p>A dictionary is a collection of key-value pairs. Each key is associated with a value, and you can use the key to access the corresponding value. Dictionaries are mutable and can contain elements of different types. Dictionaries are created using curly braces <code>{}</code> and key-value pairs are separated by commas.</p> <pre><code># Syntax\ndict_name = {key1: value1, key2: value2, ...}\n</code></pre> <pre><code># Example\nperson = {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}\n</code></pre> <p>In the example above, we define a dictionary called <code>person</code> that contains three key-value pairs.</p>"},{"location":"2-scripting/python/5-data-structures/#accessing-elements_2","title":"Accessing Elements","text":"<p>You can access the value associated with a key in a dictionary using the key.</p> <pre><code># Syntax\nvalue = dict_name[key]\n</code></pre> <pre><code># Example\nperson = {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}\nprint(person[\"name\"])  # Output: Alice\nprint(person[\"age\"])  # Output: 25\n</code></pre> <p>In the example above, we access the values associated with the \"name\" and \"age\" keys in the <code>person</code> dictionary.</p>"},{"location":"2-scripting/python/5-data-structures/#modifying-elements_2","title":"Modifying Elements","text":"<p>You can modify the value associated with a key in a dictionary by assigning a new value to it.</p> <pre><code># Syntax\ndict_name[key] = new_value\n</code></pre> <pre><code># Example\nperson = {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}\nperson[\"age\"] = 26\nprint(person)  # Output: {'name': 'Alice', 'age': 26, 'city': 'New York'}\n</code></pre> <p>In the example above, we change the value associated with the \"age\" key in the <code>person</code> dictionary from 25 to 26.</p>"},{"location":"2-scripting/python/5-data-structures/#adding-and-removing-elements_1","title":"Adding and Removing Elements","text":"<p>You can add new key-value pairs to a dictionary by assigning a value to a new key, and remove key-value pairs using the <code>pop</code> method.</p> <pre><code># Syntax\ndict_name[new_key] = new_value\ndict_name.pop(key)\n</code></pre> <pre><code># Example\nperson = {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}\n\n# Add a new key-value pair\nperson[\"email\"] = \"alice@example.com\"\nprint(person)  # Output: {'name': 'Alice', 'age': 25, 'city': 'New York', 'email': 'alice@example.com'}\n\n# Remove a key-value pair\nperson.pop(\"age\")\nprint(person)  # Output: {'name': 'Alice', 'city': 'New York', 'email': 'alice@example.com'}\n</code></pre> <p>In the example above, we add an \"email\" key-value pair to the <code>person</code> dictionary, and then remove the \"age\" key-value pair using the <code>pop</code> method.</p>"},{"location":"2-scripting/python/5-data-structures/#sets","title":"Sets","text":"<p>A set is an unordered collection of unique elements. Sets are mutable and can contain elements of different types. Sets are created using curly braces <code>{}</code> and elements are separated by commas.</p> <pre><code># Syntax\nset_name = {item1, item2, ...}\n</code></pre> <pre><code># Example\nfruits = {\"apple\", \"banana\", \"cherry\"}\n</code></pre> <p>In the example above, we define a set called <code>fruits</code> that contains three string elements.</p>"},{"location":"2-scripting/python/5-data-structures/#adding-and-removing-elements_2","title":"Adding and Removing Elements","text":"<p>You can add new elements to a set using the <code>add</code> method, and remove elements using the <code>remove</code> method.</p> <pre><code># Syntax\nset_name.add(new_item)\nset_name.remove(item)\n</code></pre> <pre><code># Example\nfruits = {\"apple\", \"banana\", \"cherry\"}\nfruits.add(\"orange\")\nprint(fruits)  # Output: {'apple', 'banana', 'cherry', 'orange'}\n\nfruits.remove(\"banana\")\nprint(fruits)  # Output: {'apple', 'cherry', 'orange'}\n</code></pre> <p>In the example above, we add \"orange\" to the <code>fruits</code> set using the <code>add</code> method, and remove \"banana\" from the set using the <code>remove</code> method.</p>"},{"location":"2-scripting/python/5-data-structures/#set-operations","title":"Set Operations","text":"<p>You can perform various set operations such as union, intersection, and difference using built-in methods.</p> <pre><code># Example\nset1 = {1, 2, 3}\nset2 = {3, 4, 5}\n\n# Union\nprint(set1 | set2)  # Output: {1, 2, 3, 4, 5}\n\n# Intersection\nprint(set1 &amp; set2)  # Output: {3}\n\n# Difference\nprint(set1 - set2)  # Output: {1, 2}\n</code></pre> <p>In the example above, we perform the union, intersection, and difference operations on two sets <code>set1</code> and <code>set2</code>.</p>"},{"location":"2-scripting/python/5-data-structures/#exercises","title":"Exercises","text":"<ol> <li>Write a program to count the frequency of elements in a list.</li> <li>Write a program to remove duplicates from a list.</li> <li>Write a program to find the intersection of two lists.</li> <li>Write a program to check if a set is a subset of another set.</li> <li>Write a program to perform the symmetric difference of two sets.</li> </ol>"},{"location":"2-scripting/python/6-modules/","title":"Modules and Packages","text":""},{"location":"2-scripting/python/6-modules/#modules","title":"Modules","text":"<p>In Python, a module is a file containing Python definitions and statements. The file name is the module name with the suffix <code>.py</code> appended. For example, a module named <code>example</code> would be in a file named <code>example.py</code>.</p> <p>You can use the <code>import</code> statement to import a module into your code. Once a module is imported, you can use its functions, classes, and variables in your program.</p> <pre><code># Syntax\nimport module_name\n</code></pre> <pre><code># Example\nimport math\nprint(math.pi)  # Output: 3.141592653589793\n</code></pre> <p>In the example above, we import the <code>math</code> module and use its <code>pi</code> variable to print the value of \u03c0.</p> <p>You can also import specific functions, classes, or variables from a module using the <code>from</code> keyword.</p> <pre><code># Syntax\nfrom module_name import name1, name2, ...\n</code></pre> <pre><code># Example\nfrom math import pi, sqrt\nprint(pi)   # Output: 3.141592653589793\nprint(sqrt(16))  # Output: 4.0\n</code></pre> <p>In the example above, we import the <code>pi</code> and <code>sqrt</code> functions from the <code>math</code> module and use them in our code.</p>"},{"location":"2-scripting/python/6-modules/#using-built-in-and-third-party-modules","title":"Using Built-in and Third-Party Modules","text":"<p>Python comes with a wide range of built-in modules that provide useful functions and classes for various tasks. Some of the most commonly used built-in modules include <code>math</code>, <code>random</code>, <code>datetime</code>, <code>os</code>, <code>sys</code>, and <code>json</code>.</p> <p>In addition to built-in modules, you can also use third-party modules created by other developers. These modules can be installed using the Python Package Index (PyPI) and the <code>pip</code> package manager.</p> <p>To install a third-party module, you can use the following command in your terminal or command prompt:</p> <pre><code>pip install module_name\n</code></pre> <p>Once installed, you can import and use the module in your code just like any other module.</p>"},{"location":"2-scripting/python/6-modules/#creating-your-own-modules-and-packages","title":"Creating Your Own Modules and Packages","text":"<p>You can create your own modules by writing Python code in a file and importing it into other programs. To create a module, simply save your code in a file with a <code>.py</code> extension and import it using the <code>import</code> statement.</p> <p>For example, if you have a file named <code>my_module.py</code> containing the following code:</p> <pre><code># my_module.py\ndef greet(name):\n    print(\"Hello, \" + name)\n</code></pre> <p>You can import the <code>greet</code> function from the <code>my_module</code> module and use it in your program.</p> <pre><code># main.py\nimport my_module\n\nmy_module.greet(\"Alice\")  # Output: Hello, Alice\n</code></pre> <p>You can also organize related modules into packages by creating a directory with an <code>__init__.py</code> file. This file can be empty, but it signals to Python that the directory should be treated as a package.</p> <p>For example, if you have a directory structure like this:</p> <pre><code>my_package/\n    __init__.py\n    module1.py\n    module2.py\n</code></pre> <p>You can import the modules from the package using dot notation.</p> <pre><code># main.py\nimport my_package.module1\nimport my_package.module2\n</code></pre> <p>In the example above, we import the <code>module1</code> and <code>module2</code> modules from the <code>my_package</code> package and use them in our program.</p>"},{"location":"2-scripting/python/7-file-io/","title":"File IO","text":""},{"location":"2-scripting/python/7-file-io/#reading-files","title":"Reading Files","text":"<p>Python has a built-in function called <code>open()</code> that allows you to open and read files. The <code>open()</code> function takes two arguments: the name of the file and the mode in which you want to open the file. The mode can be <code>r</code> for reading, <code>w</code> for writing, or <code>a</code> for appending.</p> <pre><code># Syntax\nfile = open(\"filename\", \"mode\")\n</code></pre> <pre><code># Example\nfile = open(\"example.txt\", \"r\")\n</code></pre> <p>In the example above, we open a file called <code>example.txt</code> in read mode.</p>"},{"location":"2-scripting/python/7-file-io/#reading-the-entire-file","title":"Reading the Entire File","text":"<p>You can read the entire contents of a file using the <code>read()</code> method.</p> <pre><code># Syntax\nfile.read()\n</code></pre> <pre><code># Example\nfile = open(\"example.txt\", \"r\")\ncontent = file.read()\nprint(content)\n</code></pre> <p>In the example above, we read the entire contents of the file <code>example.txt</code> and store it in a variable called <code>content</code>. We then print the contents of the file to the console.</p>"},{"location":"2-scripting/python/7-file-io/#reading-line-by-line","title":"Reading Line by Line","text":"<p>You can also read the contents of a file line by line using the <code>readline()</code> method.</p> <pre><code># Syntax\nfile.readline()\n</code></pre> <pre><code># Example\nfile = open(\"example.txt\", \"r\")\nline1 = file.readline()\nline2 = file.readline()\nprint(line1)\nprint(line2)\n</code></pre> <p>In the example above, we read the first two lines of the file <code>example.txt</code> and store them in variables called <code>line1</code> and <code>line2</code>. We then print the contents of the variables to the console.</p>"},{"location":"2-scripting/python/7-file-io/#closing-files","title":"Closing Files","text":"<p>After you have finished working with a file, you should close it using the <code>close()</code> method.</p> <pre><code># Syntax\nfile.close()\n</code></pre> <pre><code># Example\nfile = open(\"example.txt\", \"r\")\ncontent = file.read()\nfile.close()\n</code></pre> <p>In the example above, we open the file <code>example.txt</code>, read its contents, and then close the file.</p> <p>Alternatively, you can use the <code>with</code> statement to open and close files automatically.</p> <pre><code># Example\nwith open(\"example.txt\", \"r\") as file:\n    content = file.read()\n</code></pre> <p>In the example above, the file is automatically closed when the <code>with</code> block is exited.</p>"},{"location":"2-scripting/python/7-file-io/#writing-to-files","title":"Writing to Files","text":"<p>You can write to files using the <code>write()</code> method.</p> <pre><code># Syntax\nfile.write(\"text\")\n</code></pre> <pre><code># Example\nwith open(\"example.txt\", \"w\") as file:\n    file.write(\"Hello, world!\")\n</code></pre> <p>In the example above, we open the file <code>example.txt</code> in write mode and write the text \"Hello, world!\" to the file.</p>"},{"location":"2-scripting/python/7-file-io/#appending-to-files","title":"Appending to Files","text":"<p>You can append to files using the <code>write()</code> method with the <code>a</code> mode.</p> <pre><code># Example\nwith open(\"example.txt\", \"a\") as file:\n    file.write(\"Hello, again!\")\n</code></pre> <p>In the example above, we open the file <code>example.txt</code> in append mode and write the text \"Hello, again!\" to the file.</p>"},{"location":"2-scripting/python/7-file-io/#working-with-csv-files","title":"Working with CSV Files","text":"<p>Python has a built-in module called <code>csv</code> that allows you to read and write CSV files.</p> <pre><code># Example\nimport csv\n\nwith open(\"example.csv\", \"r\") as file:\n    reader = csv.reader(file)\n    for row in reader:\n        print(row)\n</code></pre> <p>In the example above, we use the <code>csv</code> module to read the contents of a CSV file called <code>example.csv</code> and print each row to the console.</p> <p>You can also write to CSV files using the <code>csv.writer</code> class.</p> <pre><code># Example\nimport csv\n\nwith open(\"example.csv\", \"w\") as file:\n    writer = csv.writer(file)\n    writer.writerow\n    writer.writerow([\"Name\", \"Age\"])\n    writer.writerow([\"Alice\", 25])\n    writer.writerow([\"Bob\", 30])\n</code></pre> <p>In the example above, we use the <code>csv.writer</code> class to write data to a CSV file called <code>example.csv</code>. We first write the column headers, and then write the data for each row.</p>"},{"location":"2-scripting/python/7-file-io/#other-file-formats","title":"Other File Formats","text":"<p>Python has built-in support for working with other file formats such as JSON, XML, and more. You can use third-party libraries to work with these file formats as well.</p> <pre><code># Example\nimport json\n\ndata = {\n    \"name\": \"Alice\",\n    \"age\": 25\n}\n\nwith open(\"example.json\", \"w\") as file:\n    json.dump(data, file)\n</code></pre> <p>In the example above, we use the <code>json</code> module to write a Python dictionary to a JSON file called <code>example.json</code>.</p>"},{"location":"2-scripting/python/8-exception-handling/","title":"Exception Handling","text":"<p>In Python, exceptions are used to handle errors and other exceptional events. When an error occurs, Python raises an exception, which can be caught and handled by the programmer. This allows you to write code that gracefully handles errors and prevents the program from crashing.</p>"},{"location":"2-scripting/python/8-exception-handling/#try-except-blocks","title":"Try-Except Blocks","text":"<p>You can use the <code>try</code> and <code>except</code> keywords to catch and handle exceptions in Python. The <code>try</code> block contains the code that may raise an exception, and the <code>except</code> block contains the code to handle the exception.</p> <pre><code># Syntax\ntry:\n    # code that may raise an exception\nexcept ExceptionType:\n    # code to handle the exception\n</code></pre> <pre><code># Example\ntry:\n    x = 10 / 0\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero\")\n</code></pre> <p>In the example above, we attempt to divide 10 by 0, which raises a <code>ZeroDivisionError</code> exception. We catch the exception using the <code>except</code> block and print an error message to the console.</p> <p>You can also catch multiple exceptions using a single <code>except</code> block.</p> <pre><code># Example\ntry:\n    x = 10 / 0\nexcept (ZeroDivisionError, ValueError):\n    print(\"Error: Division by zero or invalid value\")\n</code></pre> <p>In the example above, we catch both <code>ZeroDivisionError</code> and <code>ValueError</code> exceptions using a single <code>except</code> block.</p>"},{"location":"2-scripting/python/8-exception-handling/#finally-block","title":"Finally Block","text":"<p>You can use the <code>finally</code> block to execute code that should always run, regardless of whether an exception is raised or not. This is useful for releasing resources or cleaning up after an operation.</p> <pre><code># Syntax\ntry:\n    # code that may raise an exception\nexcept ExceptionType:\n    # code to handle the exception\nfinally:\n    # code that always runs\n</code></pre> <pre><code># Example\ntry:\n    file = open(\"example.txt\", \"r\")\n    content = file.read()\nexcept FileNotFoundError:\n    print(\"Error: File not found\")\nfinally:\n    file.close()\n</code></pre> <p>In the example above, we attempt to open and read the contents of a file. If the file is not found, a <code>FileNotFoundError</code> exception is raised, and we print an error message to the console. The <code>finally</code> block ensures that the file is closed, regardless of whether an exception is raised or not.</p>"},{"location":"2-scripting/python/8-exception-handling/#raising-exceptions","title":"Raising Exceptions","text":"<p>You can raise exceptions using the <code>raise</code> keyword. This allows you to signal that an error has occurred and provide information about the error.</p> <pre><code># Syntax\nraise ExceptionType(\"error message\")\n</code></pre> <pre><code># Example\ndef divide(x, y):\n    if y == 0:\n        raise ZeroDivisionError(\"Division by zero\")\n    return x / y\n\ntry:\n    result = divide(10, 0)\nexcept ZeroDivisionError as e:\n    print(\"Error:\", e)\n</code></pre> <p>In the example above, we define a function called <code>divide</code> that raises a <code>ZeroDivisionError</code> exception if the second argument is 0. We then call the function and catch the exception using the <code>except</code> block.</p>"},{"location":"2-scripting/python/8-exception-handling/#custom-exceptions","title":"Custom Exceptions","text":"<p>You can create your own custom exceptions by defining a new class that inherits from the <code>Exception</code> class.</p> <pre><code># Example\nclass CustomError(Exception):\n    pass\n\ntry:\n    raise CustomError(\"An error occurred\")\nexcept CustomError as e:\n    print(\"Error:\", e)\n</code></pre> <p>In the example above, we define a new class called <code>CustomError</code> that inherits from the <code>Exception</code> class. We then raise an instance of the <code>CustomError</code> class and catch it using the <code>except</code> block.</p>"},{"location":"2-scripting/python/8-exception-handling/#common-exceptions-in-python","title":"Common Exceptions in Python","text":"<p>Python has a wide range of built-in exceptions that are raised for various error conditions. Some of the most commonly used exceptions include:</p> <ul> <li><code>ZeroDivisionError</code>: Raised when division or modulo by zero is encountered.</li> <li><code>ValueError</code>: Raised when a function receives an argument of the correct type but an inappropriate value.</li> <li><code>TypeError</code>: Raised when an operation or function is applied to an object of inappropriate type.</li> <li><code>FileNotFoundError</code>: Raised when a file or directory is requested but cannot be found.</li> <li><code>KeyError</code>: Raised when a dictionary key is not found.</li> <li><code>IndexError</code>: Raised when a sequence subscript is out of range.</li> <li><code>NameError</code>: Raised when a local or global name is not found.</li> <li><code>ImportError</code>: Raised when an import statement fails to find the module definition.</li> <li><code>SyntaxError</code>: Raised when the parser encounters a syntax error.</li> <li><code>IndentationError</code>: Raised when the indentation is incorrect.</li> <li><code>RuntimeError</code>: Raised when an error is detected that doesn't fall into any of the other categories.</li> </ul>"},{"location":"2-scripting/python/9-oops/","title":"Object Oriented Programming (OOP)","text":"<p>Object-oriented programming (OOP) is a programming paradigm that uses objects and classes to design and build applications. It is based on the concept of objects, which can contain data in the form of fields (attributes or properties), and code in the form of procedures (methods or functions).</p>"},{"location":"2-scripting/python/9-oops/#classes-and-objects","title":"Classes and Objects","text":"<p>A class is a blueprint for creating objects. It defines the properties and behaviors of the objects that will be created from it. An object is an instance of a class, and it can be used to access the properties and behaviors defined by the class.</p> <pre><code># Syntax\nclass ClassName:\n    # class body\n    # code block\n</code></pre> <pre><code># Example\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def greet(self):\n        print(f\"Hello, my name is {self.name} and I am {self.age} years old\")\n</code></pre> <p>In the example above, we define a class called <code>Person</code> with two attributes <code>name</code> and <code>age</code>, and a method <code>greet</code> that prints a greeting message using the values of the attributes.</p>"},{"location":"2-scripting/python/9-oops/#creating-objects","title":"Creating Objects","text":"<p>You can create objects from a class using the class name followed by parentheses. You can then access the attributes and methods of the object using the dot operator.</p> <pre><code># Syntax\nobject_name = ClassName(arguments)\n</code></pre> <pre><code># Example\nperson1 = Person(\"Alice\", 25)\nperson1.greet()  # Output: Hello, my name is Alice and I am 25 years old\n</code></pre> <p>In the example above, we create an object called <code>person1</code> from the <code>Person</code> class and call the <code>greet</code> method to print a greeting message.</p>"},{"location":"2-scripting/python/9-oops/#constructors-and-destructors","title":"Constructors and Destructors","text":"<p>A constructor is a special method that is called when an object is created. It is used to initialize the attributes of the object. In Python, the constructor method is called <code>__init__</code>.</p> <pre><code># Syntax\ndef __init__(self, parameters):\n    # constructor body\n    # code block\n</code></pre> <pre><code># Example\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n</code></pre> <p>In the example above, we define a constructor method that takes two parameters <code>name</code> and <code>age</code> and initializes the attributes of the object.</p> <p>A destructor is a special method that is called when an object is destroyed. It is used to perform cleanup operations before the object is removed from memory. In Python, the destructor method is called <code>__del__</code>.</p> <pre><code># Syntax\ndef __del__(self):\n    # destructor body\n    # code block\n</code></pre> <pre><code># Example\nclass Person:\n    def __del__(self):\n        print(\"Object destroyed\")\n</code></pre> <p>In the example above, we define a destructor method that prints a message when the object is destroyed.</p>"},{"location":"2-scripting/python/9-oops/#inheritance","title":"Inheritance","text":"<p>Inheritance is a mechanism that allows a class to inherit properties and behaviors from another class. The class that inherits from another class is called a subclass, and the class that is inherited from is called a superclass.</p> <pre><code># Syntax\nclass SubclassName(SuperclassName):\n    # class body\n    # code block\n</code></pre> <pre><code># Example\nclass Student(Person):\n    def __init__(self, name, age, grade):\n        super().__init__(name, age)\n        self.grade = grade\n\n    def study(self):\n        print(f\"{self.name} is studying\")\n</code></pre> <p>In the example above, we define a subclass called <code>Student</code> that inherits from the <code>Person</code> class. The <code>Student</code> class has an additional attribute <code>grade</code> and a method <code>study</code>.</p>"},{"location":"2-scripting/python/9-oops/#method-overriding","title":"Method Overriding","text":"<p>Method overriding is a mechanism that allows a subclass to provide a specific implementation of a method that is already defined in its superclass. This allows you to customize the behavior of the method for the subclass.</p> <pre><code># Example\nclass Student(Person):\n    def greet(self):\n        print(f\"Hello, my name is {self.name} and I am a student\")\n</code></pre> <p>In the example above, we define a subclass called <code>Student</code> that overrides the <code>greet</code> method of the <code>Person</code> class to provide a different greeting message.</p>"},{"location":"2-scripting/python/9-oops/#encapsulation","title":"Encapsulation","text":"<p>Encapsulation is a mechanism that restricts direct access to some of the object's components. It prevents the accidental modification of data and allows the object to control its state and maintain its integrity.</p> <p>In Python, encapsulation is achieved by using private attributes and methods, which are denoted by a leading double underscore <code>__</code>.</p> <pre><code># Example\nclass Person:\n    def __init__(self, name, age):\n        self.__name = name\n        self.__age = age\n\n    def get_name(self):\n        return self.__name\n\n    def set_name(self, name):\n        self.__name = name\n</code></pre> <p>In the example above, we define a class called <code>Person</code> with private attributes <code>__name</code> and <code>__age</code>, and methods <code>get_name</code> and <code>set_name</code> to access and modify the attributes.</p>"},{"location":"2-scripting/python/9-oops/#polymorphism","title":"Polymorphism","text":"<p>Polymorphism is a mechanism that allows objects of different classes to be treated as objects of a common superclass. This allows you to write code that can work with objects of different types and classes.</p> <pre><code># Example\nclass Dog:\n    def speak(self):\n        print(\"Woof!\")\n\nclass Cat:\n    def speak(self):\n        print(\"Meow!\")\n\ndef make_sound(animal):\n    animal.speak()\n\ndog = Dog()\ncat = Cat()\n\nmake_sound(dog)  # Output: Woof!\nmake_sound(cat)  # Output: Meow!\n</code></pre> <p>In the example above, we define two classes <code>Dog</code> and <code>Cat</code> with a method <code>speak</code>, and a function <code>make_sound</code> that takes an object of any class with a <code>speak</code> method and calls the method.</p>"},{"location":"2-scripting/python/9-oops/#abstract-classes-and-interfaces","title":"Abstract Classes and Interfaces","text":"<p>An abstract class is a class that cannot be instantiated and is used to define methods that must be implemented by its subclasses. An interface is a collection of abstract methods that define a contract for the behavior of a class.</p> <p>In Python, abstract classes and interfaces can be defined using the <code>abc</code> module.</p> <pre><code># Example\nfrom abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\n    @abstractmethod\n    def perimeter(self):\n        pass\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * self.radius ** 2\n\n    def perimeter(self):\n        return 2 * 3.14 * self.radius\n</code></pre> <p>In the example above, we define an abstract class <code>Shape</code> with abstract methods <code>area</code> and <code>perimeter</code>, and a subclass <code>Circle</code> that implements the methods.</p>"},{"location":"3-version-control/0-version-control/","title":"Version Control","text":""},{"location":"3-version-control/0-version-control/#what-is-version-control","title":"What is Version Control?","text":"<p>Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later. It allows you to revert files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more.</p>"},{"location":"3-version-control/0-version-control/#without-version-control","title":"Without Version Control","text":"<p>Imagine you're working on a project, and you've just made a significant change to the code. You're not sure if it's the right approach, but you want to experiment with it. You make a copy of the entire project folder and start making changes. After a few days, you realize that the new approach isn't working as expected. You want to revert to the previous version, but you've made so many changes that it's hard to keep track of everything. You're now stuck with a mess of files and folders, and you're not sure how to proceed.</p> <p>Similarly, if you're working with a team, you might run into conflicts when multiple people are working on the same file. You might accidentally overwrite someone else's changes, or someone else might overwrite yours. It's hard to keep track of who made what changes and when.</p> <p>This is where version control comes in. Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later. It allows you to revert files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more.</p>"},{"location":"3-version-control/0-version-control/#why-version-control","title":"Why Version Control?","text":"<p>Version control is important because it allows you to:</p> <ul> <li>Collaborate with others</li> <li>Keep track of changes</li> <li>Revert to previous versions</li> <li>Identify who, when, and why made the changes</li> <li>Experiment with new features without breaking the existing code</li> <li>Backup your code</li> <li>Share your code with others</li> <li>Work on multiple features at the same time</li> </ul>"},{"location":"3-version-control/0-version-control/#popular-version-control-systems","title":"Popular Version Control Systems","text":"<p>Some of the popular version control systems include:</p> <ul> <li>Git: A distributed version control system that is widely used for open-source and commercial software development. It is designed to handle everything from small to very large projects with speed and efficiency.</li> <li>Others: Other version control systems include Subversion, Mercurial, Bazaar, and Perforce.</li> </ul>"},{"location":"3-version-control/git/0-introduction/","title":"Introduction","text":"<p>Git is a distributed version control system that is widely used for tracking changes in source code during software development. It allows multiple developers to work on the same project simultaneously and provides features such as branching, merging, and remote repositories.</p> <p>Git thinks of its data more like a set of snapshots of a miniature filesystem. Every time you commit, or save the state of your project in Git, it basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot. To be efficient, if files have not changed, Git doesn\u2019t store the file again, just a link to the previous identical file it has already stored. Git thinks about its data more like a stream of snapshots.</p>"},{"location":"3-version-control/git/0-introduction/#why-git","title":"Why Git?","text":"<p>Here are some reasons why Git is widely used for version control:</p> <ul> <li> <p>Distributed: Git is a distributed version control system, meaning that every developer has a complete copy of the project history. This allows for faster operations and better collaboration.</p> </li> <li> <p>Version Control: Git tracks every change made to your project files, allowing you to revert to previous versions if needed. This is a lifesaver if you accidentally break something or want to compare different approaches.</p> </li> <li> <p>Collaboration:  Multiple developers can work on the same project simultaneously. Git efficiently merges changes from different people, preventing conflicts and ensuring a smooth development process.</p> </li> <li> <p>Branching:  Git's branching system lets you experiment with new features or bug fixes without affecting the main project code.  You can create isolated branches, work on them independently, and then merge them back into the main branch when ready.</p> </li> <li> <p>Offline Workflow:  Most Git operations work locally on your machine. This means you can make commits and track changes even without an internet connection. Once connected, you can push your local commits to a remote repository for sharing and collaboration.</p> </li> <li> <p>Security and Data Integrity: Git uses checksums to ensure data integrity. Every change is cryptographically recorded, making it nearly impossible to lose or corrupt information.</p> </li> <li> <p>Widely Adopted:  Git is the industry standard for version control, especially in software development.  Having Git skills is a valuable asset for programmers and anyone working on collaborative projects.</p> </li> </ul>"},{"location":"3-version-control/git/0-introduction/#stages-of-git","title":"Stages of Git","text":"<ul> <li>Working Directory: The working directory is the directory where you are currently working. It contains the actual files and folders of your project.</li> <li>Staging Area: The staging area is a file that stores information about what will go into your next commit. It's a simple file, maintained by Git, that stores the information about what you want to include in the next commit.</li> <li>Local Repository: The local repository is the .git directory that is created when you run <code>git init</code> on a new project. It contains all the changes and history of your project.</li> <li>Remote Repository: The remote repository is a repository that is hosted on a server. It can be accessed by multiple developers, allowing them to collaborate on a project. Remotes are typically used to share code, track changes, and synchronize work between team members.</li> </ul>"},{"location":"3-version-control/git/0-introduction/#flow","title":"Flow","text":"<ul> <li>To start with, you have a working directory that contains the actual files and folders of your project. This can be a new project or an existing one that you want to start tracking with Git. You can initialize a new Git repository in the current directory using the <code>git init</code> command or clone an existing repository using the <code>git clone</code> command.</li> <li>Additionally, you can checkout the code to a new or existing branch to work on a new feature or bug fix. This is done using the <code>git checkout</code> command.</li> <li>Once you make the changes you add the files and folders to the staging area. This is done using the <code>git add</code> command. The staging area is a file that stores information about what will go into your next commit.</li> <li>When you are ready to save the changes, you commit them to the local repository using the <code>git commit</code> command. This creates a snapshot of the changes and stores it in the local repository.</li> <li>To share your changes with others, you can push them to a remote repository using the <code>git push</code> command. This allows other developers to access your changes and collaborate on the project.</li> <li>Similarly, you can pull changes from a remote repository using the <code>git pull</code> command. This allows you to fetch and merge changes from the remote repository into your local repository.</li> </ul>"},{"location":"3-version-control/git/0-introduction/#popular-git-services","title":"Popular Git Services","text":"<p>Some of the popular Git services include:</p> <ul> <li> <p>GitHub: A web-based platform for version control and collaboration. It offers features such as bug tracking, task management, and wikis for every project.</p> </li> <li> <p>Bitbucket: A web-based version control repository hosting service owned by Atlassian, for source code and development projects that use either Mercurial or Git revision control systems.</p> </li> <li> <p>AWS CodeCommit: A fully-managed source control service that makes it easy for companies to host secure and highly scalable private Git repositories.</p> </li> <li> <p>Azure Repos: A set of version control tools that you can use to manage your code. It supports both centralized and distributed version control systems and is fully integrated with Azure DevOps.</p> </li> </ul>"},{"location":"3-version-control/git/1-getting-started/","title":"Getting Started","text":""},{"location":"3-version-control/git/1-getting-started/#installing-git","title":"Installing Git","text":"<p>Download and install Git on your system from Git.</p>"},{"location":"3-version-control/git/2-basics/","title":"Basics","text":""},{"location":"3-version-control/git/2-basics/#creating-a-repository","title":"Creating a Repository","text":"<p>To create a new Git repository, navigate to the project directory and run the following command:</p> <pre><code>git init\n</code></pre> <p>This command initializes a new Git repository in the current directory.</p>"},{"location":"3-version-control/git/2-basics/#cloning-a-repository","title":"Cloning a Repository","text":"<p>To clone an existing Git repository, use the following command:</p> <pre><code>git clone &lt;repository-url&gt;\n</code></pre> <p>Replace <code>&lt;repository-url&gt;</code> with the URL of the repository you want to clone.</p>"},{"location":"3-version-control/git/2-basics/#checking-the-status","title":"Checking the Status","text":"<p>To check the status of your repository, use the following command:</p> <pre><code>git status\n</code></pre> <p>This command shows you the current status of your repository, including any changes that need to be committed or staged.</p>"},{"location":"3-version-control/git/2-basics/#staging-changes","title":"Staging Changes","text":"<p>To stage changes for a commit, use the following command:</p> <pre><code>git add &lt;file-name&gt;\n</code></pre> <p>To stage all changes, use the following command:</p> <pre><code>git add .\n</code></pre>"},{"location":"3-version-control/git/2-basics/#unstaging-changes","title":"Unstaging Changes","text":"<p>To unstage changes, use the following command:</p> <pre><code>git restore --staged &lt;file&gt;\n</code></pre> <p>To unstage all changes, use the following command:</p> <pre><code>git reset HEAD .\n</code></pre>"},{"location":"3-version-control/git/2-basics/#discarding-changes","title":"Discarding Changes","text":"<p>To discard changes in your working directory, use the following command:</p> <pre><code>git restore &lt;file&gt;\n</code></pre>"},{"location":"3-version-control/git/2-basics/#viewing-changes","title":"Viewing Changes","text":"<p>To view the changes that have been staged, use the following command:</p> <pre><code>git diff --staged\n</code></pre> <p>To view the changes that have not been staged, use the following command:</p> <pre><code>git diff\n</code></pre>"},{"location":"3-version-control/git/2-basics/#committing-changes","title":"Committing Changes","text":"<p>To commit staged changes, use the following command:</p> <pre><code>git commit -m \"commit message\"\n</code></pre> <p>Replace <code>\"commit message\"</code> with a brief description of the changes you are committing.</p>"},{"location":"3-version-control/git/2-basics/#viewing-commit-history","title":"Viewing Commit History","text":"<p>To view the commit history, use the following command:</p> <pre><code>git log\n</code></pre> <p>To view a summarized version of the commit history, use the following command:</p> <pre><code>git log --oneline\n</code></pre>"},{"location":"3-version-control/git/2-basics/#ignoring-files","title":"Ignoring Files","text":"<p>To ignore files in your repository, create a file named <code>.gitignore</code> in the root directory of your project and add the names of the files or directories you want to ignore. For example:</p> <pre><code># Ignore .DS_Store files\n.DS_Store\n\n# Ignore log files\n*.log\n\n# Ignore node_modules directory\nnode_modules/\n</code></pre> <p>This file tells Git which files or directories to ignore when tracking changes.</p>"},{"location":"3-version-control/git/3-remotes/","title":"Working with Remotes","text":""},{"location":"3-version-control/git/3-remotes/#what-are-remotes","title":"What are Remotes?","text":"<p>In Git, a remote is a common repository that is hosted on a server. It can be accessed by multiple developers, allowing them to collaborate on a project. Remotes are typically used to share code, track changes, and synchronize work between team members.</p> <p>When you clone a repository, Git automatically creates a remote called <code>origin</code> that points to the original repository. This allows you to fetch, pull, and push changes to and from the remote repository.</p>"},{"location":"3-version-control/git/3-remotes/#adding-a-remote","title":"Adding a Remote","text":"<p>To add a remote to your local repository, use the following command:</p> <pre><code>git remote add &lt;name&gt; &lt;url&gt;\n</code></pre> <p>Replace <code>&lt;name&gt;</code> with a name for the remote (e.g., <code>origin</code>, <code>upstream</code>, <code>myfork</code>) and <code>&lt;url&gt;</code> with the URL of the remote repository.</p> <p>For example, to add a remote named <code>upstream</code> that points to a repository on GitHub, you would use the following command:</p> <pre><code>git remote add upstream\n</code></pre>"},{"location":"3-version-control/git/3-remotes/#pulling-from-remotes","title":"Pulling from Remotes","text":"<p>To pull changes from a remote repository, use the following command:</p> <pre><code>git pull &lt;remote&gt; &lt;branch&gt;\n</code></pre> <p>Replace <code>&lt;remote&gt;</code> with the name of the remote repository (e.g., <code>origin</code>, <code>upstream</code>) and <code>&lt;branch&gt;</code> with the name of the branch you want to pull from.</p> <p>For example, to pull changes from the <code>master</code> branch of the <code>origin</code> remote, you would use the following command:</p> <pre><code>git pull origin master\n</code></pre> <p>You can just use <code>git pull</code> to pull changes from the remote repository that your current branch is tracking.</p>"},{"location":"3-version-control/git/3-remotes/#pushing-to-remotes","title":"Pushing to Remotes","text":"<p>To push changes to a remote repository, use the following command:</p> <pre><code>git push &lt;remote&gt; &lt;branch&gt;\n</code></pre> <p>Replace <code>&lt;remote&gt;</code> with the name of the remote repository (e.g., <code>origin</code>, <code>upstream</code>) and <code>&lt;branch&gt;</code> with the name of the branch you want to push to.</p> <p>For example, to push changes to the <code>master</code> branch of the <code>origin</code> remote, you would use the following command:</p> <pre><code>git push origin master\n</code></pre> <p>You can just use <code>git push</code> to push changes to the remote repository that your current branch is tracking.</p>"},{"location":"3-version-control/git/4-branching/","title":"Branching","text":"<p>Branching is a powerful feature of Git that allows you to work on new features or bug fixes without affecting the main project code. It enables you to create isolated branches, work on them independently, and then merge them back into the main branch when ready.</p>"},{"location":"3-version-control/git/4-branching/#mainmaster-branch","title":"Main/Master Branch","text":"<p>The <code>main</code> or <code>master</code> branch is the default branch in Git. It typically represents the main project code and is the branch that is deployed to production.</p> <p>When working on new features or bug fixes, it's common practice to create separate branches from the <code>main</code> or <code>master</code> branch, work on them, and then merge them back into the <code>main</code> or <code>master</code> branch when ready.</p>"},{"location":"3-version-control/git/4-branching/#branching-commands","title":"Branching Commands","text":""},{"location":"3-version-control/git/4-branching/#listing-branches","title":"Listing Branches","text":"<p>To list all the branches in a repository, use the following command:</p> <pre><code>git branch\n</code></pre>"},{"location":"3-version-control/git/4-branching/#creating-a-branch","title":"Creating a Branch","text":"<p>To create a new branch, use the following command:</p> <pre><code>git branch &lt;branch-name&gt;\n</code></pre> <p>Replace <code>&lt;branch-name&gt;</code> with the name of the new branch.</p> <p>For example, to create a branch named <code>feature-1</code>, you would use the following command:</p> <pre><code>git branch feature-1\n</code></pre>"},{"location":"3-version-control/git/4-branching/#switching-branches","title":"Switching Branches","text":"<p>To switch to a different branch, use the following command:</p> <pre><code>git checkout &lt;branch-name&gt;\n</code></pre> <p>Replace <code>&lt;branch-name&gt;</code> with the name of the branch you want to switch to.</p> <p>For example, to switch to the <code>feature-1</code> branch, you would use the following command:</p> <pre><code>git checkout feature-1\n</code></pre>"},{"location":"3-version-control/git/4-branching/#creating-and-switching-branches","title":"Creating and Switching Branches","text":"<p>To create and switch to a new branch in one step, use the following command:</p> <pre><code>git checkout -b &lt;branch-name&gt;\n</code></pre> <p>Replace <code>&lt;branch-name&gt;</code> with the name of the new branch.</p> <p>For example, to create and switch to a branch named <code>feature-2</code>, you would use the following command:</p> <pre><code>git checkout -b feature-2\n</code></pre>"},{"location":"3-version-control/git/4-branching/#merging-branches","title":"Merging Branches","text":"<p>To merge changes from one branch into another, use the following command:</p> <pre><code>git merge &lt;branch-name&gt;\n</code></pre> <p>Replace <code>&lt;branch-name&gt;</code> with the name of the branch you want to merge into the current branch.</p> <p>For example, to merge changes from the <code>feature-1</code> branch into the <code>master</code> branch, you would use the following command:</p> <pre><code>git checkout master\ngit merge feature-1\n</code></pre>"},{"location":"3-version-control/git/4-branching/#branching-workflow","title":"Branching Workflow","text":"<p><code>HEAD</code> is a reference to the currently checked out commit or branch in Git. It is a pointer that points to the current branch or commit.</p> <p>To See the visualization of the git branching workflow, click here and follow below sequence of events.</p> <ul> <li> <p>Consider a repository with a <code>master</code> branch and one commit as the starting point of the project. <code>HEAD</code> points to the <code>master</code> branch.</p> </li> <li> <p>To work on a new feature, create a new branch <code>feature</code> from the <code>master</code> branch using the command <code>git branch feature</code>.</p> </li> <li> <p>Commits are made to the <code>feature</code> branch to implement the new feature as you progress with the development using the command <code>git commit -m \"message\"</code>.</p> </li> <li> <p>You found out that there is a bug in the <code>master</code> branch that needs to be fixed. In order not to mix the bug fix with the new feature, create a new branch <code>bug-fix</code> from the <code>master</code> branch.</p> </li> <li>Checkout the <code>master</code> branch using the command <code>git checkout master</code>.</li> <li> <p>Create a new branch <code>bug-fix</code> from the <code>master</code> branch and checkout using the command <code>git checkout -b bug-fix</code>.</p> </li> <li> <p>Commits are made to the <code>bug-fix</code> branch to fix the bug using the command <code>git commit -m \"message\"</code>.</p> </li> <li> <p>Once the bug is fixed, merge the <code>bug-fix</code> branch into the <code>master</code> branch.</p> </li> <li>Checkout the <code>master</code> branch using the command <code>git checkout master</code>.</li> <li> <p>Merge the <code>bug-fix</code> branch into the <code>master</code> branch using the command <code>git merge bug-fix</code>.</p> </li> <li> <p>At this stage if your feature changes are complete, to include the new feature in the <code>master</code> branch, merge the <code>feature</code> branch into the <code>master</code> branch</p> </li> <li>Checkout the <code>master</code> branch using the command <code>git checkout master</code>.</li> <li> <p>Merge the <code>feature</code> branch into the <code>master</code> branch using the command <code>git merge feature</code>.</p> </li> <li> <p>However, lets consider a case where you need to make more changes and also require bugfix changes in your feature branch to test the changes. In this case, merge the <code>master</code> branch into the <code>feature</code> branch.</p> </li> <li>Checkout the <code>feature</code> branch using the command <code>git checkout feature</code>.</li> <li> <p>Merge the <code>master</code> branch into the <code>feature</code> branch using the command <code>git merge master</code>. This will include the bug fix changes in the <code>feature</code> branch.</p> </li> <li> <p>Make further changes to the <code>feature</code> branch and commit the changes using the command <code>git commit -m \"message\"</code>.</p> </li> <li> <p>Once the feature is complete, merge the <code>feature</code> branch into the <code>master</code> branch.</p> </li> <li>Checkout the <code>master</code> branch using the command <code>git checkout master</code>.</li> <li> <p>Merge the <code>feature</code> branch into the <code>master</code> branch using the command <code>git merge feature</code>.</p> </li> <li> <p>Finally, delete the <code>feature</code> branch using the command <code>git branch -d feature</code>.</p> </li> <li> <p>The <code>master</code> branch now contains the new feature and the bug fix changes.</p> </li> </ul> <p>This is a basic branching workflow in Git. It allows you to work on new features and bug fixes independently, and then merge them back into the main branch when ready.</p>"},{"location":"3-version-control/git/9-appendix/","title":"GIT Commands","text":""},{"location":"3-version-control/git/9-appendix/#basic-commands","title":"Basic Commands","text":"Command Description <code>git init</code> Initializes a new Git repository in the current directory <code>git clone &lt;repository-url&gt;</code> Clones an existing Git repository. <code>git status</code> Shows the current status of the repository. <code>git add &lt;file-name&gt;</code> Stages changes for a commit. <code>git add .</code> Stages all changes for a commit. <code>git restore --staged &lt;file&gt;</code> Unstages changes. <code>git reset HEAD .</code> Unstages all changes. <code>git restore &lt;file&gt;</code> Discards changes in the working directory. <code>git diff --staged</code> Shows the changes that have been staged. <code>git diff</code> Shows the changes that have not been staged. <code>git commit -m \"message\"</code> Commits staged changes with a message. <code>git log</code> Shows the commit history. <code>git log --oneline</code> Shows a summarized version of the commit history."},{"location":"3-version-control/git/9-appendix/#remote-commands","title":"Remote Commands","text":"Command Description <code>git remote</code> Lists the remotes for the current repository. <code>git remote add &lt;name&gt; &lt;url&gt;</code> Adds a new remote to the current repository. <code>git pull &lt;remote&gt; &lt;branch&gt;</code> Pulls changes from a remote repository. <code>git push &lt;remote&gt; &lt;branch&gt;</code> Pushes changes to a remote repository."},{"location":"3-version-control/git/9-appendix/#branching-commands","title":"Branching Commands","text":"Command Description <code>git branch</code> Lists all the branches in the repository. <code>git branch &lt;branch-name&gt;</code> Creates a new branch. <code>git checkout &lt;branch-name&gt;</code> Switches to a different branch. <code>git checkout -b &lt;branch-name&gt;</code> Creates and switches to a new branch. <code>git merge &lt;branch-name&gt;</code> Merges changes from one branch into another."},{"location":"4-cloud-basics/AWS/1-introduction/","title":"Introduction","text":""},{"location":"5-ci-cd/1-introduction/","title":"Introduction","text":""},{"location":"6-containerization/1-introduction/","title":"Introduction","text":""},{"location":"6-containerization/1-introduction/#what","title":"What?","text":"<ul> <li>Imagine Docker as a shipping container for software. Just as shipping containers can hold anything you want and be moved around easily without worrying about what's inside, Docker containers can hold your software, complete with all the parts it needs to run. This means you can move your software easily from your computer to a server, or anywhere else, and it will work just the same.</li> </ul>"},{"location":"6-containerization/1-introduction/#why","title":"Why?","text":"<ul> <li>Consistency: Ensures that your application runs the same way everywhere, from development to production.</li> <li>Efficiency: Shares the OS kernel, making it lighter and faster than traditional virtual machines.</li> <li>Isolation: Keeps applications separate from each other, preventing conflicts.</li> <li>Portability: Allows you to run your applications on any machine that supports Docker without modification.</li> <li>Scalability: Makes it easier to scale your applications up or down in response to demand.</li> <li>Speed: Reduces the time it takes to set up new development environments and to deploy applications.</li> </ul>"},{"location":"6-containerization/1-introduction/#how","title":"How?","text":"<ul> <li>Installing Docker:<ol> <li>Download and install Docker Desktop for your operating system (Windows, macOS, Linux).</li> <li>Verify installation by running <code>docker --version</code> in your terminal or command prompt.</li> </ol> </li> <li>Understanding Docker Components:<ul> <li>Dockerfile: A text file with instructions to build a Docker image. It includes the base image to use, software to install, and commands to run.</li> <li>Docker Images: Read-only templates used to create containers. Images include everything needed to run an application - the code, a runtime, libraries, environment variables, and config files.</li> <li>Docker Containers: Running instances of Docker images. Containers are isolated environments that contain everything an application needs to run.</li> <li>Docker Hub: A registry where you can share and download Docker images. Similar to GitHub but for Docker images.</li> </ul> </li> </ul>"},{"location":"6-containerization/2-architecture/","title":"Architecture","text":"<p>Think of Docker like a magical shipping service for your software. This service has three main parts that make sure your software gets where it needs to go, safely and efficiently.</p> <p> Source : GeeksforGeeks</p>"},{"location":"6-containerization/2-architecture/#docker-client-the-order-taker","title":"Docker Client (The Order Taker)","text":"<ul> <li>What It Does: Just like when you order a pizza, you tell the Docker Client what you want Docker to do (like creating a new container for your app).</li> <li>How It Works: You give commands (like <code>docker run</code>), and it's like calling the pizza place to place your order. The Docker Client makes sure your request gets to the right place, which is the Docker Daemon.</li> </ul>"},{"location":"6-containerization/2-architecture/#docker-daemon-the-kitchen","title":"Docker Daemon (The Kitchen):","text":"<ul> <li>What It Does: This is where the magic happens. The Docker Daemon prepares everything you need. If Docker was a restaurant, the Daemon would be the kitchen where your order (container) is prepared.</li> <li>How It Works: It takes your order from the Docker Client, gets the ingredients (Docker images), and cooks up your order (runs your container). It makes sure your software runs exactly how you want it.</li> </ul>"},{"location":"6-containerization/2-architecture/#docker-registry-the-food-storage","title":"Docker Registry (The Food Storage):","text":"<ul> <li>What It Does: Imagine a giant fridge and pantry where all the ingredients (images) are kept. This is the Docker Registry, a place where images are stored.</li> <li>How It Works: Before the Docker Daemon can cook your order, it needs ingredients. If it doesn't have them already, it goes shopping at the Docker Registry. You can use a big supermarket (Docker Hub) or your own private store.</li> </ul>"},{"location":"6-containerization/2-architecture/#simplified-overview","title":"Simplified Overview","text":"<ul> <li>You Place Your Order: You use the Docker Client to say, \"I want a container that runs my app.\"</li> <li>The Kitchen Prepares Your Order: The Docker Daemon checks if it has the right ingredients (images). If not, it gets them from the Registry. Then, it cooks up your container.</li> <li>Enjoy Your Dish: Your app runs inside the container just the way you wanted.</li> </ul> <p>In this simplified view, Docker ensures your software runs smoothly in its container, just like a well-prepared meal, no matter where you decide to enjoy it!</p>"},{"location":"6-containerization/3-magic-behind-docker/","title":"Magic behind Docker","text":"<p>Imagine Docker as a clever craftsman who uses the tools available in the Linux toolbox to build sophisticated, yet lightweight, containers that house your applications. Here's how Docker harnesses Linux's powers:</p>"},{"location":"6-containerization/3-magic-behind-docker/#1-namespaces-your-applications-private-room","title":"1. Namespaces: Your Application's Private Room","text":"<ul> <li>Linux's Use: Think of namespaces as creating private rooms in a big house. In each room, you can have your own mini-world, isolated from others, with its own rules, without interference.</li> <li>Docker's Use: Docker gives each container its own private room (namespace) where it can operate without bumping into others, ensuring that your applications don't clash with each other.</li> </ul>"},{"location":"6-containerization/3-magic-behind-docker/#2-control-groups-cgroups-the-fair-resource-manager","title":"2. Control Groups (cgroups): The Fair Resource Manager","text":"<ul> <li>Linux's Use: Imagine cgroups as a wise, fair manager in a factory, ensuring that every machine gets the right amount of resources (like power and materials) it needs to work effectively without hogging everything.</li> <li>Docker's Use: Docker employs this manager (cgroups) to evenly distribute system resources like memory and CPU among containers, preventing any single container from monopolizing resources.</li> </ul>"},{"location":"6-containerization/3-magic-behind-docker/#3-union-file-systems-the-efficient-storage-trick","title":"3. Union File Systems: The Efficient Storage Trick","text":"<ul> <li>Linux's Use: Union file systems are like building a toy from Lego blocks, where you can reuse common blocks (files) across many toys (containers) without needing a new set for each one, saving space and time.</li> <li>Docker's Use: Docker builds container images using this Lego block approach (UnionFS), making containers lightweight and quick to launch since they share common files and only need to add their unique layers.</li> </ul>"},{"location":"6-containerization/3-magic-behind-docker/#4-container-the-ultimate-packaging","title":"4. Container : The Ultimate Packaging","text":"<ul> <li>Linux's Use: This isn't just a Linux tool but Docker's genius in packaging. Imagine taking your complete workspace---desk, chair, computer, and personal items---encapsulating it into a portable bubble that can be set up anywhere instantly.</li> <li>Docker's Use: Docker wraps your application and all its necessities into a neat package (container), ensuring it can run anywhere Docker is, seamlessly, without fuss about the environment.</li> </ul>"},{"location":"7-iaas/ansible/0-index/","title":"Index","text":""},{"location":"7-iaas/ansible/0-index/#introduction-to-ansible","title":"Introduction to Ansible","text":"<ul> <li>What is Ansible?</li> <li>Why use Ansible?</li> <li>Ansible architecture</li> </ul>"},{"location":"7-iaas/ansible/0-index/#ansible-installation","title":"Ansible Installation","text":"<ul> <li>Installing Ansible on Linux</li> <li>Installing Ansible on Windows</li> <li>Verifying Ansible installation</li> </ul>"},{"location":"7-iaas/ansible/0-index/#ansible-inventory","title":"Ansible Inventory","text":"<ul> <li>Understanding Ansible inventory</li> <li>Creating inventory files</li> <li>Specifying hosts and groups</li> <li>Variables in inventory</li> </ul>"},{"location":"7-iaas/ansible/0-index/#ansible-playbooks","title":"Ansible Playbooks","text":"<ul> <li>Introduction to Ansible playbooks</li> <li>Writing your first playbook</li> <li>Tasks and modules</li> <li>Variables and facts</li> <li>Conditionals and loops</li> </ul>"},{"location":"7-iaas/ansible/0-index/#ansible-roles","title":"Ansible Roles","text":"<ul> <li>What are Ansible roles?</li> <li>Creating and organizing roles</li> <li>Role structure and main tasks</li> <li>Role variables and defaults</li> </ul>"},{"location":"7-iaas/ansible/0-index/#ansible-modules","title":"Ansible Modules","text":"<ul> <li>Common Ansible modules</li> <li>Using modules in playbooks</li> <li>Custom modules</li> </ul>"},{"location":"7-iaas/ansible/0-index/#ansible-vault","title":"Ansible Vault","text":"<ul> <li>Introduction to Ansible Vault</li> <li>Encrypting sensitive data</li> <li>Decrypting and using vaulted data</li> </ul>"},{"location":"7-iaas/ansible/0-index/#ansible-best-practices","title":"Ansible Best Practices","text":"<ul> <li>Structuring Ansible projects</li> <li>Using roles and playbooks effectively</li> <li>Error handling and debugging</li> <li>Security considerations</li> </ul>"},{"location":"7-iaas/ansible/0-index/#ansible-troubleshooting","title":"Ansible Troubleshooting","text":""},{"location":"7-iaas/ansible/1-introduction/","title":"Introduction","text":""},{"location":"7-iaas/ansible/1-introduction/#what-is-ansible","title":"What is Ansible?","text":"<p>Open-source automation tool for IT tasks: configuration management, application deployment, and orchestration. Simplifies complex tasks and streamlines IT operations.</p>"},{"location":"7-iaas/ansible/1-introduction/#why-use-ansible","title":"Why Use Ansible?","text":"<ul> <li>Simplicity: Uses YAML for playbook definitions, making it readable and easy to learn.</li> <li>Agentless: Operates over SSH or PowerShell, no agents to install on target systems.</li> <li>Flexibility: Manages both Unix-like and Windows systems.</li> <li>Idempotency: Ensures repeatable deployments and configurations without side effects.</li> </ul>"},{"location":"7-iaas/ansible/1-introduction/#ansible-architecture","title":"Ansible Architecture:","text":"<ul> <li>Control Node : The machine where Ansible is installed and runs playbooks.</li> <li>Managed Nodes : Targets of Ansible automation (servers, devices).</li> <li>Inventory: : Defines groups of managed nodes.</li> <li>Modules: Units of code Ansible executes. Playbooks call modules.</li> <li>Playbooks: YAML files that define automation jobs. Dictate how to perform tasks.</li> <li>Roles: Organize playbooks for reusable content.</li> <li>Tasks: Individual actions performed by playbooks.</li> <li>Facts: Information retrieved from managed nodes for use in playbooks.</li> <li>Handlers: Special tasks executed at the end of playbooks if notified by another task.</li> </ul>"},{"location":"7-iaas/ansible/1-introduction/#documentation-for-full-clarity","title":"Documentation for Full Clarity:","text":"<p>For comprehensive details, refer to the official Ansible Documentation</p>"},{"location":"7-iaas/ansible/2-installation/","title":"Initial Setup","text":""},{"location":"7-iaas/ansible/2-installation/#ansible-isntallation","title":"Ansible Isntallation","text":""},{"location":"7-iaas/ansible/2-installation/#macos","title":"macOS","text":"<ul> <li>Install Homebrew: <code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"</code></li> <li>Install Ansible: <code>brew update &amp;&amp; brew install ansible</code></li> </ul>"},{"location":"7-iaas/ansible/2-installation/#windows-wsl","title":"Windows (WSL)","text":"<ul> <li>Enable WSL, install a Linux distro from Microsoft Store (e.g., Ubuntu).</li> <li>Install Ansible: <code>sudo apt update &amp;&amp; sudo apt install ansible</code></li> </ul>"},{"location":"7-iaas/ansible/2-installation/#linux","title":"Linux","text":"<ul> <li>Debian/Ubuntu: <code>sudo apt update &amp;&amp; sudo apt install ansible</code></li> <li>Red Hat/CentOS: <code>sudo yum install epel-release &amp;&amp; sudo yum update &amp;&amp; sudo yum install ansible</code></li> <li>Fedora: <code>sudo dnf install ansible</code></li> </ul>"},{"location":"7-iaas/ansible/2-installation/#install-boto3-and-botocore","title":"Install Boto3 and Botocore","text":"<p>Boto3 is the Amazon Web Services (AWS) SDK for Python. It's required for Ansible modules to interact with AWS. <code>pip install boto3 botocore</code></p>"},{"location":"7-iaas/ansible/2-installation/#set-up-aws-credentials","title":"Set up AWS Credentials","text":"<p>Create an IAM user in AWS with programmatic access. Run aws configure and enter your AWS Access Key ID, Secret Access Key, default region, and output format.</p>"},{"location":"7-iaas/ansible/2-installation/#create-a-static-inventory-file-eg-hosts","title":"Create a Static Inventory File (e.g., hosts):","text":"<p>Add [local] and localhost ansible_connection=local to run tasks on your local machine.</p>"},{"location":"7-iaas/ansible/3-inventory/","title":"Inventory","text":""},{"location":"7-iaas/ansible/3-inventory/#what-is-inventory","title":"What is Inventory ?","text":"<p>Ansible Inventory: Ansible's inventory is like a phone book for your network, where you sort servers into groups for easy management, similar to how you might organize contacts by family or work. You can also give specific settings to groups or servers, just like assigning ringtones to contacts.</p> <p>There are two types of inventories in Ansible:</p> <ol> <li>Static Inventory: A manually created and maintained list of servers.</li> <li>Dynamic Inventory: Automatically updates and fetches server lists from external sources like cloud providers.</li> </ol> <p>The main difference is that static inventory is fixed until you change it, while dynamic inventory updates automatically based on the current state of your servers in the cloud or other environments.</p>"},{"location":"7-iaas/ansible/3-inventory/#why-to-create-an-inventory","title":"Why to create an Inventory ?","text":"<p>For instance, to verify the uptime of all your web servers grouped in your Ansible inventory, you can utilize the following ad-hoc command:</p> <pre><code>\nansible webservers -i hosts.ini -m command -a \"uptime\"\n</code></pre> <p>In this command:</p> <ul> <li><code>webservers</code> is the group name specified in your <code>hosts.ini</code> inventory file, representing all your web server nodes.</li> <li><code>uptime</code> is the command executed on each server within the <code>webservers</code> group to check how long the servers have been running.</li> </ul>"},{"location":"7-iaas/ansible/3-inventory/#how-to-create-an-inventory","title":"How to create an Inventory ?","text":"<p>Static Inventory File:</p> <p>Create an inventory file named <code>hosts.ini</code>:</p> <pre>hosts.ini<code>\n[webservers]\nweb1.example.com\nweb2.example.com\n\n[dbservers]\ndb1.example.com\n</code></pre> <p>Dynamic Inventory File: Please refer projects folder for this example.</p>"},{"location":"7-iaas/ansible/3-inventory/#commands","title":"Commands","text":"<ol> <li>List Inventory: <code>ansible-inventory --list</code></li> <li>Graph Inventory: <code>ansible-inventory --graph</code></li> <li>Show Host Details: <code>ansible-inventory --host &lt;hostname&gt;</code></li> <li>Limit to Specific Groups/Hosts: <code>ansible-inventory --list --limit &lt;group_or_host&gt;</code><ul> <li>Filters inventory to show specific groups or hosts.</li> </ul> </li> <li>Exclude Specific Groups/Hosts: <code>ansible-inventory --list --exclude &lt;group_or_host&gt;</code><ul> <li>Shows inventory excluding specified groups or hosts.</li> </ul> </li> </ol>"},{"location":"7-iaas/ansible/3-inventory/#assignments","title":"Assignments","text":"<p>Assignment 1: Create an Inventory File</p> <ul> <li>Create an inventory file that includes at least two groups: <code>app_servers</code> and <code>db_servers</code>.</li> <li>Add at least two hosts to each group.</li> <li>Assign a variable <code>ansible_user</code> to each group, with <code>app_servers</code> using <code>appadmin</code> and <code>db_servers</code> using <code>dbadmin</code>.</li> </ul> <p>Assignment 2: Execute a Ping Module</p> <ul> <li>Using the inventory file created, write an Ansible ad-hoc command to ping all hosts in the <code>app_servers</code> group.</li> </ul>"},{"location":"7-iaas/ansible/3-inventory/#interview-questions","title":"Interview Questions","text":"<ol> <li>What is an Ansible inventory, and why is it important?<ul> <li>An inventory file defines the hosts and groups of hosts upon which commands, modules, and tasks in a playbook operate. It is crucial for organizing managed nodes and defining where Ansible should perform its automation tasks.</li> </ul> </li> <li>How can you group hosts in an Ansible inventory file, and what are the advantages of grouping?<ul> <li>Hosts can be grouped under a named group in an inventory file for easier management, parallel execution across the group, and the ability to assign group-specific variables. This organization enhances readability and efficiency in playbook execution.</li> </ul> </li> <li>Explain the difference between static and dynamic inventory in Ansible.<ul> <li>A static inventory is defined in a file (like INI or YAML format) and does not change unless manually updated. A dynamic inventory pulls host information dynamically from external sources, such as cloud providers, making it suitable for environments where host configurations frequently change.</li> </ul> </li> <li>How can you specify a different SSH port for a host in the inventory file?<ul> <li>You can specify a different SSH port for a host by defining it in the inventory file next to the host's address, using the syntax <code>hostname ansible_port=your_port_number</code>.</li> </ul> </li> </ol>"},{"location":"7-iaas/ansible/4-playbooks/","title":"Playbooks","text":""},{"location":"7-iaas/ansible/4-playbooks/#what-is-playbook","title":"What is Playbook ?","text":"<p>Ansible Playbooks are like recipe books for setting up computer systems. They list servers (like ingredients) and tasks (like cooking steps) to set up certain IT settings, kind of like making a dish. They're written in YAML, which is simple and easy to read, almost like plain English.</p>"},{"location":"7-iaas/ansible/4-playbooks/#why-playbook","title":"Why Playbook ?","text":"<p>Ansible playbooks are like your computer's to-do list, automating multiple tasks in one go. Rather than doing tasks one by one, you list them in a playbook, and Ansible handles them all, saving time and reducing errors by ensuring consistency.</p>"},{"location":"7-iaas/ansible/4-playbooks/#how-to-use-it","title":"How to use it ?","text":"<p>This playbook is a set of instructions to install an Apache web server on a group of computers called web_servers. It does three main things: - Installs Apache using something called the yum module. - Makes sure Apache starts now and whenever the computer restarts. - Copies an index.html file to the place on the server where web pages are stored.</p> <pre>playbooks/setup_web_server.yml<code>\n# This is the beginning of an Ansible playbook. Playbooks are files where we tell Ansible what to do.\n\n- name: Setup Apache Web Server  # This is the name of our task list. It helps us remember what this playbook does.\n  hosts: web_servers             # This tells Ansible to run the tasks on machines that are labeled as \"web_servers\".\n  become: yes                    # This means that Ansible will use superuser (admin) permissions to run tasks.\n\n  tasks:                         # Here we start listing the tasks we want to do on the web_servers.\n\n  - name: Install Apache         # This is the first task. Its name helps us remember it's for installing Apache.\n    yum:                         # This tells Ansible to use the yum package manager, common in certain Linux distributions.\n      name: httpd                # This is the name of the package we want to install: httpd (Apache).\n      state: present             # This tells Ansible we want the httpd package to be installed (present on the system).\n\n  - name: Start Apache           # This is the second task. We're starting Apache and making sure it runs automatically.\n    service:                     # This tells Ansible to use the service management system.\n      name: httpd                # This specifies which service we're talking about: httpd (Apache).\n      state: started             # This makes sure the Apache service is running.\n      enabled: yes               # This makes sure Apache will start automatically whenever the server restarts.\n\n  - name: Deploy Homepage        # This is the third task. We're putting a custom homepage onto the web server.\n    copy:                        # This tells Ansible to copy a file from one place to another.\n      src: /src/index.html       # This is the source file we want to copy. It's the custom homepage.\n      dest: /var/www/html/index.html # This is where we want to copy the file to, the default directory for Apache web pages.\n\n</code></pre>"},{"location":"7-iaas/ansible/4-playbooks/#commands","title":"Commands","text":"<ul> <li>Run: <code>ansible-playbook playbook.yml</code><ul> <li>Inventory: <code>-i inventory_file</code> (Choose which computers to run the tasks on)</li> <li>Limit hosts: <code>--limit \"host1\"</code> (Pick a specific computer from your list)</li> <li>Tags: <code>--tags \"tag1\"</code> (Run only parts of your tasks marked with this tag)</li> <li>Skip tags: <code>--skip-tags \"tagname\"</code> (Ignore tasks marked with this tag)</li> <li>Syntax check: <code>--syntax-check</code> (Check if your list of tasks has any mistakes)</li> <li>Dry run: <code>--check</code> (Test your tasks without making real changes)</li> <li>Extra vars: <code>-e \"var=value\"</code> (Add extra details or changes just for this run)</li> <li>Verbose: <code>-vvv</code> (Get more detailed information while tasks are running)</li> <li>Parallel: <code>-f 10</code> (Run tasks on up to 10 computers at the same time)</li> </ul> </li> </ul>"},{"location":"7-iaas/ansible/4-playbooks/#assignments","title":"Assignments","text":"<ol> <li> <p>Create a Playbook to Install and Configure a MySQL Database:</p> <ul> <li>Ensure MySQL is installed.</li> <li>Configure MySQL to start on boot.</li> <li>Set a root password (use Ansible Vault for securing the password).</li> <li>Create a database and a user with privileges to that database.</li> </ul> </li> <li> <p>Write a Playbook for User Management:</p> <ul> <li>Create a user with sudo privileges.</li> <li>Set a password for the user (again, use Ansible Vault).</li> <li>Copy an SSH key to the user's <code>.ssh/authorized_keys</code> from a file.</li> </ul> </li> <li> <p>Develop a Playbook to Configure a Firewall:</p> <ul> <li>Install <code>firewalld</code>.</li> <li>Ensure it starts on boot.</li> <li>Open port 80 (HTTP) and 443 (HTTPS).</li> <li>Ensure all other incoming connections are denied by default.</li> </ul> </li> </ol>"},{"location":"7-iaas/ansible/4-playbooks/#interview-questions","title":"Interview Questions","text":"<ol> <li> <p>What is an Ansible playbook and how is it used?</p> <ul> <li>A playbook is an Ansible file where you write automation tasks in YAML format. Playbooks can perform a variety of tasks such as configuring server software, deploying applications, and more.</li> </ul> </li> <li> <p>How do you secure sensitive data like passwords in Ansible playbooks?</p> <ul> <li>Ansible Vault is used to encrypt sensitive data within Ansible playbooks. It allows you to keep sensitive data such as passwords or keys in encrypted files, rather than as plaintext in playbooks or roles.</li> </ul> </li> <li> <p>Explain the difference between the <code>ansible</code> command and the <code>ansible-playbook</code> command.</p> <ul> <li>The <code>ansible</code> command is used for running single tasks, while <code>ansible-playbook</code> is used for running Ansible playbooks that can contain multiple tasks and provide more complex automation sequences.</li> </ul> </li> <li> <p>What is idempotence in the context of Ansible, and why is it important?</p> <ul> <li>Idempotence refers to the property of certain operations in Ansible to produce the same outcome regardless of how many times they're executed. This is important for reliability and efficiency, ensuring that scripts can be run multiple times without causing unexpected side effects.</li> </ul> </li> </ol>"},{"location":"7-iaas/ansible/5-roles/","title":"Roles","text":""},{"location":"7-iaas/ansible/5-roles/#what-is-roles","title":"What is Roles ?","text":"<p>Imagine you're a cook in a big restaurant. When you make a dish, you follow many steps like picking ingredients, preparing them, cooking, and serving. If you had to figure out these steps anew each time, it would be slow and easy to mess up.</p> <p>That's where \"recipes\" come in. A recipe tells you what ingredients you need and what steps to follow to make a dish right every time. In Ansible, \"roles\" are like recipes. They gather everything you need (like variables, files, templates) and what you have to do (like tasks, handlers) to set up a server or start an app. You can share and use these roles again, just like recipes, to make sure your computer tasks are done well and without mistakes, saving time and effort.</p>"},{"location":"7-iaas/ansible/5-roles/#why-roles","title":"Why Roles ?","text":"<ul> <li>Efficiency: Reuse roles to save time setting up environments.</li> <li>Consistency: Roles ensure tasks are done the same way, reducing mistakes.</li> <li>Simplicity: Break complex playbooks into easier, smaller parts.</li> <li>Shareability: Share roles with others for better collaboration.</li> <li>Scalability: Apply standardized configurations to many servers easily.</li> </ul>"},{"location":"7-iaas/ansible/5-roles/#how-to-create-roles","title":"How to create Roles ?","text":""},{"location":"7-iaas/ansible/5-roles/#1-create-the-role-structure","title":"1) Create the Role Structure","text":"<p>First, generate the structure for your role with the <code>ansible-galaxy</code> <code>ansible-galaxy init nginx_server</code> This creates a directory structure under <code>nginx_server</code> with folders like <code>tasks</code>, <code>handlers</code>, <code>templates</code>, <code>files</code>, <code>vars</code>, <code>defaults</code>, <code>meta</code>, and <code>tests</code>.</p>"},{"location":"7-iaas/ansible/5-roles/#2-define-the-role-structure","title":"2) Define the Role Structure","text":"<p>In the <code>nginx_server/tasks/main.yml</code> file, you define the tasks that the role will perform:</p> <pre><code>- name: Install nginx\n# This task is named \"Install nginx\" for clarity in playbook output and logs.\n\n  apt:                 # Utilizes the apt module, which is used for managing packages with APT (used by Debian-based systems).\n\u00a0 \u00a0 name: nginx        # Specifies the package to be installed, in this case, nginx.\n\u00a0 \u00a0 state: present     # Ensures the package is installed; 'present' means it will install nginx if it's not already installed.\n\u00a0 \u00a0 update_cache: yes  # Updates the package cache on the target machine before installing, similar to running 'apt-get update'.\n\u00a0 \u00a0 become: yes        # Elevates privileges to become the root user, necessary for installing packages.\n\n- name: Start nginx\n# This task is named \"Start nginx\" and ensures the nginx service is running.\n\n\u00a0 service:             # Utilizes the service module to manage the service state.\n\u00a0 \u00a0 name: nginx        # Specifies the service to manage, here it is nginx.\n\u00a0 \u00a0 state: started     # Ensures the service is running; 'started' means the service will be started if it isn't already.\n\u00a0 \u00a0 enabled: yes       # Ensures the service is enabled to start at boot.\n\u00a0 \u00a0 become: yes        # Elevates privileges to become the root user, necessary for managing services..\n</code></pre>"},{"location":"7-iaas/ansible/5-roles/#3-using-your-role-in-a-playbook","title":"3) Using Your Role in a Playbook","text":"<p>Create a playbook named deploy_nginx.yml that uses your role: <pre><code># This section targets a group of hosts named \"web_servers\"\n\n- hosts: web_servers\n  become: true          # Elevates privileges to become the root user for all tasks in this playbook.\n  roles:\n    - nginx_server       # Applies the role named \"nginx_server\" to all hosts in the \"web_servers\" group.\n</code></pre> This setup quickly establishes a reusable, modular approach to deploying nginx across your servers.</p>"},{"location":"7-iaas/ansible/5-roles/#commands","title":"Commands","text":"<ol> <li> <p>Creating a New Role: (Initializes a new role with a standard directory structure)</p> <ul> <li><code>ansible-galaxy init role_name</code></li> </ul> </li> <li> <p>Listing Installed Roles:</p> <ul> <li><code>ansible-galaxy list</code></li> </ul> </li> <li>Installing Roles from Ansible Galaxy:<ul> <li><code>ansible-galaxy install username.role_name</code></li> </ul> </li> <li>Removing Installed Roles:<ul> <li><code>ansible-galaxy remove username.role_name</code></li> </ul> </li> <li> <p>Specifying Role Dependencies:</p> <ul> <li>Inside your role, in <code>meta/main.yml</code>, list dependencies: <code><pre> \n    dependencies:\n        - { role: another_role }\n</pre> This ensures <code>another_role</code> is executed before the current role. <li> <p>Overriding Role Defaults:</p> <ul> <li>In your playbook or <code>vars/main.yml</code> of your role, specify variables to override defaults: <code><pre> \nvars:\n    variable_name: value\n</pre> <li>Running a Playbook with Roles:<ul> <li><code>ansible-playbook playbook.yml</code></li> </ul> </li>"},{"location":"7-iaas/ansible/5-roles/#assignments","title":"Assignments","text":""},{"location":"7-iaas/ansible/5-roles/#assignment-1-create-a-basic-web-server-role","title":"Assignment 1: Create a Basic Web Server Role","text":"<ul> <li>Objective: Create an Ansible role named <code>web_server</code> that installs and configures Nginx or Apache on a Linux server.</li> <li>Tasks:<ol> <li>Use the <code>ansible-galaxy</code> command to initialize a new role structure.</li> <li>Define tasks to install Nginx/Apache, ensure the service is enabled and started.</li> <li>Create a template for a simple homepage.</li> <li>Use the <code>copy</code> module to deploy this homepage to the server.</li> <li>Apply your role to a playbook and run it against a target server.</li> </ol> </li> </ul>"},{"location":"7-iaas/ansible/5-roles/#assignment-2-develop-a-user-management-role","title":"Assignment 2: Develop a User Management Role","text":"<ul> <li>Objective: Develop a role named <code>user_management</code> that manages user accounts on a Linux system.</li> <li>Tasks:<ol> <li>Initialize the role using <code>ansible-galaxy</code>.</li> <li>Create tasks to add, remove, and manage user accounts (e.g., ensure a specific list of users exists with given properties).</li> <li>Use variables to make the role flexible for different user names and properties.</li> <li>Test the role by applying it to create, modify, and delete user accounts on a target machine.</li> </ol> </li> </ul>"},{"location":"7-iaas/ansible/5-roles/#interview-questions","title":"Interview Questions","text":"<ol> <li> <p>What is an Ansible role and how does it differ from a playbook?</p> <p>An Ansible role is a reusable, standalone block that can be included in Ansible playbooks to automate complex tasks. It differs from a playbook in that a playbook is a list of instructions to execute on remote machines, while a role is a structured way to organize these instructions (including tasks, files, templates, and variables) into a reusable format.</p> </li> <li> <p>How do you include a role in an Ansible playbook?</p> <p>You include a role in an Ansible playbook using the <code>roles:</code> directive. You can specify the role directly under this directive, and Ansible will execute the tasks defined in the role's <code>tasks/main.yml</code> file.</p> </li> <li> <p>Can you explain variable precedence in Ansible roles?</p> <p>Variable precedence in Ansible determines which variable value will be used when duplicate variable names are defined in multiple places. In the context of roles, variables defined in playbooks have a higher precedence than those defined in roles. Within roles, variables in <code>vars/main.yml</code> have a higher precedence than those in <code>defaults/main.yml</code>, allowing default values to be overridden easily.</p> </li> <li> <p>How do you manage dependencies between roles in Ansible?</p> <p>You manage dependencies between roles in Ansible by defining them in the <code>meta/main.yml</code> file of your role. Inside this file, you list the roles that must be applied before the current role using the <code>dependencies:</code> section. Ansible resolves these dependencies and applies the roles in the specified order.</p> </li> </ol>"},{"location":"7-iaas/ansible/6-modules/","title":"Modules","text":""},{"location":"7-iaas/ansible/6-modules/#what-is-module","title":"What is Module ?","text":"<p>Think of preparing a large meal for a party. You, as the chef, have a recipe book (the playbook) that outlines various dishes. In your kitchen, you have different appliances and tools (modules) like a blender, oven, or mixer, each designed for a specific task like blending, baking, or mixing. Your goal is to make a delicious meal (configure your IT environment or system). Each tool has its function, like the oven bakes your cake or the blender makes your sauce, working seamlessly under your direction to create each part of the meal. Just as you don\u2019t need to know how to build an oven to bake a cake, in Ansible, you use these tools (modules) to complete tasks without knowing the underlying complexities.</p> <p>Ansible had over 3,000 modules. The exact number can vary as new modules are added and old ones are deprecated</p>"},{"location":"7-iaas/ansible/6-modules/#why-to-use-modules","title":"Why to use modules ?","text":"<p>Using modules makes automating tasks easy. You don't have to create complicated scripts yourself. Instead, you use Ansible's ready-made modules for usual tasks. This saves time and makes your work more consistent and reliable.</p>"},{"location":"7-iaas/ansible/6-modules/#how-to-use-modules","title":"How to use modules ?","text":"<p>Example 1: Using the apt module to install nginx <pre><code>- name: Install nginx on a Debian-based system\n  hosts: all\n  become: true\n  tasks:\n    - name: Ensure nginx is installed\n      apt:\n        name: nginx\n        state: present\n</code></pre> Example 2: Using the copy module to copy a file to a target system <pre><code>- name: Copy local file to target system\n  hosts: all\n  tasks:\n    - name: Copy sample.txt to /tmp\n      copy:\n        src: /path/to/local/sample.txt\n        dest: /tmp/sample.txt\n</code></pre></p>"},{"location":"7-iaas/ansible/6-modules/#assigments","title":"Assigments","text":"<ol> <li> <p>Write a Playbook Using the <code>user</code> Module</p> <p>Create a playbook that adds a user called <code>devuser</code> with a home directory to a Linux system. Use the <code>user</code> module.</p> </li> <li> <p>Automate Package Updates</p> <p>Write a playbook that updates all packages on a system using the appropriate module for the system's package manager (e.g., <code>apt</code> for Debian-based systems, <code>yum</code> for Red Hat-based systems).</p> </li> <li> <p>Deploy a Simple HTML Website </p> <p>Use the <code>copy</code> module to copy a local HTML file to the web server directory (e.g., <code>/var/www/html/index.html</code>) on a target machine where nginx or Apache is installed. Ensure the web server service is running using the <code>service</code> module.</p> </li> </ol>"},{"location":"7-iaas/ansible/6-modules/#interview-questions","title":"Interview Questions","text":"<ol> <li> <p>What is an Ansible module, and how is it used?</p> <p>An Ansible module is a piece of software that Ansible executes on the managed nodes. Each module is designed to handle a specific task and can be invoked directly in playbooks or through other Ansible tools. Modules abstract away the complexities of interacting with different systems, services, and operations.</p> </li> <li> <p>How do you choose which module to use for a task?</p> <p>The choice of module depends on the specific task and the target system. Ansible documentation provides a comprehensive list of modules and their purposes, which can guide you in selecting the appropriate module. Factors to consider include the operating system of the target node, the type of resource you're managing (service, file, package, etc.), and the specific operation you want to perform.</p> </li> <li> <p>Can you modify or extend existing Ansible modules? How?</p> <p>Yes, Ansible modules can be modified or extended. You can write custom modules in any language that can return JSON (though Python is the most common choice due to its readability and the extensive library support). Custom modules must be placed in a directory recognized by Ansible, such as a <code>library/</code> directory next to your playbook.</p> </li> <li> <p>Explain the idempotence of Ansible modules and its importance.</p> <p>Idempotence is a property that ensures a module can be run multiple times without changing the system's state after the first run (assuming no changes). It's crucial because it allows Ansible playbooks to be executed safely multiple times, making automation scripts more reliable and predictable. For example, an idempotent module to install a package will only attempt the installation if the package isn't already installed, preventing unnecessary changes to the system.</p> </li> </ol>"},{"location":"7-iaas/ansible/7-vault/","title":"Vault","text":""},{"location":"7-iaas/ansible/7-vault/#what-is-vault","title":"What is Vault ?","text":"<p>Ansible Vault is a feature within Ansible that allows you to encrypt sensitive information, ensuring it can only be accessed by authorized individuals with the decryption key. It helps keep passwords, private keys, and other confidential data secure in your automation tasks.</p>"},{"location":"7-iaas/ansible/7-vault/#why-vault","title":"Why Vault ?","text":"<p>Using Vault, such as Ansible Vault, is crucial because it protects sensitive information from unauthorized access and potential security breaches. By encrypting data like passwords and keys, it ensures that even if someone gains access to your files, they cannot understand or misuse the sensitive data without the encryption key. This is particularly important in automation and DevOps practices, where scripts and code that manage infrastructure often need to use sensitive information but must do so securely to prevent data leaks or security vulnerabilities.</p>"},{"location":"7-iaas/ansible/7-vault/#how-to-use-vault","title":"How to use Vault ?","text":"<p>To set up and use Ansible Vault for encrypting sensitive data, follow these concise steps:</p> <ol> <li> <p>Vault is part of ansible , So no need of additional installation.</p> </li> <li> <p>Create a New Encrypted File:</p> <ul> <li>Use <code>ansible-vault create secret.yml</code> to create and encrypt a new file. You'll be prompted to set a password.</li> </ul> </li> <li> <p>Edit Encrypted Files:</p> <ul> <li>To edit, use <code>ansible-vault edit secret.yml</code>, entering the vault password when prompted.</li> </ul> </li> <li> <p>View Encrypted Files:</p> <ul> <li>Use <code>ansible-vault view secret.yml</code> to view an encrypted file, again entering the password.</li> </ul> </li> <li> <p>Running Playbooks with Encrypted Content:</p> <p>Use <code>ansible-playbook --ask-vault-pass myplaybook.yml</code> to run a playbook that requires a vault password, </p> <p>or <code>ansible-playbook --vault-password-file /path/to/passwordfile myplaybook.yml</code> if you're using a password file.</p> </li> </ol>"},{"location":"7-iaas/ansible/7-vault/#assignments","title":"Assignments","text":"<ol> <li> <p>Create and Encrypt a File: Write a playbook that contains sensitive information. Use Ansible Vault to encrypt this playbook. Ensure the playbook still functions as expected when run with the <code>ansible-playbook</code> command and the <code>--ask-vault-pass</code> flag.</p> </li> <li> <p>Change Vault Password: Encrypt a file using Ansible Vault. Then, change the password of the vault-encrypted file. Verify that you can access the file with the new password but not with the old one.</p> </li> <li> <p>Use Encrypted Variables: Create a role that uses variables for sensitive data like database passwords. Encrypt these variables with Ansible Vault and write a playbook that uses this role, demonstrating that the role functions correctly with the encrypted variables.</p> </li> </ol>"},{"location":"7-iaas/ansible/7-vault/#interview-questions","title":"Interview Questions","text":"<ol> <li> <p>What is Ansible Vault and why is it used?</p> <ul> <li>Ansible Vault is a feature of Ansible that allows users to encrypt sensitive information, making it secure and accessible only to individuals with the password. It's used to keep sensitive data such as passwords and keys secure within Ansible playbooks and roles.</li> </ul> </li> <li> <p>How do you run a playbook that contains vault-encrypted files?</p> <ul> <li>To run a playbook containing vault-encrypted files, you use the <code>ansible-playbook</code> command with the <code>--ask-vault-pass</code> flag, which prompts for the vault password, or the <code>--vault-password-file</code> flag, where the password is stored in a file.</li> </ul> </li> <li> <p>Can you explain the process of editing an encrypted file with Ansible Vault?</p> <ul> <li>To edit an encrypted file, you use the <code>ansible-vault edit</code> command followed by the file name. This command prompts for the vault password, decrypts the file temporarily, opens it in the default text editor, and re-encrypts it with the same password upon saving and closing the editor.</li> </ul> </li> <li> <p>What is the difference between encrypting an entire file with Ansible Vault and encrypting only certain variables within a file?</p> <ul> <li>Encrypting an entire file with Ansible Vault makes the whole content of the file unreadable without the vault password. Encrypting only certain variables (using <code>ansible-vault encrypt_string</code>) within a file keeps the overall structure and other variables in plaintext, but secures specific sensitive data. This approach allows for a fine-grained encryption strategy, securing sensitive data while keeping the playbook or roles partially readable for easier maintenance and understanding.</li> </ul> </li> </ol>"},{"location":"7-iaas/ansible/8-best-practices/","title":"Best Practices","text":"<ol> <li> <p>Project Structure: Use a clear directory layout separating roles, playbooks, and variables for better organization. (Consider <code>ansible-galaxy init</code> for a template)</p> </li> <li> <p>Version Control: Keep your Ansible projects in version control systems like Git. (Branch per environment strategy)</p> </li> <li> <p>Dynamic Inventory: Use dynamic inventories for managing hosts in changing environments, especially with cloud resources. (Explore Ansible plugins for AWS, Azure, GCP)</p> </li> <li> <p>Secure Variables: Encrypt sensitive data with Ansible Vault. (Use <code>ansible-vault</code> for passwords and keys)</p> </li> <li> <p>Idempotence: Design tasks to be safely repeatable without unintended side-effects. (Test task outcomes before making changes)</p> </li> <li> <p>Error Handling: Use Ansible's error handling features to manage failures gracefully. (<code>failed_when</code>, <code>ignore_errors</code>)</p> </li> <li> <p>Code Clarity: Maintain readability with meaningful names and comments. (Use descriptive names for tasks and variables)</p> </li> <li> <p>Efficiency: Prefer Ansible modules over direct shell commands for cross-platform compatibility and efficiency. (Use <code>command</code> or <code>shell</code> modules only when necessary)</p> </li> <li> <p>Privilege Escalation: Run Ansible with the least privilege and use <code>become</code> for necessary tasks. (Audit use of <code>become</code>)</p> </li> <li> <p>CI/CD Integration: Integrate Ansible playbooks into CI/CD for automated testing and deployment. (Set up automated testing pipelines)</p> </li> <li> <p>Monitoring and Logging: Keep logs of Ansible runs and monitor the system's state post-configuration. (Enable Ansible logging, integrate with monitoring tools)</p> </li> </ol>"},{"location":"7-iaas/ansible/8-best-practices/#project-structure","title":"Project Structure","text":"<pre><code>\nansible-project/\n\n\u251c\u2500\u2500 inventories/\n\n\u2502\u00a0 \u00a0\u251c\u2500\u2500 production/\n\n\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u251c\u2500\u2500 hosts\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Production servers inventory\n\n\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u2514\u2500\u2500 group_vars/\n\n\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0 \u00a0 \u00a0\u2514\u2500\u2500 all.yml\u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Variables for all prod servers\n\n\u2502\u00a0 \u00a0\u2514\u2500\u2500 staging/\n\n\u2502\u00a0 \u00a0 \u00a0 \u00a0\u251c\u2500\u2500 hosts\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Staging servers inventory\n\n\u2502\u00a0 \u00a0 \u00a0 \u00a0\u2514\u2500\u2500 group_vars/\n\n\u2502\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u2514\u2500\u2500 all.yml\u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Variables for all staging servers\n\n\u251c\u2500\u2500 roles/\n\n\u2502\u00a0 \u00a0\u251c\u2500\u2500 webserver/\n\n\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u251c\u2500\u2500 tasks/\n\n\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u2514\u2500\u2500 main.yml\u00a0 \u00a0 \u00a0 \u00a0 # Tasks for setting up the web server\n\n\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u251c\u2500\u2500 handlers/\n\n\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u2514\u2500\u2500 main.yml\u00a0 \u00a0 \u00a0 \u00a0 # Handlers for restarting services\n\n\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u251c\u2500\u2500 templates/\n\n\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u2514\u2500\u2500 httpd.conf.j2\u00a0 \u00a0# Apache config templates\n\n\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0\u2514\u2500\u2500 vars/\n\n\u2502\u00a0 \u00a0\u2502\u00a0 \u00a0 \u00a0 \u00a0\u2514\u2500\u2500 main.yml\u00a0 \u00a0 \u00a0 \u00a0 # Variables specific to the webserver role\n\n\u2502\u00a0 \u00a0\u2514\u2500\u2500 firewall/\n\n\u2502\u00a0 \u00a0 \u00a0 \u00a0\u2514\u2500\u2500 ...\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Similar structure for firewall setup\n\n\u2514\u2500\u2500 playbooks/\n\n\u00a0 \u00a0 \u2514\u2500\u2500 setup_web_server.yml\u00a0 \u00a0 # Main playbook that applies roles"},{"location":"7-iaas/ansible/9-troubleshooting/","title":"Troubleshooting","text":""},{"location":"7-iaas/ansible/9-troubleshooting/#scenario-1-playbook-fails-to-execute","title":"Scenario 1: Playbook Fails to Execute","text":"<p>Q: What do you do if a playbook fails to execute on a remote host? A:</p> <ul> <li>Check Connectivity: Ensure the control node can SSH into the target host.</li> <li>Verify Permissions: Make sure the SSH user has appropriate permissions on the target host.</li> <li>Review Error Messages: Analyze the output for specific error messages, which can indicate what went wrong.</li> <li>Ansible Configuration: Check Ansible configurations and inventory files for accuracy.</li> </ul>"},{"location":"7-iaas/ansible/9-troubleshooting/#scenario-2-variable-undefined-error","title":"Scenario 2: Variable Undefined Error","text":"<p>Q: How do you resolve an \"undefined variable\" error in a playbook? A:</p> <ul> <li>Define Variables: Ensure all variables used are defined in the playbook, included files, or inventory.</li> <li>Typo Check: Verify there are no typos in variable names.</li> <li>Debug Module: Use the Ansible <code>debug</code> module to print variables at runtime and understand their state.</li> </ul>"},{"location":"7-iaas/ansible/9-troubleshooting/#scenario-3-task-skipped-without-notice","title":"Scenario 3: Task Skipped Without Notice","text":"<p>** Q: Why would a task be skipped without any clear reason? A:</p> <ul> <li>Conditional Checks: Check if the task has a conditional (<code>when</code>) that is not being met.</li> <li>Tags: Ensure the task isn't being excluded by the use of tags during execution.</li> <li>Dependencies: Look for any failed dependencies or <code>include</code> statements that did not execute.</li> </ul>"},{"location":"7-iaas/ansible/9-troubleshooting/#scenario-4-slow-performance","title":"Scenario 4: Slow Performance","text":"<p>Q: What steps can you take if Ansible is running slow? A:</p> <ul> <li>Parallelism: Increase the number of parallel forks in the Ansible configuration (<code>forks</code> setting).</li> <li>Fact Gathering: Disable or limit fact gathering if not needed (<code>gather_facts: no</code> or use <code>setup</code> module selectively).</li> <li>Connection Method: Switch connection methods (e.g., from SSH to paramiko) to see if performance improves.</li> </ul>"},{"location":"7-iaas/ansible/9-troubleshooting/#scenario-5-authentication-issues","title":"Scenario 5: Authentication Issues","text":"<p>Q: How do you fix SSH authentication issues when running a playbook? A:</p> <ul> <li>SSH Keys: Ensure the control node's SSH key is authorized on the target host.</li> <li>Password Authentication: If using password authentication, verify the password is correct or use <code>ask_pass</code> to prompt for a password.</li> <li>SSH Agent: If using an SSH agent, make sure it's running and loaded with the correct keys.</li> </ul>"},{"location":"7-iaas/ansible/9-troubleshooting/#scenario-6-playbook-runs-on-incorrect-hosts","title":"Scenario 6: Playbook Runs on Incorrect Hosts","text":"<p>** Q: What to do if a playbook is running on the wrong set of hosts? A:</p> <ul> <li>Inventory Check: Verify the inventory file to ensure host groupings are correct.</li> <li>Host Pattern: Review the playbook's host pattern to ensure it targets the intended group or host.</li> <li>Limit Option: Use the <code>--limit</code> option to restrict playbook runs to specific hosts if necessary.</li> </ul> <p>By understanding and applying these troubleshooting steps, you can resolve common issues encountered while working with Ansible, ensuring a smoother automation experience.</p>"},{"location":"8-observability/1-introduction/","title":"Introcution","text":""},{"location":"9-linux/0-index/","title":"Index","text":""},{"location":"9-linux/0-index/#module-1-introduction-to-operating-systems","title":"Module 1: Introduction to Operating Systems","text":"<ul> <li>What is an Operating System? </li> <li>Types of Operating Systems </li> <li>OS Architecture and Kernel </li> <li>Overview of Linux and Its Evolution </li> <li>Differences Between Linux and Other Operating Systems</li> </ul>"},{"location":"9-linux/0-index/#module-2-linux-basics","title":"Module 2: Linux Basics","text":"<ul> <li>Linux Distributions Overview </li> <li>Installing Linux </li> <li>Navigating the Linux File System </li> <li>Basic Linux Commands </li> <li>2.5 File and Directory Management</li> </ul>"},{"location":"9-linux/0-index/#module-3-system-administration-fundamentals","title":"Module 3: System Administration Fundamentals","text":"<ul> <li>Users and Group Management </li> <li>Permissions and Ownership </li> <li>System Monitoring Tools </li> <li>Managing Processes and Jobs </li> <li>System Updates and Package Management</li> </ul>"},{"location":"9-linux/0-index/#module-4-networking-basics","title":"Module 4: Networking Basics","text":"<ul> <li>Understanding Linux Networking </li> <li>Configuring Network Interfaces </li> <li>Basic Networking Commands </li> <li>Firewall and Security Basics (iptables, firewalld)</li> </ul>"},{"location":"9-linux/0-index/#module-5-advanced-file-system-management","title":"Module 5: Advanced File System Management","text":"<ul> <li>Linux File System Hierarchy </li> <li>Advanced File Operations </li> <li>Logical Volume Manager (LVM) </li> <li>Disk Quotas and File System Security</li> </ul>"},{"location":"9-linux/0-index/#module-6-system-security-and-hardening","title":"Module 6: System Security and Hardening","text":"<ul> <li>Basic Security Concepts </li> <li>User Authentication Mechanisms </li> <li>Securing Network Services </li> <li>SELinux Basics and AppArmor </li> <li>System Auditing and Compliance</li> </ul>"},{"location":"9-linux/0-index/#module-7-performance-tuning-and-troubleshooting","title":"Module 7: Performance Tuning and Troubleshooting","text":"<ul> <li>Monitoring System Performance </li> <li>Tuning System Performance </li> <li>Troubleshooting Common Linux Issues </li> <li>Log Management and Analysis</li> </ul>"},{"location":"9-linux/0-index/#module-8-virtualization-and-containers","title":"Module 8: Virtualization and Containers","text":"<ul> <li>Introduction to Virtualization in Linux </li> <li>Managing Virtual Machines with KVM/QEMU </li> <li>Containerization Basics with Docker </li> <li>Introduction to Kubernetes Fundamentals</li> </ul>"},{"location":"9-linux/1-introduction/","title":"Introduction","text":""},{"location":"9-linux/1-introduction/#operating-systems-overview","title":"Operating Systems Overview","text":"<ul> <li>Function: Acts as intermediary between applications and hardware.</li> <li>Core Component: Kernel -- Manages memory, scheduling, I/O operations.</li> </ul>"},{"location":"9-linux/1-introduction/#types-of-operating-systems","title":"Types of Operating Systems","text":"<ul> <li>Batch Systems: Automated, minimal user interaction.</li> <li>Time-Sharing Systems: Shared resources among multiple users.</li> <li>Distributed Systems: Networked computers acting as one.</li> <li>Network Systems: Facilitates data exchange and resource sharing.</li> <li>Real-Time Systems: Ensures immediate data processing.</li> </ul>"},{"location":"9-linux/1-introduction/#key-os-in-the-market","title":"Key OS in the Market","text":"<ul> <li>Linux<ul> <li>Type: Network and Real-Time Systems.</li> <li>Key Features: Open-source, flexible, secure.</li> <li>Use Cases: Servers, embedded systems, desktops.</li> </ul> </li> <li>Windows<ul> <li>Type: Time-Sharing System.</li> <li>Key Features: User-friendly, wide application support.</li> <li>Market: Dominates desktop, strong in servers.</li> </ul> </li> <li>macOS<ul> <li>Type: Time-Sharing System.</li> <li>Key Features: Sleek design, integrated ecosystem, user-focused.</li> <li>Specialty: Optimized for Apple hardware.</li> </ul> </li> </ul>"},{"location":"9-linux/1-introduction/#linux-vs-windows-vs-macos-resource-management","title":"Linux vs. Windows vs. macOS: Resource Management","text":"<ul> <li>Memory Management<ul> <li>Linux: Efficient caching, swap management. Low overhead.</li> <li>Windows: Improved but higher base memory usage.</li> <li>macOS: Optimized but hardware-restricted scalability.</li> </ul> </li> <li>RAM Usage<ul> <li>Linux: Can run on as little as 128MB RAM.</li> <li>Windows: Requires minimum 1-2GB (32-bit) or 2GB+ (64-bit).</li> <li>macOS: Starts from 4GB, not ideal for low-end hardware.</li> </ul> </li> <li>CPU Utilization<ul> <li>Linux: Excellent efficiency, customizable kernels.</li> <li>Windows: Higher overhead, especially in GUI operations.</li> <li>macOS: Well-optimized within Apple's ecosystem.</li> </ul> </li> <li>Storage Efficiency<ul> <li>Linux: Supports ext4, XFS, Btrfs. Minimal space for installation.</li> <li>Windows: NTFS, more base storage required.</li> <li>macOS: Uses APFS, efficient on SSDs but higher base storage.</li> </ul> </li> </ul>"},{"location":"9-linux/1-introduction/#open-source-nature","title":"Open Source Nature","text":"<ul> <li>Linux: Open-source, allows full access to modify and distribute.</li> <li>Windows/macOS: Proprietary, limited customization and access.</li> </ul>"},{"location":"9-linux/1-introduction/#security","title":"Security","text":"<ul> <li>Linux: Highly secure, lower malware profile, community-driven vulnerability patching.</li> <li>Windows: More targeted by malware, improved security but relatively vulnerable.</li> <li>macOS: Secure, but increasing attacks with market share growth.</li> </ul>"},{"location":"9-linux/1-introduction/#customization","title":"Customization","text":"<ul> <li>Linux: High customization with various desktop environments and distros.</li> <li>Windows/macOS: Limited to aesthetic and some behavior changes.</li> </ul>"},{"location":"9-linux/1-introduction/#performance-resource-efficiency","title":"Performance &amp; Resource Efficiency","text":"<ul> <li>Linux: Efficient on old and new hardware, ideal for servers and high-performance computing.</li> <li>Windows: Higher resource requirements, slower on older hardware.</li> <li>macOS: Smooth on Apple hardware, less hardware flexibility.</li> </ul>"},{"location":"9-linux/1-introduction/#cost","title":"Cost","text":"<ul> <li>Linux: Free, no licensing fees, reduces organizational and personal costs.</li> <li>Windows/macOS: License purchase required, higher costs for deployments.</li> </ul>"},{"location":"9-linux/1-introduction/#software-ecosystem","title":"Software &amp; Ecosystem","text":"<ul> <li>Linux: Vast free software repository, use of compatibility layers for commercial software.</li> <li>Windows: Extensive commercial software availability.</li> <li>macOS: Curated App Store selection, quality focus but limited specialized apps.</li> </ul>"},{"location":"9-linux/1-introduction/#community-support","title":"Community Support","text":"<ul> <li>Linux: Large, active community for troubleshooting and resources.</li> <li>Windows/macOS: Official channels provide support, less community-driven.</li> </ul>"},{"location":"9-linux/2-installation/","title":"Installation","text":""},{"location":"9-linux/2-installation/#aws-linux-instance-setup-quick-guide","title":"AWS Linux Instance Setup: Quick Guide","text":""},{"location":"9-linux/2-installation/#step-1-sign-up-for-aws","title":"Step 1: Sign Up for AWS","text":"<ul> <li>If you don't already have an AWS account, go to the AWS homepage and sign up. You'll need to provide payment information, but the AWS Free Tier allows you to experiment with little to no cost.</li> </ul>"},{"location":"9-linux/2-installation/#step-2-create-an-ec2-instance","title":"Step 2: Create an EC2 Instance","text":"<ol> <li>Log into the AWS Management Console after creating your account.</li> <li>Navigate to the EC2 Dashboard under Services.</li> <li>Click Launch Instances to start the instance setup process.</li> </ol>"},{"location":"9-linux/2-installation/#step-3-choose-an-amazon-machine-image-ami","title":"Step 3: Choose an Amazon Machine Image (AMI)","text":"<ul> <li>AWS provides various Linux AMIs, including Amazon Linux 2, Ubuntu, and CentOS. Select the one that suits your requirements.</li> </ul>"},{"location":"9-linux/2-installation/#step-4-select-instance-type","title":"Step 4: Select Instance Type","text":"<ul> <li>Choose <code>t2.micro</code> for the AWS Free Tier eligibility, or select another type based on your needs.</li> <li>Click Next: Configure Instance Details.</li> </ul>"},{"location":"9-linux/2-installation/#step-5-configure-instance-details","title":"Step 5: Configure Instance Details","text":"<ul> <li>Leave the default settings or customize as per your requirements, such as network and IAM roles.</li> <li>Ensure Auto-assign Public IP is enabled for remote access.</li> </ul>"},{"location":"9-linux/2-installation/#step-6-add-storage","title":"Step 6: Add Storage","text":"<ul> <li>Adjust the size if needed; the default is usually sufficient for basic use cases.</li> <li>Click Next: Add Tags.</li> </ul>"},{"location":"9-linux/2-installation/#step-7-add-tags-optional","title":"Step 7: Add Tags (Optional)","text":"<ul> <li>You can tag your instance for easier management, e.g., Name: MyLinuxInstance.</li> </ul>"},{"location":"9-linux/2-installation/#step-8-configure-security-group","title":"Step 8: Configure Security Group","text":"<ul> <li>Create a new security group or select an existing one.</li> <li>Ensure SSH access (port 22) is allowed from your IP address for security.</li> </ul>"},{"location":"9-linux/2-installation/#step-9-review-and-launch","title":"Step 9: Review and Launch","text":"<ul> <li>Review your instance configurations.</li> <li>Click Launch, then select a key pair for SSH access. If you don't have a key pair, create a new one. Download and save it securely.</li> <li>Click Launch Instances.</li> </ul>"},{"location":"9-linux/2-installation/#step-10-connect-to-your-linux-instance","title":"Step 10: Connect to Your Linux Instance","text":"<ul> <li> <p>Once your instance state is \"running,\" connect via SSH using the downloaded key pair:</p> <p><code>ssh -i /path/to/your-key.pem ec2-user@&lt;Instance-Public-DNS&gt;</code></p> </li> <li> <p>Replace <code>/path/to/your-key.pem</code> with your actual key file path and <code>&lt;Instance-Public-DNS&gt;</code> with your instance's public DNS.</p> </li> </ul>"},{"location":"9-linux/2-installation/#note","title":"Note","text":"<ul> <li>Security Best Practices: Regularly update your Linux instance with the latest security patches.</li> <li>Cost Management: Monitor your usage to stay within the Free Tier limits, and stop or terminate your instance when it's not in use to avoid unnecessary charges.</li> </ul>"},{"location":"9-linux/3-files-directories/","title":"Files &amp; Directories","text":""},{"location":"9-linux/3-files-directories/#basic-commands-for-navigation","title":"Basic Commands for Navigation","text":"<ul> <li>pwd: Show your current directory.     <code>pwd</code></li> <li>cd [directory]: Change directory.     <code>cd /var/www/html     cd ..  # Move up one directory     cd     # Go back to home directory</code></li> <li>ls [options] [directory]: List contents.     <code>ls -l     ls -a /etc     ls -lh /home/user/</code></li> </ul>"},{"location":"9-linux/3-files-directories/#managing-files-and-directories","title":"Managing Files and Directories","text":"<ul> <li>Create or update a file.     <code>touch newfile.txt</code></li> <li>Make a directory.     <code>mkdir new_folder</code></li> <li>Copy files or directories.     <code>cp source.txt destination.txt     cp -r source_directory new_directory</code></li> <li>Move or rename.     <code>mv oldname.txt newname.txt     mv file.txt /home/user/</code></li> <li>Remove files or directories.     <code>rm unwanted_file.txt     rm -r old_directory</code></li> </ul>"},{"location":"9-linux/3-files-directories/#working-with-links","title":"Working with Links","text":"<ul> <li>Create a hard link.     <code>ln original.txt hardlink.txt</code></li> <li>Create a symbolic link.     <code>ln -s /path/to/original.txt symlink.txt</code></li> </ul>"},{"location":"9-linux/3-files-directories/#advanced-navigation-techniques","title":"Advanced Navigation Techniques","text":"<ul> <li>find [directory] [criteria]: Find files or directories.     <code>find /home/user/ -name \"*.txt\"</code></li> <li>grep [options] [pattern] [files]: Search inside files.     <code>grep \"search term\" file.txt     grep -ri \"search term\" /home/user/</code></li> </ul>"},{"location":"9-linux/3-files-directories/#quick-tips-example-commands","title":"Quick Tips Example Commands","text":"<ul> <li>Navigating efficiently: Switch back to the last directory.     <code>cd -</code></li> <li>Autocompletion: Start typing and press Tab to autocomplete.</li> <li>Wildcards: List all <code>.txt</code> files     <code>ls *.txt</code></li> </ul>"},{"location":"9-linux/4-users-groups/","title":"Users &amp; Groups","text":""},{"location":"9-linux/4-users-groups/#1-users-and-group-management","title":"1. Users and Group Management","text":""},{"location":"9-linux/4-users-groups/#creating-users-and-groups","title":"Creating Users and Groups","text":"<ul> <li>Add User: <code>sudo adduser username</code></li> <li>Add Group: <code>sudo addgroup groupname</code></li> </ul>"},{"location":"9-linux/4-users-groups/#modifying-users-and-groups","title":"Modifying Users and Groups","text":"<ul> <li>Add User to Group: <code>sudo adduser username groupname</code></li> <li>Change User's Primary Group: <code>sudo usermod -g groupname username</code></li> </ul>"},{"location":"9-linux/4-users-groups/#2-permissions-and-ownership","title":"2. Permissions and Ownership","text":"<p>Every file and directory in Linux has associated access rights, which are defined by the file's owner, the group, and others.</p>"},{"location":"9-linux/4-users-groups/#viewing-permissions","title":"Viewing Permissions","text":"<ul> <li>List with Permissions: <code>ls -l</code></li> </ul>"},{"location":"9-linux/4-users-groups/#modifying-permissions","title":"Modifying Permissions","text":"<ul> <li>Change Permissions:  <code>chmod 755 filename</code></li> </ul>"},{"location":"9-linux/4-users-groups/#changing-ownership","title":"Changing Ownership","text":"<ul> <li>Change Owner: <code>chown username:groupname filename</code></li> </ul>"},{"location":"9-linux/4-users-groups/#file-permissions-and-ownership","title":"File Permissions and Ownership","text":"<ul> <li>Change file permissions.     <code>chmod 755 script.sh</code></li> <li>Change file owner and group.     <code>chown user:usergroup file.txt</code></li> <li>Change the group of a file.     <code>chgrp newgroup file.txt</code></li> </ul>"},{"location":"9-linux/4-users-groups/#special-permissions","title":"Special Permissions","text":"<ul> <li>setuid on an executable file:     <code>chmod u+s /path/to/executable</code></li> <li>setgid on a directory:     <code>chmod g+s /path/to/directory</code></li> <li>Sticky bit on a directory:     <code>chmod +t /path/to/directory</code></li> </ul>"},{"location":"9-linux/4-users-groups/#permissions-numeric-system-example","title":"Permissions Numeric System Example","text":"<ul> <li>Give read, write, and execute permissions to the owner, read and execute to the group, and only read to others:     <code>chmod 754 file.txt</code></li> </ul>"},{"location":"9-linux/5-compute/","title":"Compute","text":""},{"location":"9-linux/5-compute/#what-is-a-linux-process","title":"What is a Linux Process?","text":"<p>A process is basically a running program on your computer. When you open an app or run a command, Linux starts a new process for it. Each process has a unique number called a Process ID (PID).</p>"},{"location":"9-linux/5-compute/#types-of-processes","title":"Types of Processes","text":"<ul> <li>Foreground processes: When you run a command or program, and it takes control of your terminal until it's done, it's running in the foreground. You have to wait for it to finish to do something else.</li> <li>Background processes: These are the opposite. You can start a process and keep using your terminal without waiting for it to finish. You add <code>&amp;</code> at the end of a command to do this. For example:</li> <li> <p><code>sleep 30 &amp;</code></p> </li> </ul>"},{"location":"9-linux/5-compute/#viewing-and-managing-processes","title":"Viewing and Managing Processes","text":"<ul> <li><code>ps</code>: Shows you what processes are running. <code>ps aux</code> is a common way to see all running processes with details.</li> <li><code>top</code>: Gives you a live look at running processes and how much computer resources they're using.</li> <li><code>kill</code>: Lets you stop a process. If a process won't stop normally, you can force it to stop with <code>kill -9 PID</code>, replacing <code>PID</code> with the process's unique number.</li> </ul>"},{"location":"9-linux/5-compute/#what-is-a-job","title":"What is a Job?","text":"<p>A job is like a task you've told your Linux shell (like Bash) to do. You can have many jobs running at the same time.</p>"},{"location":"9-linux/5-compute/#job-control-commands","title":"Job Control Commands","text":"<ul> <li><code>bg</code>: Moves a paused job to the background so it keeps running. For example, if you've stopped a job, you can continue it in the background with <code>bg %1</code>, where <code>1</code> is the job number.</li> <li><code>fg</code>: Brings a background job to the foreground. If you used <code>bg</code> to send a job to the background, use <code>fg %1</code> to bring it back.</li> <li><code>jobs</code>: Lists all your current jobs with their numbers and states, like running or stopped.</li> </ul>"},{"location":"9-linux/5-compute/#real-life-uses-and-commands","title":"Real-life Uses and Commands","text":"<ul> <li>Checking what's running: Use <code>ps aux</code> to see all active processes. It's helpful if your computer is slow, and you want to find out what's using all the resources.</li> <li>Stopping a frozen program: If a program isn't responding, find its PID with <code>ps aux | grep program_name</code>, then stop it with <code>kill PID</code>.</li> <li>Running tasks in the background: Start a long-running command like a file backup in the background with <code>command &amp;</code> so you can keep using your terminal.</li> <li>Bringing a background task to the foreground: If you started a task like editing a document in the background but now want to interact with it, use <code>fg %job_number</code> to bring it back.</li> </ul>"},{"location":"9-linux/5-compute/#interview-question","title":"Interview question","text":"<ol> <li>Can a zombie process consume CPU resources?<ul> <li>No, a zombie process cannot consume CPU resources. It's a process that has completed execution but still remains in the process table waiting for its parent to retrieve its exit status.</li> </ul> </li> <li>Is it possible to kill a zombie process using the <code>kill</code> command?<ul> <li>No, you cannot kill a zombie process using the <code>kill</code> command because the process has already finished execution. The proper way to remove a zombie process from the process table is for its parent process to read its exit status, or by terminating the parent process, after which the init process will adopt and clean it up.</li> </ul> </li> <li>Can you run a command in the background without using the <code>&amp;</code> at the end of the command? How?<ul> <li>Yes, you can use the <code>nohup</code> command or <code>disown</code> shell builtin with a running process. <code>nohup</code> allows a command to continue running in the background even after you log out. With <code>disown</code>, you can remove a job from the shell's job table, making it immune to hangups even without <code>&amp;</code>.</li> </ul> </li> <li>How can you list only the child processes of a specific process?<ul> <li>A common misconception is that commands like <code>ps</code> directly support filtering by parent process ID (PPID). While <code>ps</code> does show PPID, to list only the child processes of a specific process, you might use a combination of <code>ps</code> and <code>grep</code> or the <code>pstree -p [parent_pid]</code> command, where <code>[parent_pid]</code> is the PID of the parent process, to get a tree representation.</li> </ul> </li> <li>If <code>kill -9</code> cannot kill a process, what could be the reason?<ul> <li>If <code>kill -9</code> (which sends the SIGKILL signal) does not terminate a process, it is likely because the process is in an uninterruptible sleep state (D state), usually waiting on I/O. Processes in this state cannot be killed until they resume, as the kernel is handling the process directly.</li> </ul> </li> <li>What happens if you execute the command <code>:(){ :|:&amp; };:</code> in a Linux shell?<ul> <li>This command is a fork bomb. It defines a function named <code>:</code> that, when called, starts two instances of itself in the background, each of which does the same. It rapidly exhausts the system's process limit, potentially leading to a system crash. It's a dangerous command and should not be executed.</li> </ul> </li> <li>Can you have more than one PID 1 process in a system?<ul> <li>Under normal circumstances, there is only one PID 1 process, which is the init process (like systemd or SysVinit) responsible for bootstrapping the user space and managing system processes. However, in namespaces (particularly with containers like Docker), each namespace can have its own PID 1, isolated from the host system.</li> </ul> </li> <li>Is it possible for a child process to continue running after its parent process has been terminated?<ul> <li>Yes, when a parent process is terminated, its child processes are not automatically killed. Instead, they are re-parented to the init process (or another appropriate process), which then becomes responsible for them.</li> </ul> </li> </ol>"},{"location":"9-linux/6-patching/","title":"Patching","text":""},{"location":"9-linux/6-patching/#sytem-updates","title":"Sytem Updates","text":""},{"location":"9-linux/6-patching/#what-are-system-updates","title":"What are System Updates?","text":"<ul> <li>Updates make sure your Linux system has the latest features and security fixes. It's like updating your phone's operating system to get new features and stay safe.</li> </ul>"},{"location":"9-linux/6-patching/#why-update","title":"Why Update?","text":"<ul> <li>To protect your system from hackers.</li> <li>To fix bugs that might cause problems.</li> <li>To get the latest features and improvements.</li> </ul>"},{"location":"9-linux/6-patching/#how-to-update-your-system","title":"How to Update Your System:","text":"<ol> <li> <p>For Ubuntu/Debian systems:</p> <ul> <li>Check for updates: <code>sudo apt update</code></li> <li>Install updates: <code>sudo apt upgrade</code></li> <li> <p>For Fedora/Red Hat systems:</p> </li> <li> <p>Check and install updates: <code>sudo dnf upgrade</code></p> </li> </ul> </li> </ol>"},{"location":"9-linux/6-patching/#package-management","title":"Package Management","text":""},{"location":"9-linux/6-patching/#what-is-package-management","title":"What is Package Management?","text":"<ul> <li>Package management involves installing, updating, and removing software packages. Think of it as managing apps on your phone.</li> </ul>"},{"location":"9-linux/6-patching/#why-manage-packages","title":"Why Manage Packages?","text":"<ul> <li>To install new software or apps you need.</li> <li>To remove software you don't use anymore.</li> <li>To keep your software up to date with the latest versions.</li> </ul>"},{"location":"9-linux/6-patching/#how-to-manage-packages","title":"How to Manage Packages:","text":"<ol> <li> <p>Installing a new package:</p> <ul> <li>Ubuntu/Debian: <code>sudo apt install packageName</code></li> <li>Fedora/Red Hat: <code>sudo dnf install packageName</code></li> <li> <p>Removing a package:</p> </li> <li> <p>Ubuntu/Debian: <code>sudo apt remove packageName</code></p> </li> <li>Fedora/Red Hat: <code>sudo dnf remove packageName</code></li> <li> <p>Searching for a package:</p> </li> <li> <p>Ubuntu/Debian: <code>apt search packageName</code></p> </li> <li>Fedora/Red Hat: <code>dnf search packageName</code></li> </ul> </li> </ol>"},{"location":"9-linux/6-patching/#example-setting-up-a-web-server","title":"Example: Setting Up a Web Server","text":"<ul> <li>Objective: Install Apache web server on your Linux system.</li> <li>Steps:<ol> <li>Update your system using the update commands mentioned above.</li> <li>Install Apache:<ul> <li>Ubuntu/Debian: <code>sudo apt install apache2</code></li> <li>Fedora/Red Hat: <code>sudo dnf install httpd</code></li> </ul> </li> <li>Check if Apache is running: <code>sudo systemctl status apache2</code> or <code>httpd</code> depending on your system.</li> </ol> </li> </ul>"},{"location":"9-linux/6-patching/#assignments","title":"Assignments","text":"<ol> <li>Install a Software: Choose any software, install it using your system's package manager, and then use it.</li> <li>Remove the Software: After trying the software, remove it from your system using the package manager.</li> </ol>"},{"location":"9-linux/6-patching/#interview-questions","title":"Interview Questions","text":"<ol> <li>What command would you use to update all packages on a Ubuntu system?</li> <li>How do you install a package using DNF?</li> <li>What's the difference between <code>apt</code> and <code>apt-get</code>?</li> <li>How can you list all installed packages on your Linux system?</li> </ol>"},{"location":"9-linux/7-networking/","title":"Networking","text":"<p>This module introduces you to the fundamentals of networking in Linux, including how to understand, configure, and manage network interfaces, utilize basic networking commands, and apply basic firewall and security measures using iptables and firewalld.</p>"},{"location":"9-linux/7-networking/#what-is-linux-networking","title":"What is Linux Networking ?","text":"<p>Networking in Linux allows your system to communicate with other computers and the internet. It involves various components such as network interfaces, IP addresses, DNS servers, and routing.</p> <ul> <li>Network Interfaces: These are the gateways through which a Linux system interacts with the network. Examples include Ethernet (e.g., eth0), WLAN (e.g., wlan0), and loopback (lo).</li> <li>IP Address: A unique identifier assigned to each device on a network, necessary for sending and receiving data.</li> </ul>"},{"location":"9-linux/7-networking/#how-to-configure-network-interfaces","title":"How to Configure Network Interfaces ?","text":"<p>Linux provides several tools for network configuration, including <code>ifconfig</code>, <code>ip</code>, and graphical tools like <code>NetworkManager</code>.</p> <ol> <li> <p>Using <code>ifconfig</code> (deprecated):</p> <ul> <li>View all interfaces: <code>ifconfig -a</code></li> <li>Configure an IP address: <code>sudo ifconfig eth0 192.168.1.2 netmask 255.255.255.0 up</code></li> <li> <p>Using <code>ip</code> command (recommended):</p> </li> <li> <p>List all interfaces: <code>ip link show</code></p> </li> <li>Set an IP address: <code>sudo ip addr add 192.168.1.2/24 dev eth0</code></li> <li>Bring an interface up or down: <code>sudo ip link set eth0 up</code> or <code>down</code></li> <li> <p>Restarting the network service:</p> </li> <li> <p>On systems using systemd: <code>sudo systemctl restart NetworkManager</code></p> </li> </ul> </li> </ol>"},{"location":"9-linux/7-networking/#basic-networking-commands","title":"Basic Networking Commands","text":"<ul> <li><code>ping</code>: Tests connectivity between your computer and a specified host.<ul> <li>Usage: <code>ping google.com</code></li> </ul> </li> <li><code>traceroute</code> (tracert on some systems): Shows the path packets take to reach a host.<ul> <li>Usage: <code>traceroute google.com</code></li> </ul> </li> <li><code>netstat</code>: Displays network connections, routing tables, interface statistics, masquerade connections, and multicast memberships.<ul> <li>Usage: <code>netstat -tuln</code></li> </ul> </li> <li><code>nslookup</code>: Queries Internet domain name servers for DNS details.<ul> <li>Usage: <code>nslookup google.com</code></li> </ul> </li> </ul>"},{"location":"9-linux/7-networking/#firewall-and-security-basics","title":"Firewall and Security Basics","text":"<p>Linux firewalls manage incoming and outgoing traffic based on predetermined security rules. Two popular firewall solutions in Linux are <code>iptables</code> and <code>firewalld</code>.</p> <ol> <li> <p>iptables:</p> <ul> <li>Viewing rules: <code>sudo iptables -L</code></li> <li>Allowing traffic on a port: <code>sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT</code></li> <li>Blocking an IP address: <code>sudo iptables -A INPUT -s 123.45.67.89 -j DROP</code></li> <li> <p>firewalld (CentOS/RHEL 7 and above):</p> </li> <li> <p>Start/Enable firewalld: <code>sudo systemctl start firewalld &amp;&amp; sudo systemctl enable firewalld</code></p> </li> <li>Check status: <code>sudo firewall-cmd --state</code></li> <li>Allowing traffic on a port: <code>sudo firewall-cmd --permanent --add-port=80/tcp</code></li> <li>Reloading firewall rules: <code>sudo firewall-cmd --reload</code></li> </ul> <p>Remember, <code>firewalld</code> uses zones and services for managing rules, which can simplify or complicate configurations depending on your familiarity.</p> </li> </ol>"},{"location":"9-linux/7-networking/#assignments","title":"Assignments","text":"<ol> <li>Configure a static IP: Assign a static IP address to a network interface on your Linux machine.</li> <li>Analyze network traffic: Use <code>ping</code> and <code>traceroute</code> to analyze network traffic to your favorite website.</li> <li>Configure firewall rules: Add a rule to allow HTTP traffic (port 80) through your firewall using both <code>iptables</code> and <code>firewalld</code>.</li> </ol>"},{"location":"9-linux/7-networking/#interview-questions","title":"Interview Questions","text":"<ol> <li>How do you assign a static IP address to a network interface in Linux?</li> <li>What is the difference between <code>iptables</code> and <code>firewalld</code>?</li> <li>How can you check the open ports on your Linux system?</li> <li>Explain the purpose of the loopback interface on a Linux system.</li> </ol>"},{"location":"9-linux/8-storage/","title":"Storage","text":""},{"location":"9-linux/8-storage/#logical-volume-manager-lvm","title":"Logical Volume Manager (LVM)","text":"<p>LVM is a device mapper offering logical volume management for the Linux kernel. It abstracts disk storage to allow more flexible volume management beyond traditional physical storage limitations.</p>"},{"location":"9-linux/8-storage/#key-concepts-and-operations","title":"Key Concepts and Operations","text":"<ol> <li>Physical Volume (PV): Represents a physical disk or disk partition.</li> <li>Volume Group (VG): A pool of storage formed by one or more physical volumes.</li> <li>Logical Volume (LV): A resizable, virtual disk created from space in a volume group.</li> </ol>"},{"location":"9-linux/8-storage/#step-by-step-guide","title":"Step-by-Step Guide","text":"<ol> <li> <p>Creating Physical Volumes:</p> <ul> <li>Use <code>pvcreate</code> to initialize physical storage devices as physical volumes. <code>pvcreate /dev/sda1 /dev/sdb1</code></li> </ul> </li> <li> <p>Creating a Volume Group:</p> <ul> <li>Combine multiple PVs into a VG using <code>vgcreate</code>. <code>vgcreate vgname /dev/sda1 /dev/sdb1</code></li> </ul> </li> <li> <p>Creating Logical Volumes:</p> <ul> <li>Allocate space from the VG to create an LV with <code>lvcreate</code>. <code>lvcreate -L 20G -n lvname vgname</code></li> </ul> </li> <li>Formatting and Mounting the LV:<ul> <li>Format the LV with a filesystem (e.g., ext4) and mount it. <code>mkfs.ext4 /dev/vgname/lvname mount /dev/vgname/lvname /mnt</code></li> </ul> </li> </ol>"},{"location":"9-linux/8-storage/#disk-quotas","title":"Disk Quotas","text":"<p>Disk quotas restrict the amount of disk space and number of files a user or group can use, essential for managing multi-user environments.</p>"},{"location":"9-linux/8-storage/#configuration-steps","title":"Configuration Steps","text":"<ol> <li>Enabling Quotas:<ul> <li>Edit <code>/etc/fstab</code> to include <code>usrquota</code> and/or <code>grpquota</code> on the desired filesystem.</li> <li>Remount the filesystem. <code>mount -o remount /home</code></li> </ul> </li> <li>Creating Quota Databases:<ul> <li>Initialize quota tracking with <code>quotacheck</code>. <code>quotacheck -vugm /home</code></li> </ul> </li> <li>Setting Quotas:<ul> <li>Use <code>edquota</code> to edit quotas for users or groups. <code>edquota -u username</code></li> </ul> </li> </ol>"},{"location":"9-linux/8-storage/#file-system-security","title":"File System Security","text":"<p>Maintaining file system security involves setting proper permissions, using Access Control Lists (ACLs), and optionally, configuring SELinux or AppArmor profiles.</p> <ol> <li> <p>Permissions and Ownership:</p> <ul> <li>Regularly review and adjust file and directory permissions and ownership using <code>chmod</code> and <code>chown</code>.</li> </ul> </li> <li> <p>Access Control Lists (ACLs):</p> <ul> <li>Use ACLs for finer-grained access control. <code>setfacl -m u:username:rwx /path/to/file</code></li> </ul> </li> <li> <p>Encryption:</p> <ul> <li>Consider encrypting sensitive data at rest, using tools like <code>cryptsetup</code> for disk encryption.</li> </ul> </li> <li> <p>SELinux:</p> <ul> <li>Leverage SELinux for mandatory access control policies to limit application and user access to files.</li> </ul> </li> </ol>"},{"location":"9-linux/8-storage/#assignments","title":"Assignments","text":"<ol> <li>Expand an Existing Logical Volume:<ul> <li>Add a new disk to your VM or physical server.</li> <li>Extend an existing volume group and logical volume to include this new disk space.</li> </ul> </li> <li>Implement User Quotas:<ul> <li>Configure user disk quotas on a system with multiple users. Test by attempting to exceed these quotas.</li> </ul> </li> <li>Secure a Directory Using ACLs:<ul> <li>Choose a directory used by multiple users and set up ACLs to restrict and allow specific access.</li> </ul> </li> </ol>"},{"location":"9-linux/8-storage/#interview-questions","title":"Interview Questions","text":"<ol> <li>Describe the process of extending a logical volume without causing downtime. What tools and commands would you use?</li> <li>How can disk quotas prevent a single user from consuming all disk resources on a shared server?</li> <li>Explain the difference between traditional Unix/Linux permissions and ACLs. When would you use one over the other?</li> </ol>"},{"location":"9-linux/9-security/","title":"Security","text":""},{"location":"9-linux/9-security/#understanding-the-components","title":"Understanding the Components","text":"<ul> <li>Kernel Security: The core of Linux security, involving mechanisms like namespaces, cgroups, and security modules (SELinux, AppArmor) to isolate and control resources.</li> <li>User Authentication: Managing who can access the system, focusing on password policies, SSH keys, and advanced methods like two-factor authentication.</li> <li>File System Security: Enforcing who can read, write, or execute files through permissions, ACLs (Access Control Lists), and encryption for data at rest.</li> <li>Network Security: Controlling incoming and outgoing traffic with firewalls (<code>iptables</code>, <code>firewalld</code>), securing data in transit (SSL/TLS), and reducing exposure (disabling unused services, ports).</li> <li></li> </ul>"},{"location":"9-linux/9-security/#authentication","title":"Authentication","text":"<p>Authentication verifies the identity of a user or process, establishing who can log in or access the system.</p> <p>Components &amp; Methods:</p> <ol> <li>Login Credentials<ul> <li>The standard method involving username and password verification.</li> <li>Managed through <code>/etc/passwd</code> for user information and <code>/etc/shadow</code> for encrypted passwords.</li> </ul> </li> <li>PAM (Pluggable Authentication Modules)<ul> <li>A framework that integrates multiple authentication methods, from standard password authentication to more complex mechanisms like OTPs.</li> <li>Configurable via <code>/etc/pam.d/</code> directory.</li> </ul> </li> <li>SSH Keys<ul> <li>Used for secure, password-less remote access, relying on public-private key cryptography.</li> <li>Keys are stored in <code>~/.ssh/authorized_keys</code> for users.</li> </ul> </li> <li>Two-Factor Authentication (2FA)<ul> <li>Adds an extra layer of security by requiring a second form of verification (e.g., a text message code or an app-generated code) along with the password.</li> </ul> </li> <li>Kerberos<ul> <li>A network authentication protocol that uses tickets to allow nodes communicating over a non-secure network to prove their identity to one another in a secure manner.</li> </ul> </li> </ol>"},{"location":"9-linux/9-security/#authorization","title":"Authorization","text":"<p>Authorization determines the access level or permissions of an authenticated user or process, specifying what they can do within the system.</p> <p>Components &amp; Methods:</p> <ol> <li>File Permissions<ul> <li>Determines access rights to files and directories based on ownership (user, group) and others, using read, write, and execute permissions.</li> </ul> </li> <li>Sudoers Configuration<ul> <li>Controls which users/groups can execute commands as other users via the <code>sudo</code> command, defined in <code>/etc/sudoers</code> or <code>/etc/sudoers.d/</code>.</li> </ul> </li> <li>Access Control Lists (ACLs)<ul> <li>Provides more fine-grained access control for files and directories beyond the standard user/group/others model, allowing specific permissions for any user or group.</li> </ul> </li> <li>SELinux and AppArmor<ul> <li>Mandatory Access Control (MAC) systems that enforce security policies, limiting what processes can access and do, regardless of traditional Unix permissions.</li> </ul> </li> <li>Capabilities<ul> <li>A feature that divides the powers of the root user into distinct privileges, which can be independently assigned to or removed from processes, allowing for more granular control over system permissions.</li> </ul> </li> </ol>"},{"location":"9-linux/9-security/#security-patterns-and-best-practices","title":"Security Patterns and Best Practices","text":"<p>1. The Principle of Least Privilege -   Pattern: Ensure entities (users, programs, processes) have only the minimal permissions necessary to perform their tasks. -   Implementation: Run services with non-root users, use <code>sudo</code> for administrative tasks, and apply strict filesystem permissions.</p> <p>2. Immutable Infrastructure -   Pattern: Systems are replaced rather than changed. If a change is needed, a new version of the infrastructure is deployed and replaced atomically. -   Implementation: Use containerization (Docker) and orchestration tools (Kubernetes) to deploy applications, ensuring a consistent and secure environment that can be quickly replaced if compromised.</p> <p>3. Defense in Depth -   Pattern: Employ multiple layers of security so that if one layer fails, others still protect the system. -   Implementation: Combine SELinux/AppArmor, firewalls, and intrusion detection systems. Encrypt data at rest and in transit.</p> <p>4. Regular Auditing and Monitoring -   Pattern: Continuous evaluation of system security to identify and rectify potential vulnerabilities. -   Implementation: Use <code>auditd</code> for auditing, employ log management tools (ELK stack, Graylog) for monitoring, and conduct regular vulnerability scanning with tools like OpenVAS.</p> <p>5. Secure by Default -   Pattern: Systems are secure out of the box, requiring changes to decrease security rather than enhance it. -   Implementation: Minimize installed packages, disable root SSH login, and apply fail2ban to protect against brute force attacks.</p> <p>,l;,l,l,,mmmmmmmmmm</p>"}]}