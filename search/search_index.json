{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Course Contents","text":"<p>In this course, you will learn the fundamentals of DevOps. You will learn how to use DevOps tools and practices to improve your software development and delivery process.</p> <p>Below are the topics that will be covered in this course:</p>"},{"location":"#introduction","title":"Introduction","text":"<ul> <li>SDLC Basics</li> <li>What is DevOps?</li> <li>Why DevOps?</li> </ul>"},{"location":"#os-networking","title":"OS &amp; Networking","text":"<ul> <li>OS (Linux)</li> <li>Networking</li> <li>Bash</li> </ul>"},{"location":"#scripting","title":"Scripting","text":"<ul> <li>Python</li> </ul>"},{"location":"#version-control","title":"Version Control","text":"<ul> <li>GIT</li> <li>Github</li> </ul>"},{"location":"#cloud-basics","title":"Cloud Basics","text":"<ul> <li> <p>AWS Well-Architected Framework</p> </li> <li> <p>Identity &amp; Access Management</p> <ul> <li>AWS IAM</li> </ul> </li> <li> <p>Data Storage</p> <ul> <li>AWS S3</li> <li>AWS RDS</li> <li>AWS Dynamo DB</li> </ul> </li> <li> <p>Networking</p> <ul> <li>AWS VPC</li> <li>AWS Direct Connect</li> <li>AWS CloudFront</li> <li>AWS Route 53</li> <li>AWS ELB</li> </ul> </li> <li> <p>Compute</p> <ul> <li>AWS EC2</li> <li>AWS Lambda</li> </ul> </li> </ul>"},{"location":"#continuous-integration-deployment","title":"Continuous Integration &amp; Deployment","text":"<ul> <li>Github Workflow</li> <li>Github Actions</li> <li>CI CD Pipeline</li> <li>Git Best Practices</li> <li>Pipeline Security</li> </ul>"},{"location":"#containerisation-and-orchestration","title":"Containerisation and Orchestration","text":""},{"location":"#docker","title":"Docker","text":"<ul> <li>Architecture</li> <li>Networking</li> <li>Storage</li> <li>Security</li> <li>CI/CD Integration</li> </ul>"},{"location":"#kubernetes","title":"Kubernetes","text":"<ul> <li>Architecture</li> <li>Networking</li> <li>Storage</li> <li>Security</li> <li>Ci/CD Integration</li> </ul>"},{"location":"#infrastructure-as-a-code","title":"Infrastructure as a Code","text":"<ul> <li>Terraform</li> <li>Ansible</li> </ul>"},{"location":"#monitoring","title":"Monitoring","text":"<ul> <li>CloudWatch (Primary)</li> <li>Prometheus</li> <li>Grafana</li> </ul>"},{"location":"ansible/0-index/","title":"Index","text":""},{"location":"ansible/0-index/#introduction-to-ansible","title":"Introduction to Ansible","text":"<ul> <li>What is Ansible?</li> <li>Why use Ansible?</li> <li>Ansible architecture</li> </ul>"},{"location":"ansible/0-index/#ansible-installation","title":"Ansible Installation","text":"<ul> <li>Installing Ansible on Linux</li> <li>Installing Ansible on Windows</li> <li>Verifying Ansible installation</li> </ul>"},{"location":"ansible/0-index/#ansible-inventory","title":"Ansible Inventory","text":"<ul> <li>Understanding Ansible inventory</li> <li>Creating inventory files</li> <li>Specifying hosts and groups</li> <li>Variables in inventory</li> </ul>"},{"location":"ansible/0-index/#ansible-playbooks","title":"Ansible Playbooks","text":"<ul> <li>Introduction to Ansible playbooks</li> <li>Writing your first playbook</li> <li>Tasks and modules</li> <li>Variables and facts</li> <li>Conditionals and loops</li> </ul>"},{"location":"ansible/0-index/#ansible-roles","title":"Ansible Roles","text":"<ul> <li>What are Ansible roles?</li> <li>Creating and organizing roles</li> <li>Role structure and main tasks</li> <li>Role variables and defaults</li> </ul>"},{"location":"ansible/0-index/#ansible-modules","title":"Ansible Modules","text":"<ul> <li>Common Ansible modules</li> <li>Using modules in playbooks</li> <li>Custom modules</li> </ul>"},{"location":"ansible/0-index/#ansible-vault","title":"Ansible Vault","text":"<ul> <li>Introduction to Ansible Vault</li> <li>Encrypting sensitive data</li> <li>Decrypting and using vaulted data</li> </ul>"},{"location":"ansible/0-index/#ansible-best-practices","title":"Ansible Best Practices","text":"<ul> <li>Structuring Ansible projects</li> <li>Using roles and playbooks effectively</li> <li>Error handling and debugging</li> <li>Security considerations</li> </ul>"},{"location":"ansible/0-index/#ansible-tips-and-tricks","title":"Ansible Tips and Tricks","text":"<ul> <li>Useful Ansible commands</li> <li>Working with Ansible collections</li> <li>Integrating Ansible with other tools</li> <li>Troubleshooting common issues</li> </ul>"},{"location":"ansible/0-index/#conclusion","title":"Conclusion","text":"<ul> <li>Recap of key concepts</li> <li>Next steps in learning Ansible</li> </ul>"},{"location":"ansible/1-introduction/","title":"Introduction","text":""},{"location":"ansible/1-introduction/#what-is-ansible","title":"What is Ansible?","text":"<p>Ansible is an open-source automation tool that allows you to automate IT tasks such as configuration management, application deployment, and orchestration. It uses a simple and human-readable language called YAML to define automation tasks.</p>"},{"location":"ansible/1-introduction/#why-use-ansible","title":"Why use Ansible?","text":"<p>There are several reasons why you might want to use Ansible for your automation needs:</p> <ul> <li>Simplicity: Ansible has a low learning curve and uses a declarative approach, making it easy to understand and use.</li> <li>Agentless: Ansible does not require any agents to be installed on the target systems, making it lightweight and easy to manage.</li> <li>Idempotent: Ansible ensures that the desired state of the system is achieved, regardless of the current state. This makes it safe to run Ansible playbooks multiple times.</li> <li>Extensibility: Ansible can be extended using modules, plugins, and custom scripts, allowing you to tailor it to your specific needs.</li> <li>Community and Ecosystem: Ansible has a large and active community, with a wide range of modules and roles available for various tasks and technologies.</li> </ul>"},{"location":"ansible/1-introduction/#ansible-architecture","title":"Ansible Architecture","text":"<p>Ansible follows a client-server architecture, where the control node (also known as the Ansible controller) manages the automation process. The control node communicates with the managed nodes (also known as the Ansible hosts) over SSH or WinRM.</p> <p>The key components of the Ansible architecture are:</p> <ul> <li>Inventory: The inventory is a file that contains a list of managed nodes and their connection details. It can be static or dynamic, depending on your requirements.</li> <li>Playbooks: Playbooks are YAML files that define a set of tasks to be executed on the managed nodes. They can include variables, conditionals, loops, and more.</li> <li>Modules: Modules are reusable units of code that perform specific tasks on the managed nodes. Ansible provides a wide range of built-in modules, and you can also create your own custom modules.</li> <li>Ad-hoc Commands: Ad-hoc commands allow you to run simple tasks on the managed nodes without the need for a playbook. They are useful for quick, one-off tasks.</li> <li>Roles: Roles are a way to organize and reuse playbooks and related files. They provide a structured approach to managing complex automation tasks.</li> </ul> <p>This is just a brief introduction to Ansible. There is much more to learn and explore. Happy automating!</p>"},{"location":"ansible/1-introduction/#introduction-to-ansible","title":"Introduction to Ansible","text":""},{"location":"ansible/1-introduction/#what-is-ansible_1","title":"What is Ansible?","text":"<p>Ansible is an open-source automation tool that allows you to automate IT tasks such as configuration management, application deployment, and orchestration. It uses a simple and human-readable language called YAML to define automation tasks.</p>"},{"location":"ansible/1-introduction/#why-use-ansible_1","title":"Why use Ansible?","text":"<p>There are several reasons why you should consider using Ansible for automation:</p> <ol> <li>Simplicity: Ansible has a low learning curve and uses a declarative approach, making it easy to understand and use.</li> <li>Agentless: Ansible does not require any agents to be installed on the target systems, making it lightweight and easy to manage.</li> <li>Idempotent: Ansible ensures that the desired state of the system is achieved, regardless of the current state. This makes it safe to run Ansible playbooks multiple times.</li> <li>Extensibility: Ansible can be extended using modules, plugins, and custom scripts, allowing you to tailor it to your specific needs.</li> <li>Community and Ecosystem: Ansible has a large and active community, with a vast collection of pre-built roles and playbooks available on Ansible Galaxy.</li> </ol>"},{"location":"ansible/1-introduction/#ansible-architecture_1","title":"Ansible Architecture","text":"<p>Ansible follows a client-server architecture, where the control node (also known as the Ansible controller) manages the automation process. The control node communicates with the managed nodes over SSH or WinRM.</p> <p>Here is a high-level overview of the Ansible architecture:</p>"},{"location":"ansible/1-introduction/#ansible-architecture_2","title":"Ansible Architecture","text":"<p>Ansible follows a client-server architecture where the control node manages the configuration and orchestration of the target nodes. The control node communicates with the target nodes over SSH or WinRM protocols to execute tasks.</p> <p>The main components of Ansible architecture are:</p> <ul> <li> <p>Control Node: The machine where Ansible is installed and from where the configuration management tasks are executed.</p> </li> <li> <p>Inventory: A list of target nodes that Ansible manages. It can be a simple text file or a dynamic inventory script.</p> </li> <li> <p>Playbooks: YAML files that define the desired state of the target nodes. Playbooks contain a set of tasks to be executed on the target nodes.</p> </li> <li> <p>Modules: Pre-built scripts that Ansible uses to perform specific tasks on the target nodes. Modules are executed remotely on the target nodes.</p> </li> <li> <p>Plugins: Extend the functionality of Ansible by providing additional features or integrating with other tools.</p> </li> <li> <p>Facts: System information collected from the target nodes, such as IP addresses, operating system details, etc.</p> </li> <li> <p>SSH/WinRM: Protocols used by Ansible to establish a secure connection with the target nodes.</p> </li> <li> <p>Ansible Tower: A web-based UI and REST API for managing and monitoring Ansible resources, such as playbooks, inventories, and job templates.</p> </li> </ul> <p>The architecture diagram above provides a visual representation of how these components interact with each other in an Ansible setup.</p>"},{"location":"ansible/2-installation/","title":"Installation","text":"<ol> <li>Update Ubuntu Package Repository:          Execute <code>sudo apt update</code> to refresh your package lists.</li> <li>Install Software Properties Common:          Run <code>sudo apt install software-properties-common</code> to allow for additional repository management.</li> <li>Add Ansible PPA:          Use <code>sudo add-apt-repository --yes --update ppa:ansible/ansible</code> to add the official Ansible Personal Package Archive.</li> <li>Install Ansible:          Install Ansible by running <code>sudo apt install ansible</code>.</li> <li>Verify Installation:          Check your Ansible installation with <code>ansible --version</code>, which displays the installed Ansible version.</li> </ol>"},{"location":"cloud-basics/AWS/1-introduction/","title":"Introcution to AWS","text":""},{"location":"introduction/SDLC-basics/","title":"SDLC Basics","text":""},{"location":"scripting/python/1-introduction/","title":"Introduction to Python","text":""},{"location":"scripting/python/1-introduction/#what-is-python","title":"What is Python","text":"<p>Python is a powerful, versatile, and beginner-friendly programming language created by Guido van Rossum and first released in 1991. It's often described as a high-level, general-purpose language, meaning it's:</p> <p>High-level: You code using human-readable constructs instead of low-level machine instructions, making it more intuitive and natural to learn and use.</p> <p>General-purpose: It can be applied to various tasks and domains, from web development and data science to automation and system administration.</p> <p>Python's popularity has surged in recent years, thanks to its simplicity, readability, and extensive ecosystem of libraries and frameworks. It's widely used in fields like web development, data analysis, machine learning, scientific computing, and more.</p> <p>Here are some key characteristics of Python:</p> <ol> <li> <p>Open-Source: Python is an open-source language, meaning its source code is freely available for anyone to inspect, modify, and distribute. This fosters collaboration, transparency, and continuous improvement.</p> </li> <li> <p>Readable Syntax: Python prioritizes code readability with its simple and clear syntax. It heavily relies on indentation to define code blocks, improving its visual structure and making it easier to understand.</p> </li> <li> <p>Interpreted Language: Unlike compiled languages like C++ or Java, Python code doesn't need to be translated into machine code before execution. Instead, an interpreter directly reads and executes your code line by line, allowing for faster development and testing cycles.</p> </li> <li> <p>Dynamically Typed: You don't explicitly declare the data type of variables in Python. The interpreter infers the type based on the value assigned, providing more flexibility but requiring less upfront effort.</p> </li> <li> <p>Object-Oriented: Python supports object-oriented programming (OOP) concepts like classes, objects, inheritance, and polymorphism, enabling you to organize your code effectively for complex projects.</p> </li> <li> <p>Extensive Standard Library: Python comes with a rich standard library containing useful modules for various tasks, including file I/O, networking, regular expressions, web scraping, and more. This saves you time and effort by readily providing solutions for common programming needs.</p> </li> <li> <p>Large and Active Community: Python boasts a vast and supportive community of developers, offering numerous resources, libraries, frameworks, and tutorials. This makes it easier to find help and learn from others' experiences.</p> </li> </ol>"},{"location":"scripting/python/1-introduction/#why-learn-python","title":"Why learn Python?","text":"<p>Here are some of the reasons why Python is such a popular choice for both beginners and experienced programmers:</p> <ul> <li>Easy to Learn: Its simple syntax and clear structure make it an excellent starting point for those new to programming.</li> <li>Versatile: You can use it for various tasks, from simple scripts to complex applications.</li> <li>Powerful: Despite its ease of use, Python can handle demanding tasks thanks to its robust libraries and frameworks.</li> <li>Large Community: You'll have access to extensive resources, tutorials, and support from the active Python community.</li> <li>Growing Demand: Python is one of the most in-demand programming languages in various industries, making it a valuable skill for career advancement.</li> </ul>"},{"location":"scripting/python/1-introduction/#installing-and-setting-up-python","title":"Installing and setting up Python","text":"<p>Before you start learning Python, you need to install it on your system. Python is available for all major operating systems, including Windows, macOS, and Linux.</p> <p>Refer to the official Python website for detailed installation instructions: Python Downloads</p>"},{"location":"scripting/python/1-introduction/#introduction-to-the-interpreter","title":"Introduction to the interpreter","text":"<p>Python comes with an interactive interpreter that allows you to execute code and see the results immediately. This is a great way to experiment with the language and test small code snippets.</p> <p>To start the Python interpreter, open your terminal or command prompt and type <code>python</code> (or <code>python3</code> on some systems). You should see a prompt like <code>&gt;&gt;&gt;</code>, indicating that the interpreter is ready to accept your commands.</p> <p>Here's an example of using the Python interpreter:</p> <pre><code>&gt;&gt;&gt; print(\"Hello, Python!\")\nHello, Python!\n</code></pre> <p>You can also run Python scripts saved in files using the interpreter. For example, if you have a file called <code>hello.py</code> containing the line <code>print(\"Hello, Python!\")</code>, you can run it using <code>python hello.py</code>.</p> <p>Alternatively, you can use an Integrated Development Environment (IDE) like PyCharm, VSCode, or Jupyter Notebook for a more feature-rich coding experience.</p>"},{"location":"scripting/python/1-introduction/#basic-syntax-and-keywords","title":"Basic syntax and keywords","text":"<p>Python has a simple and consistent syntax that's easy to read and understand. Here are some basic concepts to get you started:</p> <ul> <li> <p>Comments: You can add comments to your code using the <code>#</code> symbol. Comments are ignored by the interpreter and are used to document your code.</p> </li> <li> <p>Indentation: Python uses indentation to define code blocks, such as loops, functions, and classes. This makes the code visually clear and reduces the need for explicit block delimiters.</p> </li> <li> <p>Variables: You can declare variables and assign values to them using the <code>=</code> operator. Python is dynamically typed, so you don't need to specify the data type of a variable.</p> </li> <li> <p>Data Types: Python supports various data types, including integers, floats, strings, booleans, lists, tuples, dictionaries, and more.</p> </li> <li> <p>Operators: Python provides a wide range of operators for arithmetic, comparison, logical operations, and more.</p> </li> <li> <p>Input and Output: You can take input from the user and display output using the <code>input()</code> and <code>print()</code> functions.</p> </li> </ul> <p>In the next section, we'll explore these concepts in more detail and learn how to use them in practice.</p>"},{"location":"scripting/python/2-datatypes-and-variables/","title":"Data types and Variables","text":""},{"location":"scripting/python/2-datatypes-and-variables/#variables","title":"Variables","text":"<p>Variables are used to store data in a program. They are like containers that hold values. You can think of them as labels that you can assign to values. In Python, you can create a variable by giving it a name and assigning a value to it using the <code>=</code> operator.</p> <pre><code># Assigning a value to a variable\nx = 10\ny = 3.14\nname = \"Alice\"\nis_student = True\n</code></pre>"},{"location":"scripting/python/2-datatypes-and-variables/#data-types","title":"Data Types","text":""},{"location":"scripting/python/2-datatypes-and-variables/#numbers","title":"Numbers","text":"<ul> <li> <p>Integers (int): represent whole numbers (positive, negative, or zero) with unlimited size. Examples: 10, -23, 0.</p> </li> <li> <p>Floats (float): represent decimal numbers with limited precision (approximately 15 decimal places). Examples: 3.14, -5.2e10 (scientific notation).</p> </li> </ul>"},{"location":"scripting/python/2-datatypes-and-variables/#strings","title":"Strings","text":"<ul> <li>A string is a sequence of characters enclosed within single or double quotes. Examples: \"hello\", 'world', \"123\".</li> </ul>"},{"location":"scripting/python/2-datatypes-and-variables/#boolean","title":"Boolean","text":"<ul> <li>A boolean value is either <code>True</code> or <code>False</code>. It is used to represent truth values. Examples: True, False.</li> </ul>"},{"location":"scripting/python/2-datatypes-and-variables/#none","title":"None","text":"<ul> <li>The <code>None</code> keyword is used to represent the absence of a value. It is similar to <code>null</code> in other programming languages.</li> </ul>"},{"location":"scripting/python/2-datatypes-and-variables/#operators","title":"Operators","text":""},{"location":"scripting/python/2-datatypes-and-variables/#arithmetic-operators","title":"Arithmetic Operators","text":"<ul> <li><code>+</code> (addition)</li> <li><code>-</code> (subtraction)</li> <li><code>*</code> (multiplication)</li> <li><code>/</code> (division)</li> <li><code>%</code> (modulus)</li> <li><code>**</code> (exponentiation)</li> <li><code>//</code> (floor division)</li> </ul> <pre><code># Arithmetic operators\nx = 10\ny = 3\nprint(x + y)  # 13\nprint(x - y)  # 7\nprint(x * y)  # 30\nprint(x / y)  # 3.3333333333333335\nprint(x % y)  # 1\nprint(x ** y) # 1000\nprint(x // y) # 3\n</code></pre>"},{"location":"scripting/python/2-datatypes-and-variables/#comparison-operators","title":"Comparison Operators","text":"<ul> <li><code>==</code> (equal to)</li> <li><code>!=</code> (not equal to)</li> <li><code>&lt;</code> (less than)</li> <li><code>&gt;</code> (greater than)</li> <li><code>&lt;=</code> (less than or equal to)</li> <li><code>&gt;=</code> (greater than or equal to)</li> </ul> <pre><code># Comparison operators\nx = 10\ny = 5\nprint(x == y)  # False\nprint(x != y)  # True\nprint(x &lt; y)   # False\nprint(x &gt; y)   # True\nprint(x &lt;= y)  # False\nprint(x &gt;= y)  # True\n</code></pre>"},{"location":"scripting/python/2-datatypes-and-variables/#logical-operators","title":"Logical Operators","text":"<ul> <li><code>and</code> (logical and)</li> <li><code>or</code> (logical or)</li> <li><code>not</code> (logical not)</li> </ul> <pre><code># Logical operators\nx = True\ny = False\nprint(x and y)  # False\nprint(x or y)   # True\nprint(not x)    # False\n</code></pre>"},{"location":"scripting/python/2-datatypes-and-variables/#assignment-operators","title":"Assignment Operators","text":"<ul> <li><code>=</code> (assign value)</li> <li><code>+=</code> (add and assign)</li> <li><code>-=</code> (subtract and assign)</li> <li><code>*=</code> (multiply and assign)</li> <li><code>/=</code> (divide and assign)</li> <li><code>%=</code> (modulus and assign)</li> <li><code>**=</code> (exponentiate and assign)</li> <li><code>//=</code> (floor divide and assign)</li> </ul> <pre><code># Assignment operators\nx = 10\nx += 5  # equivalent to x = x + 5\nx -= 3  # equivalent to x = x - 3\nx *= 2  # equivalent to x = x * 2\nx /= 4  # equivalent to x = x / 4\nx %= 3  # equivalent to x = x % 3\nx **= 2 # equivalent to x = x ** 2\nx //= 5 # equivalent to x = x // 5\n</code></pre>"},{"location":"scripting/python/2-datatypes-and-variables/#identity-operators","title":"Identity Operators","text":"<ul> <li><code>is</code> (object identity)</li> <li><code>is not</code> (negated object identity)</li> </ul> <pre><code># Identity operators\nx = [1, 2, 3]\ny = [1, 2, 3]\nz = x\nprint(x is y)    # False\nprint(x is not y) # True\nprint(x is z)    # True\n</code></pre>"},{"location":"scripting/python/2-datatypes-and-variables/#membership-operators","title":"Membership Operators","text":"<ul> <li><code>in</code> (sequence membership)</li> <li><code>not in</code> (negated sequence membership)</li> </ul> <pre><code># Membership operators\nx = [1, 2, 3, 4, 5]\nprint(3 in x)    # True\nprint(6 not in x) # True\n</code></pre>"},{"location":"scripting/python/2-datatypes-and-variables/#type-conversion","title":"Type Conversion","text":"<p>You can convert between different data types using built-in functions like <code>int()</code>, <code>float()</code>, <code>str()</code>, <code>bool()</code>, etc.</p> <pre><code># Type conversion\nx = 10\ny = 3.14\nz = \"20\"\nprint(float(x))  # 10.0\nprint(int(y))    # 3\nprint(int(z))    # 20\nprint(str(x))    # '10'\nprint(bool(x))   # True\nprint(bool(0))   # False\n</code></pre>"},{"location":"scripting/python/2-datatypes-and-variables/#input-and-output","title":"Input and Output","text":""},{"location":"scripting/python/2-datatypes-and-variables/#input","title":"Input","text":"<p>You can use the <code>input()</code> function to take user input from the keyboard. The input is always returned as a string.</p> <pre><code># Input\nname = input(\"Enter your name: \")\nprint(\"Hello, \" + name)\n</code></pre>"},{"location":"scripting/python/2-datatypes-and-variables/#output","title":"Output","text":"<p>You can use the <code>print()</code> function to display output on the screen. You can pass multiple arguments to <code>print()</code> separated by commas.</p> <pre><code># Output\nx = 10\ny = 3.14\nname = \"Alice\"\nprint(\"The value of x is\", x)\nprint(\"The value of y is\", y)\nprint(\"Hello,\", name)\n</code></pre>"},{"location":"scripting/python/2-datatypes-and-variables/#comments","title":"Comments","text":"<p>Comments are used to explain the code and make it more readable. In Python, you can use the <code>#</code> symbol to write a single-line comment.</p> <pre><code># This is a single-line comment\n</code></pre> <p>For multi-line comments, you can enclose the text within triple quotes.</p> <pre><code>\"\"\"\nThis is a\nmulti-line comment\n\"\"\"\n</code></pre>"},{"location":"scripting/python/3-control-flow/","title":"Indentation in Python","text":"<p>In Python, indentation is used to define a block of code. The standard indentation is 4 spaces. </p> <pre><code># Example\nx = 10\nif x &gt; 5:\n    print('x is greater than 5')\n</code></pre> <p>If you use a different number of spaces or tabs, Python will raise an <code>IndentationError</code>.</p> <pre><code># Example\nx = 10\nif x &gt; 5:\n    print('x is greater than 5') # IndentationError\n</code></pre>"},{"location":"scripting/python/3-control-flow/#control-flow","title":"Control Flow","text":""},{"location":"scripting/python/3-control-flow/#conditional-statements","title":"Conditional Statements","text":"<p>Conditional statements are used to execute a block of code based on a condition. </p>"},{"location":"scripting/python/3-control-flow/#if-statements","title":"<code>if</code> Statements","text":"<p>The <code>if</code> statement is the most basic form of a conditional statement. It is used to execute a block of code if a condition is true.</p> <pre><code># Syntax\nif condition:\n    # code block\n</code></pre> <p>The <code>if</code> statement is followed by a condition. If the condition is true, the code block is executed. If the condition is false, the code block is skipped.</p> <pre><code># Example\nx = 10\nif x &gt; 5:\n    print('x is greater than 5')\n</code></pre>"},{"location":"scripting/python/3-control-flow/#if-else-statements","title":"<code>if</code>-<code>else</code> Statements","text":"<p>The <code>if</code> statement can be followed by an <code>else</code> statement. The <code>else</code> statement is used to execute a block of code if the condition is false.</p> <pre><code># Syntax\nif condition:\n    # code block\nelse:\n    # code block\n</code></pre> <pre><code># Example\nx = 3\nif x &gt; 5:\n    print('x is greater than 5')\nelse:\n    print('x is less than or equal to 5')\n</code></pre>"},{"location":"scripting/python/3-control-flow/#if-elif-else-statements","title":"<code>if</code>-<code>elif</code>-<code>else</code> Statements","text":"<p>The <code>if</code> statement can be followed by one or more <code>elif</code> (else if) statements. The <code>elif</code> statement is used to check additional conditions if the previous conditions are false.</p> <pre><code># Syntax\nif condition:\n    # code block\nelif condition:\n    # code block\nelse:\n    # code block\n</code></pre> <pre><code># Example\nx = 3\nif x &gt; 5:\n    print('x is greater than 5')\nelif x == 5:\n    print('x is equal to 5')\nelse:\n    print('x is less than 5')\n</code></pre>"},{"location":"scripting/python/3-control-flow/#nested-if-statements","title":"Nested <code>if</code> Statements","text":"<p><code>if</code> statements can be nested inside other <code>if</code> statements. This is useful when you want to check for additional conditions.</p> <pre><code># Example\nx = 10\ny = 5\nif x &gt; 5:\n    if y &gt; 5:\n        print('x and y are greater than 5')\n    else:\n        print('x is greater than 5, but y is less than or equal to 5')\nelse:\n    print('x is less than or equal to 5')\n</code></pre>"},{"location":"scripting/python/3-control-flow/#loops","title":"Loops","text":"<p>Loops are used to execute a block of code multiple times.</p>"},{"location":"scripting/python/3-control-flow/#for-loops","title":"<code>for</code> Loops","text":"<p>The <code>for</code> loop is used to iterate over a sequence (e.g., a list, tuple, string).</p> <pre><code># Syntax\nfor item in sequence:\n    # code block\n</code></pre> <pre><code># Example\nfruits = ['apple', 'banana', 'cherry']\nfor fruit in fruits:\n    print(fruit)\n</code></pre>"},{"location":"scripting/python/3-control-flow/#while-loops","title":"<code>while</code> Loops","text":"<p>The <code>while</code> loop is used to execute a block of code as long as a condition is true.</p> <pre><code># Syntax\nwhile condition:\n    # code block\n</code></pre> <pre><code># Example\nx = 0\nwhile x &lt; 5:\n    print(x)\n    x += 1\n</code></pre>"},{"location":"scripting/python/3-control-flow/#nested-loops","title":"Nested Loops","text":"<p>Loops can be nested inside other loops. This is useful when you want to iterate over multiple sequences.</p> <pre><code># Example\nadj = ['red', 'big', 'tasty']\nfruits = ['apple', 'banana', 'cherry']\nfor a in adj:\n    for f in fruits:\n        print(a, f)\n</code></pre>"},{"location":"scripting/python/3-control-flow/#exercises","title":"Exercises","text":"<ol> <li>Write a program to check if a number is positive, negative, or zero.</li> <li>Write a program to find the sum of all numbers in a list.</li> <li>Write a program to find the factorial of a number.</li> <li>Write a program to print the Fibonacci series up to <code>n</code> terms.</li> <li>Write a program to check if a number is prime or not.</li> <li>Write a program to check if a string is a palindrome.</li> </ol>"},{"location":"scripting/python/4-functions/","title":"Functions","text":""},{"location":"scripting/python/4-functions/#defining-functions","title":"Defining Functions","text":"<p>A function is a block of code that performs a specific task. It can take input, perform operations, and return a result. Functions are used to organize code into reusable blocks, which can be called from different parts of a program.</p> <p>In Python, you can define a function using the <code>def</code> keyword followed by the function name and a pair of parentheses. The function body is indented and contains the code to be executed.</p> <pre><code># Syntax\ndef function_name(parameters):\n    # function body\n    # code block\n</code></pre> <pre><code># Example\ndef greet(name):\n    print(\"Hello, \" + name)\n</code></pre> <p>In the example above, we define a function called <code>greet</code> that takes a single parameter <code>name</code>. The function body contains a single statement that prints a greeting message to the console.</p>"},{"location":"scripting/python/4-functions/#arguments-and-parameters","title":"Arguments and Parameters","text":"<p>A function can take zero or more parameters as input. These parameters are specified in the function definition and are used to pass values to the function. When a function is called, the values passed to it are called arguments.</p> <pre><code># Syntax\ndef function_name(param1, param2, ...):\n    # function body\n    # code block\n</code></pre> <pre><code># Example\ndef add(x, y):\n    return x + y\n</code></pre> <p>In the example above, we define a function called <code>add</code> that takes two parameters <code>x</code> and <code>y</code>. The function body contains a single statement that returns the sum of the two parameters.</p>"},{"location":"scripting/python/4-functions/#returning-values","title":"Returning Values","text":"<p>A function can return a value using the <code>return</code> statement. The returned value can be used in the calling code.</p> <pre><code># Syntax\ndef function_name(parameters):\n    # function body\n    # code block\n    return value\n</code></pre> <pre><code># Example\ndef add(x, y):\n    return x + y\n</code></pre> <p>In the example above, the <code>add</code> function returns the sum of the two parameters <code>x</code> and <code>y</code>. The calling code can use the returned value as needed.</p>"},{"location":"scripting/python/4-functions/#scope-and-lifetime-of-variables","title":"Scope and Lifetime of Variables","text":"<p>Variables defined inside a function are local to that function and cannot be accessed from outside. They have a limited scope and lifetime, which is determined by the function's execution.</p> <pre><code># Example\ndef greet(name):\n    message = \"Hello, \" + name\n    print(message)\n\ngreet(\"Alice\")\nprint(message)  # NameError: name 'message' is not defined\n</code></pre> <p>In the example above, the <code>message</code> variable is defined inside the <code>greet</code> function and cannot be accessed from outside. Attempting to access it from the calling code results in a <code>NameError</code>.</p> <p>Variables defined outside any function are global and can be accessed from any part of the program. However, it is good practice to avoid using global variables as much as possible, as they can lead to unexpected behavior and make the code harder to understand and maintain.</p>"},{"location":"scripting/python/5-data-structures/","title":"Data Structures","text":""},{"location":"scripting/python/5-data-structures/#lists","title":"Lists","text":"<p>A list is a collection of items, which can be of different types. Lists are mutable, meaning that you can change the elements of a list after it has been created. Lists are created using square brackets <code>[]</code> and elements are separated by commas.</p> <pre><code># Syntax\nlist_name = [item1, item2, ...]\n</code></pre> <pre><code># Example\nfruits = [\"apple\", \"banana\", \"cherry\"]\n</code></pre> <p>In the example above, we define a list called <code>fruits</code> that contains three string elements.</p>"},{"location":"scripting/python/5-data-structures/#accessing-elements","title":"Accessing Elements","text":"<p>You can access individual elements of a list using their index. The index of the first element is 0, the index of the second element is 1, and so on. You can also use negative indices to access elements from the end of the list.</p> <pre><code># Syntax\nelement = list_name[index]\n</code></pre> <pre><code># Example\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(fruits[0])  # Output: apple\nprint(fruits[-1])  # Output: cherry\n</code></pre> <p>In the example above, we access the first and last elements of the <code>fruits</code> list using their indices.</p>"},{"location":"scripting/python/5-data-structures/#modifying-elements","title":"Modifying Elements","text":"<p>You can modify the elements of a list by assigning new values to them using their indices.</p> <pre><code># Syntax\nlist_name[index] = new_value\n</code></pre> <pre><code># Example\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfruits[1] = \"orange\"\nprint(fruits)  # Output: ['apple', 'orange', 'cherry']\n</code></pre> <p>In the example above, we change the second element of the <code>fruits</code> list from \"banana\" to \"orange\".</p>"},{"location":"scripting/python/5-data-structures/#adding-and-removing-elements","title":"Adding and Removing Elements","text":"<p>You can add new elements to a list using the <code>append</code> method, and remove elements using the <code>remove</code> method.</p> <pre><code># Syntax\nlist_name.append(new_item)\nlist_name.remove(item)\n</code></pre> <pre><code># Example\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfruits.append(\"orange\")\nprint(fruits)  # Output: ['apple', 'banana', 'cherry', 'orange']\nfruits.remove(\"banana\")\nprint(fruits)  # Output: ['apple', 'cherry', 'orange']\n</code></pre> <p>In the example above, we add \"orange\" to the <code>fruits</code> list using the <code>append</code> method, and remove \"banana\" from the list using the <code>remove</code> method.</p>"},{"location":"scripting/python/5-data-structures/#tuples","title":"Tuples","text":"<p>A tuple is a collection of items, similar to a list. However, tuples are immutable, meaning that you cannot change the elements of a tuple after it has been created. Tuples are created using parentheses <code>()</code> and elements are separated by commas.</p> <pre><code># Syntax\ntuple_name = (item1, item2, ...)\n</code></pre> <pre><code># Example\ncolors = (\"red\", \"green\", \"blue\")\n</code></pre> <p>In the example above, we define a tuple called <code>colors</code> that contains three string elements.</p>"},{"location":"scripting/python/5-data-structures/#accessing-elements_1","title":"Accessing Elements","text":"<p>You can access individual elements of a tuple using their index, similar to lists.</p> <pre><code># Syntax\nelement = tuple_name[index]\n</code></pre> <pre><code># Example\ncolors = (\"red\", \"green\", \"blue\")\nprint(colors[0])  # Output: red\nprint(colors[-1])  # Output: blue\n</code></pre> <p>In the example above, we access the first and last elements of the <code>colors</code> tuple using their indices.</p>"},{"location":"scripting/python/5-data-structures/#modifying-elements_1","title":"Modifying Elements","text":"<p>Since tuples are immutable, you cannot modify the elements of a tuple after it has been created.</p> <pre><code># Example\ncolors = (\"red\", \"green\", \"blue\")\ncolors[1] = \"yellow\"  # TypeError: 'tuple' object does not support item assignment\n</code></pre> <p>In the example above, attempting to change the second element of the <code>colors</code> tuple results in a <code>TypeError</code>.</p>"},{"location":"scripting/python/5-data-structures/#dictionaries","title":"Dictionaries","text":"<p>A dictionary is a collection of key-value pairs. Each key is associated with a value, and you can use the key to access the corresponding value. Dictionaries are mutable and can contain elements of different types. Dictionaries are created using curly braces <code>{}</code> and key-value pairs are separated by commas.</p> <pre><code># Syntax\ndict_name = {key1: value1, key2: value2, ...}\n</code></pre> <pre><code># Example\nperson = {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}\n</code></pre> <p>In the example above, we define a dictionary called <code>person</code> that contains three key-value pairs.</p>"},{"location":"scripting/python/5-data-structures/#accessing-elements_2","title":"Accessing Elements","text":"<p>You can access the value associated with a key in a dictionary using the key.</p> <pre><code># Syntax\nvalue = dict_name[key]\n</code></pre> <pre><code># Example\nperson = {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}\nprint(person[\"name\"])  # Output: Alice\nprint(person[\"age\"])  # Output: 25\n</code></pre> <p>In the example above, we access the values associated with the \"name\" and \"age\" keys in the <code>person</code> dictionary.</p>"},{"location":"scripting/python/5-data-structures/#modifying-elements_2","title":"Modifying Elements","text":"<p>You can modify the value associated with a key in a dictionary by assigning a new value to it.</p> <pre><code># Syntax\ndict_name[key] = new_value\n</code></pre> <pre><code># Example\nperson = {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}\nperson[\"age\"] = 26\nprint(person)  # Output: {'name': 'Alice', 'age': 26, 'city': 'New York'}\n</code></pre> <p>In the example above, we change the value associated with the \"age\" key in the <code>person</code> dictionary from 25 to 26.</p>"},{"location":"scripting/python/5-data-structures/#adding-and-removing-elements_1","title":"Adding and Removing Elements","text":"<p>You can add new key-value pairs to a dictionary by assigning a value to a new key, and remove key-value pairs using the <code>pop</code> method.</p> <pre><code># Syntax\ndict_name[new_key] = new_value\ndict_name.pop(key)\n</code></pre> <pre><code># Example\nperson = {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}\n\n# Add a new key-value pair\nperson[\"email\"] = \"alice@example.com\"\nprint(person)  # Output: {'name': 'Alice', 'age': 25, 'city': 'New York', 'email': 'alice@example.com'}\n\n# Remove a key-value pair\nperson.pop(\"age\")\nprint(person)  # Output: {'name': 'Alice', 'city': 'New York', 'email': 'alice@example.com'}\n</code></pre> <p>In the example above, we add an \"email\" key-value pair to the <code>person</code> dictionary, and then remove the \"age\" key-value pair using the <code>pop</code> method.</p>"},{"location":"scripting/python/5-data-structures/#sets","title":"Sets","text":"<p>A set is an unordered collection of unique elements. Sets are mutable and can contain elements of different types. Sets are created using curly braces <code>{}</code> and elements are separated by commas.</p> <pre><code># Syntax\nset_name = {item1, item2, ...}\n</code></pre> <pre><code># Example\nfruits = {\"apple\", \"banana\", \"cherry\"}\n</code></pre> <p>In the example above, we define a set called <code>fruits</code> that contains three string elements.</p>"},{"location":"scripting/python/5-data-structures/#adding-and-removing-elements_2","title":"Adding and Removing Elements","text":"<p>You can add new elements to a set using the <code>add</code> method, and remove elements using the <code>remove</code> method.</p> <pre><code># Syntax\nset_name.add(new_item)\nset_name.remove(item)\n</code></pre> <pre><code># Example\nfruits = {\"apple\", \"banana\", \"cherry\"}\nfruits.add(\"orange\")\nprint(fruits)  # Output: {'apple', 'banana', 'cherry', 'orange'}\n\nfruits.remove(\"banana\")\nprint(fruits)  # Output: {'apple', 'cherry', 'orange'}\n</code></pre> <p>In the example above, we add \"orange\" to the <code>fruits</code> set using the <code>add</code> method, and remove \"banana\" from the set using the <code>remove</code> method.</p>"},{"location":"scripting/python/5-data-structures/#set-operations","title":"Set Operations","text":"<p>You can perform various set operations such as union, intersection, and difference using built-in methods.</p> <pre><code># Example\nset1 = {1, 2, 3}\nset2 = {3, 4, 5}\n\n# Union\nprint(set1 | set2)  # Output: {1, 2, 3, 4, 5}\n\n# Intersection\nprint(set1 &amp; set2)  # Output: {3}\n\n# Difference\nprint(set1 - set2)  # Output: {1, 2}\n</code></pre> <p>In the example above, we perform the union, intersection, and difference operations on two sets <code>set1</code> and <code>set2</code>.</p>"},{"location":"scripting/python/5-data-structures/#exercises","title":"Exercises","text":"<ol> <li>Write a program to count the frequency of elements in a list.</li> <li>Write a program to remove duplicates from a list.</li> <li>Write a program to find the intersection of two lists.</li> <li>Write a program to check if a set is a subset of another set.</li> <li>Write a program to perform the symmetric difference of two sets.</li> </ol>"},{"location":"scripting/python/6-modules/","title":"Modules and Packages","text":""},{"location":"scripting/python/6-modules/#modules","title":"Modules","text":"<p>In Python, a module is a file containing Python definitions and statements. The file name is the module name with the suffix <code>.py</code> appended. For example, a module named <code>example</code> would be in a file named <code>example.py</code>.</p> <p>You can use the <code>import</code> statement to import a module into your code. Once a module is imported, you can use its functions, classes, and variables in your program.</p> <pre><code># Syntax\nimport module_name\n</code></pre> <pre><code># Example\nimport math\nprint(math.pi)  # Output: 3.141592653589793\n</code></pre> <p>In the example above, we import the <code>math</code> module and use its <code>pi</code> variable to print the value of \u03c0.</p> <p>You can also import specific functions, classes, or variables from a module using the <code>from</code> keyword.</p> <pre><code># Syntax\nfrom module_name import name1, name2, ...\n</code></pre> <pre><code># Example\nfrom math import pi, sqrt\nprint(pi)   # Output: 3.141592653589793\nprint(sqrt(16))  # Output: 4.0\n</code></pre> <p>In the example above, we import the <code>pi</code> and <code>sqrt</code> functions from the <code>math</code> module and use them in our code.</p>"},{"location":"scripting/python/6-modules/#using-built-in-and-third-party-modules","title":"Using Built-in and Third-Party Modules","text":"<p>Python comes with a wide range of built-in modules that provide useful functions and classes for various tasks. Some of the most commonly used built-in modules include <code>math</code>, <code>random</code>, <code>datetime</code>, <code>os</code>, <code>sys</code>, and <code>json</code>.</p> <p>In addition to built-in modules, you can also use third-party modules created by other developers. These modules can be installed using the Python Package Index (PyPI) and the <code>pip</code> package manager.</p> <p>To install a third-party module, you can use the following command in your terminal or command prompt:</p> <pre><code>pip install module_name\n</code></pre> <p>Once installed, you can import and use the module in your code just like any other module.</p>"},{"location":"scripting/python/6-modules/#creating-your-own-modules-and-packages","title":"Creating Your Own Modules and Packages","text":"<p>You can create your own modules by writing Python code in a file and importing it into other programs. To create a module, simply save your code in a file with a <code>.py</code> extension and import it using the <code>import</code> statement.</p> <p>For example, if you have a file named <code>my_module.py</code> containing the following code:</p> <pre><code># my_module.py\ndef greet(name):\n    print(\"Hello, \" + name)\n</code></pre> <p>You can import the <code>greet</code> function from the <code>my_module</code> module and use it in your program.</p> <pre><code># main.py\nimport my_module\n\nmy_module.greet(\"Alice\")  # Output: Hello, Alice\n</code></pre> <p>You can also organize related modules into packages by creating a directory with an <code>__init__.py</code> file. This file can be empty, but it signals to Python that the directory should be treated as a package.</p> <p>For example, if you have a directory structure like this:</p> <pre><code>my_package/\n    __init__.py\n    module1.py\n    module2.py\n</code></pre> <p>You can import the modules from the package using dot notation.</p> <pre><code># main.py\nimport my_package.module1\nimport my_package.module2\n</code></pre> <p>In the example above, we import the <code>module1</code> and <code>module2</code> modules from the <code>my_package</code> package and use them in our program.</p>"},{"location":"scripting/python/7-file-io/","title":"File IO","text":""},{"location":"scripting/python/7-file-io/#reading-files","title":"Reading Files","text":"<p>Python has a built-in function called <code>open()</code> that allows you to open and read files. The <code>open()</code> function takes two arguments: the name of the file and the mode in which you want to open the file. The mode can be <code>r</code> for reading, <code>w</code> for writing, or <code>a</code> for appending.</p> <pre><code># Syntax\nfile = open(\"filename\", \"mode\")\n</code></pre> <pre><code># Example\nfile = open(\"example.txt\", \"r\")\n</code></pre> <p>In the example above, we open a file called <code>example.txt</code> in read mode.</p>"},{"location":"scripting/python/7-file-io/#reading-the-entire-file","title":"Reading the Entire File","text":"<p>You can read the entire contents of a file using the <code>read()</code> method.</p> <pre><code># Syntax\nfile.read()\n</code></pre> <pre><code># Example\nfile = open(\"example.txt\", \"r\")\ncontent = file.read()\nprint(content)\n</code></pre> <p>In the example above, we read the entire contents of the file <code>example.txt</code> and store it in a variable called <code>content</code>. We then print the contents of the file to the console.</p>"},{"location":"scripting/python/7-file-io/#reading-line-by-line","title":"Reading Line by Line","text":"<p>You can also read the contents of a file line by line using the <code>readline()</code> method.</p> <pre><code># Syntax\nfile.readline()\n</code></pre> <pre><code># Example\nfile = open(\"example.txt\", \"r\")\nline1 = file.readline()\nline2 = file.readline()\nprint(line1)\nprint(line2)\n</code></pre> <p>In the example above, we read the first two lines of the file <code>example.txt</code> and store them in variables called <code>line1</code> and <code>line2</code>. We then print the contents of the variables to the console.</p>"},{"location":"scripting/python/7-file-io/#closing-files","title":"Closing Files","text":"<p>After you have finished working with a file, you should close it using the <code>close()</code> method.</p> <pre><code># Syntax\nfile.close()\n</code></pre> <pre><code># Example\nfile = open(\"example.txt\", \"r\")\ncontent = file.read()\nfile.close()\n</code></pre> <p>In the example above, we open the file <code>example.txt</code>, read its contents, and then close the file.</p> <p>Alternatively, you can use the <code>with</code> statement to open and close files automatically.</p> <pre><code># Example\nwith open(\"example.txt\", \"r\") as file:\n    content = file.read()\n</code></pre> <p>In the example above, the file is automatically closed when the <code>with</code> block is exited.</p>"},{"location":"scripting/python/7-file-io/#writing-to-files","title":"Writing to Files","text":"<p>You can write to files using the <code>write()</code> method.</p> <pre><code># Syntax\nfile.write(\"text\")\n</code></pre> <pre><code># Example\nwith open(\"example.txt\", \"w\") as file:\n    file.write(\"Hello, world!\")\n</code></pre> <p>In the example above, we open the file <code>example.txt</code> in write mode and write the text \"Hello, world!\" to the file.</p>"},{"location":"scripting/python/7-file-io/#appending-to-files","title":"Appending to Files","text":"<p>You can append to files using the <code>write()</code> method with the <code>a</code> mode.</p> <pre><code># Example\nwith open(\"example.txt\", \"a\") as file:\n    file.write(\"Hello, again!\")\n</code></pre> <p>In the example above, we open the file <code>example.txt</code> in append mode and write the text \"Hello, again!\" to the file.</p>"},{"location":"scripting/python/7-file-io/#working-with-csv-files","title":"Working with CSV Files","text":"<p>Python has a built-in module called <code>csv</code> that allows you to read and write CSV files.</p> <pre><code># Example\nimport csv\n\nwith open(\"example.csv\", \"r\") as file:\n    reader = csv.reader(file)\n    for row in reader:\n        print(row)\n</code></pre> <p>In the example above, we use the <code>csv</code> module to read the contents of a CSV file called <code>example.csv</code> and print each row to the console.</p> <p>You can also write to CSV files using the <code>csv.writer</code> class.</p> <pre><code># Example\nimport csv\n\nwith open(\"example.csv\", \"w\") as file:\n    writer = csv.writer(file)\n    writer.writerow\n    writer.writerow([\"Name\", \"Age\"])\n    writer.writerow([\"Alice\", 25])\n    writer.writerow([\"Bob\", 30])\n</code></pre> <p>In the example above, we use the <code>csv.writer</code> class to write data to a CSV file called <code>example.csv</code>. We first write the column headers, and then write the data for each row.</p>"},{"location":"scripting/python/7-file-io/#other-file-formats","title":"Other File Formats","text":"<p>Python has built-in support for working with other file formats such as JSON, XML, and more. You can use third-party libraries to work with these file formats as well.</p> <pre><code># Example\nimport json\n\ndata = {\n    \"name\": \"Alice\",\n    \"age\": 25\n}\n\nwith open(\"example.json\", \"w\") as file:\n    json.dump(data, file)\n</code></pre> <p>In the example above, we use the <code>json</code> module to write a Python dictionary to a JSON file called <code>example.json</code>.</p>"},{"location":"scripting/python/8-exception-handling/","title":"Exception Handling","text":"<p>In Python, exceptions are used to handle errors and other exceptional events. When an error occurs, Python raises an exception, which can be caught and handled by the programmer. This allows you to write code that gracefully handles errors and prevents the program from crashing.</p>"},{"location":"scripting/python/8-exception-handling/#try-except-blocks","title":"Try-Except Blocks","text":"<p>You can use the <code>try</code> and <code>except</code> keywords to catch and handle exceptions in Python. The <code>try</code> block contains the code that may raise an exception, and the <code>except</code> block contains the code to handle the exception.</p> <pre><code># Syntax\ntry:\n    # code that may raise an exception\nexcept ExceptionType:\n    # code to handle the exception\n</code></pre> <pre><code># Example\ntry:\n    x = 10 / 0\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero\")\n</code></pre> <p>In the example above, we attempt to divide 10 by 0, which raises a <code>ZeroDivisionError</code> exception. We catch the exception using the <code>except</code> block and print an error message to the console.</p> <p>You can also catch multiple exceptions using a single <code>except</code> block.</p> <pre><code># Example\ntry:\n    x = 10 / 0\nexcept (ZeroDivisionError, ValueError):\n    print(\"Error: Division by zero or invalid value\")\n</code></pre> <p>In the example above, we catch both <code>ZeroDivisionError</code> and <code>ValueError</code> exceptions using a single <code>except</code> block.</p>"},{"location":"scripting/python/8-exception-handling/#finally-block","title":"Finally Block","text":"<p>You can use the <code>finally</code> block to execute code that should always run, regardless of whether an exception is raised or not. This is useful for releasing resources or cleaning up after an operation.</p> <pre><code># Syntax\ntry:\n    # code that may raise an exception\nexcept ExceptionType:\n    # code to handle the exception\nfinally:\n    # code that always runs\n</code></pre> <pre><code># Example\ntry:\n    file = open(\"example.txt\", \"r\")\n    content = file.read()\nexcept FileNotFoundError:\n    print(\"Error: File not found\")\nfinally:\n    file.close()\n</code></pre> <p>In the example above, we attempt to open and read the contents of a file. If the file is not found, a <code>FileNotFoundError</code> exception is raised, and we print an error message to the console. The <code>finally</code> block ensures that the file is closed, regardless of whether an exception is raised or not.</p>"},{"location":"scripting/python/8-exception-handling/#raising-exceptions","title":"Raising Exceptions","text":"<p>You can raise exceptions using the <code>raise</code> keyword. This allows you to signal that an error has occurred and provide information about the error.</p> <pre><code># Syntax\nraise ExceptionType(\"error message\")\n</code></pre> <pre><code># Example\ndef divide(x, y):\n    if y == 0:\n        raise ZeroDivisionError(\"Division by zero\")\n    return x / y\n\ntry:\n    result = divide(10, 0)\nexcept ZeroDivisionError as e:\n    print(\"Error:\", e)\n</code></pre> <p>In the example above, we define a function called <code>divide</code> that raises a <code>ZeroDivisionError</code> exception if the second argument is 0. We then call the function and catch the exception using the <code>except</code> block.</p>"},{"location":"scripting/python/8-exception-handling/#custom-exceptions","title":"Custom Exceptions","text":"<p>You can create your own custom exceptions by defining a new class that inherits from the <code>Exception</code> class.</p> <pre><code># Example\nclass CustomError(Exception):\n    pass\n\ntry:\n    raise CustomError(\"An error occurred\")\nexcept CustomError as e:\n    print(\"Error:\", e)\n</code></pre> <p>In the example above, we define a new class called <code>CustomError</code> that inherits from the <code>Exception</code> class. We then raise an instance of the <code>CustomError</code> class and catch it using the <code>except</code> block.</p>"},{"location":"scripting/python/8-exception-handling/#common-exceptions-in-python","title":"Common Exceptions in Python","text":"<p>Python has a wide range of built-in exceptions that are raised for various error conditions. Some of the most commonly used exceptions include:</p> <ul> <li><code>ZeroDivisionError</code>: Raised when division or modulo by zero is encountered.</li> <li><code>ValueError</code>: Raised when a function receives an argument of the correct type but an inappropriate value.</li> <li><code>TypeError</code>: Raised when an operation or function is applied to an object of inappropriate type.</li> <li><code>FileNotFoundError</code>: Raised when a file or directory is requested but cannot be found.</li> <li><code>KeyError</code>: Raised when a dictionary key is not found.</li> <li><code>IndexError</code>: Raised when a sequence subscript is out of range.</li> <li><code>NameError</code>: Raised when a local or global name is not found.</li> <li><code>ImportError</code>: Raised when an import statement fails to find the module definition.</li> <li><code>SyntaxError</code>: Raised when the parser encounters a syntax error.</li> <li><code>IndentationError</code>: Raised when the indentation is incorrect.</li> <li><code>RuntimeError</code>: Raised when an error is detected that doesn't fall into any of the other categories.</li> </ul>"},{"location":"scripting/python/9-oops/","title":"Object Oriented Programming (OOP)","text":"<p>Object-oriented programming (OOP) is a programming paradigm that uses objects and classes to design and build applications. It is based on the concept of objects, which can contain data in the form of fields (attributes or properties), and code in the form of procedures (methods or functions).</p>"},{"location":"scripting/python/9-oops/#classes-and-objects","title":"Classes and Objects","text":"<p>A class is a blueprint for creating objects. It defines the properties and behaviors of the objects that will be created from it. An object is an instance of a class, and it can be used to access the properties and behaviors defined by the class.</p> <pre><code># Syntax\nclass ClassName:\n    # class body\n    # code block\n</code></pre> <pre><code># Example\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def greet(self):\n        print(f\"Hello, my name is {self.name} and I am {self.age} years old\")\n</code></pre> <p>In the example above, we define a class called <code>Person</code> with two attributes <code>name</code> and <code>age</code>, and a method <code>greet</code> that prints a greeting message using the values of the attributes.</p>"},{"location":"scripting/python/9-oops/#creating-objects","title":"Creating Objects","text":"<p>You can create objects from a class using the class name followed by parentheses. You can then access the attributes and methods of the object using the dot operator.</p> <pre><code># Syntax\nobject_name = ClassName(arguments)\n</code></pre> <pre><code># Example\nperson1 = Person(\"Alice\", 25)\nperson1.greet()  # Output: Hello, my name is Alice and I am 25 years old\n</code></pre> <p>In the example above, we create an object called <code>person1</code> from the <code>Person</code> class and call the <code>greet</code> method to print a greeting message.</p>"},{"location":"scripting/python/9-oops/#constructors-and-destructors","title":"Constructors and Destructors","text":"<p>A constructor is a special method that is called when an object is created. It is used to initialize the attributes of the object. In Python, the constructor method is called <code>__init__</code>.</p> <pre><code># Syntax\ndef __init__(self, parameters):\n    # constructor body\n    # code block\n</code></pre> <pre><code># Example\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n</code></pre> <p>In the example above, we define a constructor method that takes two parameters <code>name</code> and <code>age</code> and initializes the attributes of the object.</p> <p>A destructor is a special method that is called when an object is destroyed. It is used to perform cleanup operations before the object is removed from memory. In Python, the destructor method is called <code>__del__</code>.</p> <pre><code># Syntax\ndef __del__(self):\n    # destructor body\n    # code block\n</code></pre> <pre><code># Example\nclass Person:\n    def __del__(self):\n        print(\"Object destroyed\")\n</code></pre> <p>In the example above, we define a destructor method that prints a message when the object is destroyed.</p>"},{"location":"scripting/python/9-oops/#inheritance","title":"Inheritance","text":"<p>Inheritance is a mechanism that allows a class to inherit properties and behaviors from another class. The class that inherits from another class is called a subclass, and the class that is inherited from is called a superclass.</p> <pre><code># Syntax\nclass SubclassName(SuperclassName):\n    # class body\n    # code block\n</code></pre> <pre><code># Example\nclass Student(Person):\n    def __init__(self, name, age, grade):\n        super().__init__(name, age)\n        self.grade = grade\n\n    def study(self):\n        print(f\"{self.name} is studying\")\n</code></pre> <p>In the example above, we define a subclass called <code>Student</code> that inherits from the <code>Person</code> class. The <code>Student</code> class has an additional attribute <code>grade</code> and a method <code>study</code>.</p>"},{"location":"scripting/python/9-oops/#method-overriding","title":"Method Overriding","text":"<p>Method overriding is a mechanism that allows a subclass to provide a specific implementation of a method that is already defined in its superclass. This allows you to customize the behavior of the method for the subclass.</p> <pre><code># Example\nclass Student(Person):\n    def greet(self):\n        print(f\"Hello, my name is {self.name} and I am a student\")\n</code></pre> <p>In the example above, we define a subclass called <code>Student</code> that overrides the <code>greet</code> method of the <code>Person</code> class to provide a different greeting message.</p>"},{"location":"scripting/python/9-oops/#encapsulation","title":"Encapsulation","text":"<p>Encapsulation is a mechanism that restricts direct access to some of the object's components. It prevents the accidental modification of data and allows the object to control its state and maintain its integrity.</p> <p>In Python, encapsulation is achieved by using private attributes and methods, which are denoted by a leading double underscore <code>__</code>.</p> <pre><code># Example\nclass Person:\n    def __init__(self, name, age):\n        self.__name = name\n        self.__age = age\n\n    def get_name(self):\n        return self.__name\n\n    def set_name(self, name):\n        self.__name = name\n</code></pre> <p>In the example above, we define a class called <code>Person</code> with private attributes <code>__name</code> and <code>__age</code>, and methods <code>get_name</code> and <code>set_name</code> to access and modify the attributes.</p>"},{"location":"scripting/python/9-oops/#polymorphism","title":"Polymorphism","text":"<p>Polymorphism is a mechanism that allows objects of different classes to be treated as objects of a common superclass. This allows you to write code that can work with objects of different types and classes.</p> <pre><code># Example\nclass Dog:\n    def speak(self):\n        print(\"Woof!\")\n\nclass Cat:\n    def speak(self):\n        print(\"Meow!\")\n\ndef make_sound(animal):\n    animal.speak()\n\ndog = Dog()\ncat = Cat()\n\nmake_sound(dog)  # Output: Woof!\nmake_sound(cat)  # Output: Meow!\n</code></pre> <p>In the example above, we define two classes <code>Dog</code> and <code>Cat</code> with a method <code>speak</code>, and a function <code>make_sound</code> that takes an object of any class with a <code>speak</code> method and calls the method.</p>"},{"location":"scripting/python/9-oops/#abstract-classes-and-interfaces","title":"Abstract Classes and Interfaces","text":"<p>An abstract class is a class that cannot be instantiated and is used to define methods that must be implemented by its subclasses. An interface is a collection of abstract methods that define a contract for the behavior of a class.</p> <p>In Python, abstract classes and interfaces can be defined using the <code>abc</code> module.</p> <pre><code># Example\nfrom abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\n    @abstractmethod\n    def perimeter(self):\n        pass\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * self.radius ** 2\n\n    def perimeter(self):\n        return 2 * 3.14 * self.radius\n</code></pre> <p>In the example above, we define an abstract class <code>Shape</code> with abstract methods <code>area</code> and <code>perimeter</code>, and a subclass <code>Circle</code> that implements the methods.</p>"}]}